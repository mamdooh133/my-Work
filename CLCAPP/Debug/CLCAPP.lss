
CLCAPP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  000013e2  00001476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008000c2  008000c2  000014d8  2**0
                  ALLOC
  3 .stab         00001cd4  00000000  00000000  000014d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000af4  00000000  00000000  000031ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3d       	cpi	r26, 0xD1	; 209
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0c 07 	call	0xe18	; 0xe18 <main>
      8a:	0c 94 ef 09 	jmp	0x13de	; 0x13de <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:
#include "ADC_config.h"
#include "DIO_utilites.h"

static const u8 CHKERR[2]={error,ok};
extern void ADC_voidInit(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	ADC_ADMUX = ADC_ADMUX_VAL;
      9a:	e7 e2       	ldi	r30, 0x27	; 39
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	80 e4       	ldi	r24, 0x40	; 64
      a0:	80 83       	st	Z, r24
	ADC_ADCSRA= ADC_ADCSRA_VAL ;
      a2:	e6 e2       	ldi	r30, 0x26	; 38
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	10 82       	st	Z, r1
	ADC_ADCH=ADC_ADCH_VAL;
      a8:	e5 e2       	ldi	r30, 0x25	; 37
      aa:	f0 e0       	ldi	r31, 0x00	; 0
      ac:	10 82       	st	Z, r1
	ADC_ADCL=ADC_ADCL_VAL;
      ae:	e4 e2       	ldi	r30, 0x24	; 36
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	10 82       	st	Z, r1
	ADC_SFIOR|=ADC_SFIOR_VAL  ;
      b4:	a0 e5       	ldi	r26, 0x50	; 80
      b6:	b0 e0       	ldi	r27, 0x00	; 0
      b8:	e0 e5       	ldi	r30, 0x50	; 80
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	80 81       	ld	r24, Z
      be:	80 6e       	ori	r24, 0xE0	; 224
      c0:	8c 93       	st	X, r24

}
      c2:	cf 91       	pop	r28
      c4:	df 91       	pop	r29
      c6:	08 95       	ret

000000c8 <ADC_voidEnable>:

extern void ADC_voidEnable(void)
{
      c8:	df 93       	push	r29
      ca:	cf 93       	push	r28
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62
	ADC_ADCSRA|=(1<<ADEN);
      d0:	a6 e2       	ldi	r26, 0x26	; 38
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	e6 e2       	ldi	r30, 0x26	; 38
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	80 81       	ld	r24, Z
      da:	80 68       	ori	r24, 0x80	; 128
      dc:	8c 93       	st	X, r24
}
      de:	cf 91       	pop	r28
      e0:	df 91       	pop	r29
      e2:	08 95       	ret

000000e4 <ADC_voidDisable>:

extern void ADC_voidDisable(void)
{
      e4:	df 93       	push	r29
      e6:	cf 93       	push	r28
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
	ADC_ADCSRA&=~(1<<ADEN);
      ec:	a6 e2       	ldi	r26, 0x26	; 38
      ee:	b0 e0       	ldi	r27, 0x00	; 0
      f0:	e6 e2       	ldi	r30, 0x26	; 38
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	80 81       	ld	r24, Z
      f6:	8f 77       	andi	r24, 0x7F	; 127
      f8:	8c 93       	st	X, r24
}
      fa:	cf 91       	pop	r28
      fc:	df 91       	pop	r29
      fe:	08 95       	ret

00000100 <ADC_u8ReadCh_SSht>:

extern u8 ADC_u8ReadCh_SSht(u8 Copy_ChIdx , u16 * Copy_PtrToVal)
{
     100:	df 93       	push	r29
     102:	cf 93       	push	r28
     104:	00 d0       	rcall	.+0      	; 0x106 <ADC_u8ReadCh_SSht+0x6>
     106:	00 d0       	rcall	.+0      	; 0x108 <ADC_u8ReadCh_SSht+0x8>
     108:	0f 92       	push	r0
     10a:	cd b7       	in	r28, 0x3d	; 61
     10c:	de b7       	in	r29, 0x3e	; 62
     10e:	89 83       	std	Y+1, r24	; 0x01
     110:	7b 83       	std	Y+3, r23	; 0x03
     112:	6a 83       	std	Y+2, r22	; 0x02

	*Copy_PtrToVal=0 ;
     114:	ea 81       	ldd	r30, Y+2	; 0x02
     116:	fb 81       	ldd	r31, Y+3	; 0x03
     118:	11 82       	std	Z+1, r1	; 0x01
     11a:	10 82       	st	Z, r1

	ADC_ADMUX|=(0x1F & Copy_ChIdx) ;
     11c:	a7 e2       	ldi	r26, 0x27	; 39
     11e:	b0 e0       	ldi	r27, 0x00	; 0
     120:	e7 e2       	ldi	r30, 0x27	; 39
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	80 81       	ld	r24, Z
     126:	98 2f       	mov	r25, r24
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	8f 71       	andi	r24, 0x1F	; 31
     12c:	89 2b       	or	r24, r25
     12e:	8c 93       	st	X, r24
	ADC_ADCSRA|=(1<<ADSC);
     130:	a6 e2       	ldi	r26, 0x26	; 38
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	e6 e2       	ldi	r30, 0x26	; 38
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	80 64       	ori	r24, 0x40	; 64
     13c:	8c 93       	st	X, r24

	while(ADC_ADCSRA&(1<<ADSC)) ;
     13e:	e6 e2       	ldi	r30, 0x26	; 38
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	88 2f       	mov	r24, r24
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	80 74       	andi	r24, 0x40	; 64
     14a:	90 70       	andi	r25, 0x00	; 0
     14c:	00 97       	sbiw	r24, 0x00	; 0
     14e:	b9 f7       	brne	.-18     	; 0x13e <ADC_u8ReadCh_SSht+0x3e>
switch 	(ADC_RES)
{
case ADC_LOWRES :
		if(ADC_ADLAR_INITVAL==0)
		{
		* Copy_PtrToVal = ADC_ADCL  ;
     150:	e4 e2       	ldi	r30, 0x24	; 36
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	88 2f       	mov	r24, r24
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	ea 81       	ldd	r30, Y+2	; 0x02
     15c:	fb 81       	ldd	r31, Y+3	; 0x03
     15e:	91 83       	std	Z+1, r25	; 0x01
     160:	80 83       	st	Z, r24
		* Copy_PtrToVal >>=2  ;
     162:	ea 81       	ldd	r30, Y+2	; 0x02
     164:	fb 81       	ldd	r31, Y+3	; 0x03
     166:	80 81       	ld	r24, Z
     168:	91 81       	ldd	r25, Z+1	; 0x01
     16a:	96 95       	lsr	r25
     16c:	87 95       	ror	r24
     16e:	96 95       	lsr	r25
     170:	87 95       	ror	r24
     172:	ea 81       	ldd	r30, Y+2	; 0x02
     174:	fb 81       	ldd	r31, Y+3	; 0x03
     176:	91 83       	std	Z+1, r25	; 0x01
     178:	80 83       	st	Z, r24
		* Copy_PtrToVal |=(ADC_ADCH<<6) ;
     17a:	ea 81       	ldd	r30, Y+2	; 0x02
     17c:	fb 81       	ldd	r31, Y+3	; 0x03
     17e:	20 81       	ld	r18, Z
     180:	31 81       	ldd	r19, Z+1	; 0x01
     182:	e5 e2       	ldi	r30, 0x25	; 37
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	80 81       	ld	r24, Z
     188:	88 2f       	mov	r24, r24
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	00 24       	eor	r0, r0
     18e:	96 95       	lsr	r25
     190:	87 95       	ror	r24
     192:	07 94       	ror	r0
     194:	96 95       	lsr	r25
     196:	87 95       	ror	r24
     198:	07 94       	ror	r0
     19a:	98 2f       	mov	r25, r24
     19c:	80 2d       	mov	r24, r0
     19e:	82 2b       	or	r24, r18
     1a0:	93 2b       	or	r25, r19
     1a2:	ea 81       	ldd	r30, Y+2	; 0x02
     1a4:	fb 81       	ldd	r31, Y+3	; 0x03
     1a6:	91 83       	std	Z+1, r25	; 0x01
     1a8:	80 83       	st	Z, r24
	break ;

default :
	break ;
}
return CHKERR[Copy_ChIdx < 8];
     1aa:	1d 82       	std	Y+5, r1	; 0x05
     1ac:	1c 82       	std	Y+4, r1	; 0x04
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	88 30       	cpi	r24, 0x08	; 8
     1b2:	20 f4       	brcc	.+8      	; 0x1bc <ADC_u8ReadCh_SSht+0xbc>
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	9d 83       	std	Y+5, r25	; 0x05
     1ba:	8c 83       	std	Y+4, r24	; 0x04
     1bc:	ec 81       	ldd	r30, Y+4	; 0x04
     1be:	fd 81       	ldd	r31, Y+5	; 0x05
     1c0:	e5 58       	subi	r30, 0x85	; 133
     1c2:	ff 4f       	sbci	r31, 0xFF	; 255
     1c4:	80 81       	ld	r24, Z
}
     1c6:	0f 90       	pop	r0
     1c8:	0f 90       	pop	r0
     1ca:	0f 90       	pop	r0
     1cc:	0f 90       	pop	r0
     1ce:	0f 90       	pop	r0
     1d0:	cf 91       	pop	r28
     1d2:	df 91       	pop	r29
     1d4:	08 95       	ret

000001d6 <ADC_u8ReadCh_MSht>:

extern u8 ADC_u8ReadCh_MSht(u8 Copy_ChIdx , u16 * Copy_PtrToVal)
{
     1d6:	df 93       	push	r29
     1d8:	cf 93       	push	r28
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
     1de:	2a 97       	sbiw	r28, 0x0a	; 10
     1e0:	0f b6       	in	r0, 0x3f	; 63
     1e2:	f8 94       	cli
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	cd bf       	out	0x3d, r28	; 61
     1ea:	8e 83       	std	Y+6, r24	; 0x06
     1ec:	78 87       	std	Y+8, r23	; 0x08
     1ee:	6f 83       	std	Y+7, r22	; 0x07

	u8 local_u8ount=0;
     1f0:	1d 82       	std	Y+5, r1	; 0x05
	u16 local_u16avg=0 ;
     1f2:	1c 82       	std	Y+4, r1	; 0x04
     1f4:	1b 82       	std	Y+3, r1	; 0x03
	u32 local_u32sum=0 ;
     1f6:	1a 82       	std	Y+2, r1	; 0x02
     1f8:	19 82       	std	Y+1, r1	; 0x01
	 * Copy_PtrToVal=0;
     1fa:	ef 81       	ldd	r30, Y+7	; 0x07
     1fc:	f8 85       	ldd	r31, Y+8	; 0x08
     1fe:	11 82       	std	Z+1, r1	; 0x01
     200:	10 82       	st	Z, r1
for(local_u8ount=0 ;local_u8ount<8;local_u8ount++)
     202:	1d 82       	std	Y+5, r1	; 0x05
     204:	49 c0       	rjmp	.+146    	; 0x298 <ADC_u8ReadCh_MSht+0xc2>
{
	ADC_ADMUX|=(0x1F & Copy_ChIdx) ;
     206:	a7 e2       	ldi	r26, 0x27	; 39
     208:	b0 e0       	ldi	r27, 0x00	; 0
     20a:	e7 e2       	ldi	r30, 0x27	; 39
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	98 2f       	mov	r25, r24
     212:	8e 81       	ldd	r24, Y+6	; 0x06
     214:	8f 71       	andi	r24, 0x1F	; 31
     216:	89 2b       	or	r24, r25
     218:	8c 93       	st	X, r24
	ADC_ADCSRA|=(1<<ADSC);
     21a:	a6 e2       	ldi	r26, 0x26	; 38
     21c:	b0 e0       	ldi	r27, 0x00	; 0
     21e:	e6 e2       	ldi	r30, 0x26	; 38
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 81       	ld	r24, Z
     224:	80 64       	ori	r24, 0x40	; 64
     226:	8c 93       	st	X, r24

	while(ADC_ADCSRA&(1<<ADSC)) ;
     228:	e6 e2       	ldi	r30, 0x26	; 38
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	88 2f       	mov	r24, r24
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	80 74       	andi	r24, 0x40	; 64
     234:	90 70       	andi	r25, 0x00	; 0
     236:	00 97       	sbiw	r24, 0x00	; 0
     238:	b9 f7       	brne	.-18     	; 0x228 <ADC_u8ReadCh_MSht+0x52>
switch 	(ADC_RES)
{
case ADC_LOWRES :
		if(ADC_ADLAR_INITVAL==0)
		{
			local_u16avg = ADC_ADCL  ;
     23a:	e4 e2       	ldi	r30, 0x24	; 36
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	88 2f       	mov	r24, r24
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	9c 83       	std	Y+4, r25	; 0x04
     246:	8b 83       	std	Y+3, r24	; 0x03
			local_u16avg >>=2  ;
     248:	8b 81       	ldd	r24, Y+3	; 0x03
     24a:	9c 81       	ldd	r25, Y+4	; 0x04
     24c:	96 95       	lsr	r25
     24e:	87 95       	ror	r24
     250:	96 95       	lsr	r25
     252:	87 95       	ror	r24
     254:	9c 83       	std	Y+4, r25	; 0x04
     256:	8b 83       	std	Y+3, r24	; 0x03
			local_u16avg |=(ADC_ADCH<<6) ;
     258:	e5 e2       	ldi	r30, 0x25	; 37
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	88 2f       	mov	r24, r24
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	00 24       	eor	r0, r0
     264:	96 95       	lsr	r25
     266:	87 95       	ror	r24
     268:	07 94       	ror	r0
     26a:	96 95       	lsr	r25
     26c:	87 95       	ror	r24
     26e:	07 94       	ror	r0
     270:	98 2f       	mov	r25, r24
     272:	80 2d       	mov	r24, r0
     274:	9c 01       	movw	r18, r24
     276:	8b 81       	ldd	r24, Y+3	; 0x03
     278:	9c 81       	ldd	r25, Y+4	; 0x04
     27a:	82 2b       	or	r24, r18
     27c:	93 2b       	or	r25, r19
     27e:	9c 83       	std	Y+4, r25	; 0x04
     280:	8b 83       	std	Y+3, r24	; 0x03
	break ;

default :
	break ;
}
	local_u32sum+=local_u16avg ;
     282:	29 81       	ldd	r18, Y+1	; 0x01
     284:	3a 81       	ldd	r19, Y+2	; 0x02
     286:	8b 81       	ldd	r24, Y+3	; 0x03
     288:	9c 81       	ldd	r25, Y+4	; 0x04
     28a:	82 0f       	add	r24, r18
     28c:	93 1f       	adc	r25, r19
     28e:	9a 83       	std	Y+2, r25	; 0x02
     290:	89 83       	std	Y+1, r24	; 0x01

	u8 local_u8ount=0;
	u16 local_u16avg=0 ;
	u32 local_u32sum=0 ;
	 * Copy_PtrToVal=0;
for(local_u8ount=0 ;local_u8ount<8;local_u8ount++)
     292:	8d 81       	ldd	r24, Y+5	; 0x05
     294:	8f 5f       	subi	r24, 0xFF	; 255
     296:	8d 83       	std	Y+5, r24	; 0x05
     298:	8d 81       	ldd	r24, Y+5	; 0x05
     29a:	88 30       	cpi	r24, 0x08	; 8
     29c:	08 f4       	brcc	.+2      	; 0x2a0 <ADC_u8ReadCh_MSht+0xca>
     29e:	b3 cf       	rjmp	.-154    	; 0x206 <ADC_u8ReadCh_MSht+0x30>
default :
	break ;
}
	local_u32sum+=local_u16avg ;
}
* Copy_PtrToVal =  local_u32sum /8 ;
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	9a 81       	ldd	r25, Y+2	; 0x02
     2a4:	96 95       	lsr	r25
     2a6:	87 95       	ror	r24
     2a8:	96 95       	lsr	r25
     2aa:	87 95       	ror	r24
     2ac:	96 95       	lsr	r25
     2ae:	87 95       	ror	r24
     2b0:	ef 81       	ldd	r30, Y+7	; 0x07
     2b2:	f8 85       	ldd	r31, Y+8	; 0x08
     2b4:	91 83       	std	Z+1, r25	; 0x01
     2b6:	80 83       	st	Z, r24
return CHKERR[Copy_ChIdx < 8];
     2b8:	1a 86       	std	Y+10, r1	; 0x0a
     2ba:	19 86       	std	Y+9, r1	; 0x09
     2bc:	8e 81       	ldd	r24, Y+6	; 0x06
     2be:	88 30       	cpi	r24, 0x08	; 8
     2c0:	20 f4       	brcc	.+8      	; 0x2ca <ADC_u8ReadCh_MSht+0xf4>
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	9a 87       	std	Y+10, r25	; 0x0a
     2c8:	89 87       	std	Y+9, r24	; 0x09
     2ca:	e9 85       	ldd	r30, Y+9	; 0x09
     2cc:	fa 85       	ldd	r31, Y+10	; 0x0a
     2ce:	e5 58       	subi	r30, 0x85	; 133
     2d0:	ff 4f       	sbci	r31, 0xFF	; 255
     2d2:	80 81       	ld	r24, Z
}
     2d4:	2a 96       	adiw	r28, 0x0a	; 10
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	cd bf       	out	0x3d, r28	; 61
     2e0:	cf 91       	pop	r28
     2e2:	df 91       	pop	r29
     2e4:	08 95       	ret

000002e6 <ADC_u8ReadGp>:

extern u8 ADC_u8ReadGp( u8 * Copy_IdxArr, u16 * Copy_PtrToVal)
{
     2e6:	df 93       	push	r29
     2e8:	cf 93       	push	r28
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	27 97       	sbiw	r28, 0x07	; 7
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	9b 83       	std	Y+3, r25	; 0x03
     2fc:	8a 83       	std	Y+2, r24	; 0x02
     2fe:	7d 83       	std	Y+5, r23	; 0x05
     300:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_u8count ;
	 * Copy_PtrToVal=0;
     302:	ec 81       	ldd	r30, Y+4	; 0x04
     304:	fd 81       	ldd	r31, Y+5	; 0x05
     306:	11 82       	std	Z+1, r1	; 0x01
     308:	10 82       	st	Z, r1

for(local_u8count=0;local_u8count<4;local_u8count++)
     30a:	19 82       	std	Y+1, r1	; 0x01
     30c:	52 c0       	rjmp	.+164    	; 0x3b2 <ADC_u8ReadGp+0xcc>
{
		ADC_ADMUX|=(0x1F & Copy_IdxArr[local_u8count]) ;
     30e:	a7 e2       	ldi	r26, 0x27	; 39
     310:	b0 e0       	ldi	r27, 0x00	; 0
     312:	e7 e2       	ldi	r30, 0x27	; 39
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	80 81       	ld	r24, Z
     318:	48 2f       	mov	r20, r24
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	28 2f       	mov	r18, r24
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	8a 81       	ldd	r24, Y+2	; 0x02
     322:	9b 81       	ldd	r25, Y+3	; 0x03
     324:	fc 01       	movw	r30, r24
     326:	e2 0f       	add	r30, r18
     328:	f3 1f       	adc	r31, r19
     32a:	80 81       	ld	r24, Z
     32c:	8f 71       	andi	r24, 0x1F	; 31
     32e:	84 2b       	or	r24, r20
     330:	8c 93       	st	X, r24
		ADC_ADCSRA|=(1<<ADSC);
     332:	a6 e2       	ldi	r26, 0x26	; 38
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	e6 e2       	ldi	r30, 0x26	; 38
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	80 81       	ld	r24, Z
     33c:	80 64       	ori	r24, 0x40	; 64
     33e:	8c 93       	st	X, r24

		while(ADC_ADCSRA&(1<<ADSC)) ;
     340:	e6 e2       	ldi	r30, 0x26	; 38
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
     346:	88 2f       	mov	r24, r24
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	80 74       	andi	r24, 0x40	; 64
     34c:	90 70       	andi	r25, 0x00	; 0
     34e:	00 97       	sbiw	r24, 0x00	; 0
     350:	b9 f7       	brne	.-18     	; 0x340 <ADC_u8ReadGp+0x5a>
	switch 	(ADC_RES)
	{
	case ADC_LOWRES :
			if(ADC_ADLAR_INITVAL==0)
			{
				* Copy_PtrToVal = ADC_ADCL  ;
     352:	e4 e2       	ldi	r30, 0x24	; 36
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	88 2f       	mov	r24, r24
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	ec 81       	ldd	r30, Y+4	; 0x04
     35e:	fd 81       	ldd	r31, Y+5	; 0x05
     360:	91 83       	std	Z+1, r25	; 0x01
     362:	80 83       	st	Z, r24
				* Copy_PtrToVal >>=2  ;
     364:	ec 81       	ldd	r30, Y+4	; 0x04
     366:	fd 81       	ldd	r31, Y+5	; 0x05
     368:	80 81       	ld	r24, Z
     36a:	91 81       	ldd	r25, Z+1	; 0x01
     36c:	96 95       	lsr	r25
     36e:	87 95       	ror	r24
     370:	96 95       	lsr	r25
     372:	87 95       	ror	r24
     374:	ec 81       	ldd	r30, Y+4	; 0x04
     376:	fd 81       	ldd	r31, Y+5	; 0x05
     378:	91 83       	std	Z+1, r25	; 0x01
     37a:	80 83       	st	Z, r24
				* Copy_PtrToVal |=(ADC_ADCH<<6) ;
     37c:	ec 81       	ldd	r30, Y+4	; 0x04
     37e:	fd 81       	ldd	r31, Y+5	; 0x05
     380:	20 81       	ld	r18, Z
     382:	31 81       	ldd	r19, Z+1	; 0x01
     384:	e5 e2       	ldi	r30, 0x25	; 37
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	80 81       	ld	r24, Z
     38a:	88 2f       	mov	r24, r24
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	00 24       	eor	r0, r0
     390:	96 95       	lsr	r25
     392:	87 95       	ror	r24
     394:	07 94       	ror	r0
     396:	96 95       	lsr	r25
     398:	87 95       	ror	r24
     39a:	07 94       	ror	r0
     39c:	98 2f       	mov	r25, r24
     39e:	80 2d       	mov	r24, r0
     3a0:	82 2b       	or	r24, r18
     3a2:	93 2b       	or	r25, r19
     3a4:	ec 81       	ldd	r30, Y+4	; 0x04
     3a6:	fd 81       	ldd	r31, Y+5	; 0x05
     3a8:	91 83       	std	Z+1, r25	; 0x01
     3aa:	80 83       	st	Z, r24
extern u8 ADC_u8ReadGp( u8 * Copy_IdxArr, u16 * Copy_PtrToVal)
{
	u8 local_u8count ;
	 * Copy_PtrToVal=0;

for(local_u8count=0;local_u8count<4;local_u8count++)
     3ac:	89 81       	ldd	r24, Y+1	; 0x01
     3ae:	8f 5f       	subi	r24, 0xFF	; 255
     3b0:	89 83       	std	Y+1, r24	; 0x01
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
     3b4:	84 30       	cpi	r24, 0x04	; 4
     3b6:	08 f4       	brcc	.+2      	; 0x3ba <ADC_u8ReadGp+0xd4>
     3b8:	aa cf       	rjmp	.-172    	; 0x30e <ADC_u8ReadGp+0x28>

	default :
		break ;
	}
}
	return CHKERR[Copy_IdxArr[0] < 8 && Copy_IdxArr[1] < 8 && Copy_IdxArr[2] < 8 && Copy_IdxArr[3] < 8 ];
     3ba:	ea 81       	ldd	r30, Y+2	; 0x02
     3bc:	fb 81       	ldd	r31, Y+3	; 0x03
     3be:	80 81       	ld	r24, Z
     3c0:	88 30       	cpi	r24, 0x08	; 8
     3c2:	d0 f4       	brcc	.+52     	; 0x3f8 <ADC_u8ReadGp+0x112>
     3c4:	8a 81       	ldd	r24, Y+2	; 0x02
     3c6:	9b 81       	ldd	r25, Y+3	; 0x03
     3c8:	fc 01       	movw	r30, r24
     3ca:	31 96       	adiw	r30, 0x01	; 1
     3cc:	80 81       	ld	r24, Z
     3ce:	88 30       	cpi	r24, 0x08	; 8
     3d0:	98 f4       	brcc	.+38     	; 0x3f8 <ADC_u8ReadGp+0x112>
     3d2:	8a 81       	ldd	r24, Y+2	; 0x02
     3d4:	9b 81       	ldd	r25, Y+3	; 0x03
     3d6:	fc 01       	movw	r30, r24
     3d8:	32 96       	adiw	r30, 0x02	; 2
     3da:	80 81       	ld	r24, Z
     3dc:	88 30       	cpi	r24, 0x08	; 8
     3de:	60 f4       	brcc	.+24     	; 0x3f8 <ADC_u8ReadGp+0x112>
     3e0:	8a 81       	ldd	r24, Y+2	; 0x02
     3e2:	9b 81       	ldd	r25, Y+3	; 0x03
     3e4:	fc 01       	movw	r30, r24
     3e6:	33 96       	adiw	r30, 0x03	; 3
     3e8:	80 81       	ld	r24, Z
     3ea:	88 30       	cpi	r24, 0x08	; 8
     3ec:	28 f4       	brcc	.+10     	; 0x3f8 <ADC_u8ReadGp+0x112>
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	9f 83       	std	Y+7, r25	; 0x07
     3f4:	8e 83       	std	Y+6, r24	; 0x06
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <ADC_u8ReadGp+0x116>
     3f8:	1f 82       	std	Y+7, r1	; 0x07
     3fa:	1e 82       	std	Y+6, r1	; 0x06
     3fc:	8e 81       	ldd	r24, Y+6	; 0x06
     3fe:	9f 81       	ldd	r25, Y+7	; 0x07
     400:	fc 01       	movw	r30, r24
     402:	e5 58       	subi	r30, 0x85	; 133
     404:	ff 4f       	sbci	r31, 0xFF	; 255
     406:	80 81       	ld	r24, Z
}
     408:	27 96       	adiw	r28, 0x07	; 7
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	de bf       	out	0x3e, r29	; 62
     410:	0f be       	out	0x3f, r0	; 63
     412:	cd bf       	out	0x3d, r28	; 61
     414:	cf 91       	pop	r28
     416:	df 91       	pop	r29
     418:	08 95       	ret

0000041a <CLC_voidInit>:
#include "DIO_utilites.h"
#include "CLCD_private.h"
const u8  CLC_u8DataArr[8]={CLC_u8D0,CLC_u8D1,CLC_u8D2,CLC_u8D3,CLC_u8D4,CLC_u8D5,CLC_u8D6,CLC_u8D7};
const u8 CHKerr[2]={error,ok};
void CLC_voidInit(void)
{
     41a:	df 93       	push	r29
     41c:	cf 93       	push	r28
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
     422:	28 97       	sbiw	r28, 0x08	; 8
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61

	DELAY(20);
     42e:	18 86       	std	Y+8, r1	; 0x08
     430:	1f 82       	std	Y+7, r1	; 0x07
     432:	06 c0       	rjmp	.+12     	; 0x440 <CLC_voidInit+0x26>
     434:	00 00       	nop
     436:	8f 81       	ldd	r24, Y+7	; 0x07
     438:	98 85       	ldd	r25, Y+8	; 0x08
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	98 87       	std	Y+8, r25	; 0x08
     43e:	8f 83       	std	Y+7, r24	; 0x07
     440:	8f 81       	ldd	r24, Y+7	; 0x07
     442:	98 85       	ldd	r25, Y+8	; 0x08
     444:	27 e2       	ldi	r18, 0x27	; 39
     446:	80 31       	cpi	r24, 0x10	; 16
     448:	92 07       	cpc	r25, r18
     44a:	a0 f3       	brcs	.-24     	; 0x434 <CLC_voidInit+0x1a>
	CLCD_u8WriteComand(0b00110000);
     44c:	80 e3       	ldi	r24, 0x30	; 48
     44e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>

	DELAY(5);
     452:	1e 82       	std	Y+6, r1	; 0x06
     454:	1d 82       	std	Y+5, r1	; 0x05
     456:	06 c0       	rjmp	.+12     	; 0x464 <CLC_voidInit+0x4a>
     458:	00 00       	nop
     45a:	8d 81       	ldd	r24, Y+5	; 0x05
     45c:	9e 81       	ldd	r25, Y+6	; 0x06
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	9e 83       	std	Y+6, r25	; 0x06
     462:	8d 83       	std	Y+5, r24	; 0x05
     464:	8d 81       	ldd	r24, Y+5	; 0x05
     466:	9e 81       	ldd	r25, Y+6	; 0x06
     468:	29 e0       	ldi	r18, 0x09	; 9
     46a:	84 3c       	cpi	r24, 0xC4	; 196
     46c:	92 07       	cpc	r25, r18
     46e:	a0 f3       	brcs	.-24     	; 0x458 <CLC_voidInit+0x3e>
	CLCD_u8WriteComand(0b00110000);
     470:	80 e3       	ldi	r24, 0x30	; 48
     472:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>

	DELAY(1);
     476:	1c 82       	std	Y+4, r1	; 0x04
     478:	1b 82       	std	Y+3, r1	; 0x03
     47a:	06 c0       	rjmp	.+12     	; 0x488 <CLC_voidInit+0x6e>
     47c:	00 00       	nop
     47e:	8b 81       	ldd	r24, Y+3	; 0x03
     480:	9c 81       	ldd	r25, Y+4	; 0x04
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	9c 83       	std	Y+4, r25	; 0x04
     486:	8b 83       	std	Y+3, r24	; 0x03
     488:	8b 81       	ldd	r24, Y+3	; 0x03
     48a:	9c 81       	ldd	r25, Y+4	; 0x04
     48c:	21 e0       	ldi	r18, 0x01	; 1
     48e:	84 3f       	cpi	r24, 0xF4	; 244
     490:	92 07       	cpc	r25, r18
     492:	a0 f3       	brcs	.-24     	; 0x47c <CLC_voidInit+0x62>
	CLCD_u8WriteComand(0b00110000);
     494:	80 e3       	ldi	r24, 0x30	; 48
     496:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>


	CLCD_u8WriteComand(0b00111000);
     49a:	88 e3       	ldi	r24, 0x38	; 56
     49c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>


	CLCD_u8WriteComand(0b00000110);
     4a0:	86 e0       	ldi	r24, 0x06	; 6
     4a2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>

	CLCD_u8WriteComand(0b00001100);
     4a6:	8c e0       	ldi	r24, 0x0C	; 12
     4a8:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>

	DELAY(1);
     4ac:	1a 82       	std	Y+2, r1	; 0x02
     4ae:	19 82       	std	Y+1, r1	; 0x01
     4b0:	06 c0       	rjmp	.+12     	; 0x4be <CLC_voidInit+0xa4>
     4b2:	00 00       	nop
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	01 96       	adiw	r24, 0x01	; 1
     4ba:	9a 83       	std	Y+2, r25	; 0x02
     4bc:	89 83       	std	Y+1, r24	; 0x01
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	9a 81       	ldd	r25, Y+2	; 0x02
     4c2:	21 e0       	ldi	r18, 0x01	; 1
     4c4:	84 3f       	cpi	r24, 0xF4	; 244
     4c6:	92 07       	cpc	r25, r18
     4c8:	a0 f3       	brcs	.-24     	; 0x4b2 <CLC_voidInit+0x98>

	CLCD_u8WriteComand(CLC_u8FUNCSET);
     4ca:	8c e3       	ldi	r24, 0x3C	; 60
     4cc:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>
}
     4d0:	28 96       	adiw	r28, 0x08	; 8
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	f8 94       	cli
     4d6:	de bf       	out	0x3e, r29	; 62
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	cd bf       	out	0x3d, r28	; 61
     4dc:	cf 91       	pop	r28
     4de:	df 91       	pop	r29
     4e0:	08 95       	ret

000004e2 <CLCD_u8WriteComand>:

extern u8 CLCD_u8WriteComand(u8 Copy_u8Command)
{
     4e2:	df 93       	push	r29
     4e4:	cf 93       	push	r28
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <CLCD_u8WriteComand+0x6>
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <CLCD_u8WriteComand+0x8>
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	8c 83       	std	Y+4, r24	; 0x04
	u8 local_loopcount ;
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
     4f0:	1b 82       	std	Y+3, r1	; 0x03
     4f2:	29 c0       	rjmp	.+82     	; 0x546 <CLCD_u8WriteComand+0x64>
	{
		DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(Copy_u8Command,local_loopcount));
     4f4:	8b 81       	ldd	r24, Y+3	; 0x03
     4f6:	88 2f       	mov	r24, r24
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	fc 01       	movw	r30, r24
     4fc:	e3 58       	subi	r30, 0x83	; 131
     4fe:	ff 4f       	sbci	r31, 0xFF	; 255
     500:	60 81       	ld	r22, Z
     502:	8c 81       	ldd	r24, Y+4	; 0x04
     504:	48 2f       	mov	r20, r24
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	8b 81       	ldd	r24, Y+3	; 0x03
     50a:	28 2f       	mov	r18, r24
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	02 c0       	rjmp	.+4      	; 0x518 <CLCD_u8WriteComand+0x36>
     514:	88 0f       	add	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	2a 95       	dec	r18
     51a:	e2 f7       	brpl	.-8      	; 0x514 <CLCD_u8WriteComand+0x32>
     51c:	9a 01       	movw	r18, r20
     51e:	28 23       	and	r18, r24
     520:	39 23       	and	r19, r25
     522:	8b 81       	ldd	r24, Y+3	; 0x03
     524:	88 2f       	mov	r24, r24
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	a9 01       	movw	r20, r18
     52a:	02 c0       	rjmp	.+4      	; 0x530 <CLCD_u8WriteComand+0x4e>
     52c:	55 95       	asr	r21
     52e:	47 95       	ror	r20
     530:	8a 95       	dec	r24
     532:	e2 f7       	brpl	.-8      	; 0x52c <CLCD_u8WriteComand+0x4a>
     534:	ca 01       	movw	r24, r20
     536:	98 2f       	mov	r25, r24
     538:	86 2f       	mov	r24, r22
     53a:	69 2f       	mov	r22, r25
     53c:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
}

extern u8 CLCD_u8WriteComand(u8 Copy_u8Command)
{
	u8 local_loopcount ;
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
     540:	8b 81       	ldd	r24, Y+3	; 0x03
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	8b 83       	std	Y+3, r24	; 0x03
     546:	8b 81       	ldd	r24, Y+3	; 0x03
     548:	88 30       	cpi	r24, 0x08	; 8
     54a:	a0 f2       	brcs	.-88     	; 0x4f4 <CLCD_u8WriteComand+0x12>
	{
		DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(Copy_u8Command,local_loopcount));
	}
	DIO_u8WritePinVal(CLC_u8RS, DIO_u8LOW);
     54c:	8a e1       	ldi	r24, 0x1A	; 26
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8RW, DIO_u8LOW);
     554:	89 e1       	ldi	r24, 0x19	; 25
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
     55c:	88 e1       	ldi	r24, 0x18	; 24
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
	DELAY(1);
     564:	1a 82       	std	Y+2, r1	; 0x02
     566:	19 82       	std	Y+1, r1	; 0x01
     568:	06 c0       	rjmp	.+12     	; 0x576 <CLCD_u8WriteComand+0x94>
     56a:	00 00       	nop
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	9a 81       	ldd	r25, Y+2	; 0x02
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	9a 83       	std	Y+2, r25	; 0x02
     574:	89 83       	std	Y+1, r24	; 0x01
     576:	89 81       	ldd	r24, Y+1	; 0x01
     578:	9a 81       	ldd	r25, Y+2	; 0x02
     57a:	51 e0       	ldi	r21, 0x01	; 1
     57c:	84 3f       	cpi	r24, 0xF4	; 244
     57e:	95 07       	cpc	r25, r21
     580:	a0 f3       	brcs	.-24     	; 0x56a <CLCD_u8WriteComand+0x88>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
     582:	88 e1       	ldi	r24, 0x18	; 24
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>

	return 0 ;
     58a:	80 e0       	ldi	r24, 0x00	; 0
}
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	cf 91       	pop	r28
     596:	df 91       	pop	r29
     598:	08 95       	ret

0000059a <CLCD_u8WriteDataChar>:

extern u8 CLCD_u8WriteDataChar(u8 Copy_u8Data)
{
     59a:	df 93       	push	r29
     59c:	cf 93       	push	r28
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <CLCD_u8WriteDataChar+0x6>
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <CLCD_u8WriteDataChar+0x8>
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	8c 83       	std	Y+4, r24	; 0x04
	u8 local_loopcount ;
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
     5a8:	1b 82       	std	Y+3, r1	; 0x03
     5aa:	29 c0       	rjmp	.+82     	; 0x5fe <CLCD_u8WriteDataChar+0x64>
	{
	DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(Copy_u8Data,local_loopcount));
     5ac:	8b 81       	ldd	r24, Y+3	; 0x03
     5ae:	88 2f       	mov	r24, r24
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	fc 01       	movw	r30, r24
     5b4:	e3 58       	subi	r30, 0x83	; 131
     5b6:	ff 4f       	sbci	r31, 0xFF	; 255
     5b8:	60 81       	ld	r22, Z
     5ba:	8c 81       	ldd	r24, Y+4	; 0x04
     5bc:	48 2f       	mov	r20, r24
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	8b 81       	ldd	r24, Y+3	; 0x03
     5c2:	28 2f       	mov	r18, r24
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <CLCD_u8WriteDataChar+0x36>
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	2a 95       	dec	r18
     5d2:	e2 f7       	brpl	.-8      	; 0x5cc <CLCD_u8WriteDataChar+0x32>
     5d4:	9a 01       	movw	r18, r20
     5d6:	28 23       	and	r18, r24
     5d8:	39 23       	and	r19, r25
     5da:	8b 81       	ldd	r24, Y+3	; 0x03
     5dc:	88 2f       	mov	r24, r24
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	a9 01       	movw	r20, r18
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <CLCD_u8WriteDataChar+0x4e>
     5e4:	55 95       	asr	r21
     5e6:	47 95       	ror	r20
     5e8:	8a 95       	dec	r24
     5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <CLCD_u8WriteDataChar+0x4a>
     5ec:	ca 01       	movw	r24, r20
     5ee:	98 2f       	mov	r25, r24
     5f0:	86 2f       	mov	r24, r22
     5f2:	69 2f       	mov	r22, r25
     5f4:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
}

extern u8 CLCD_u8WriteDataChar(u8 Copy_u8Data)
{
	u8 local_loopcount ;
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
     5f8:	8b 81       	ldd	r24, Y+3	; 0x03
     5fa:	8f 5f       	subi	r24, 0xFF	; 255
     5fc:	8b 83       	std	Y+3, r24	; 0x03
     5fe:	8b 81       	ldd	r24, Y+3	; 0x03
     600:	88 30       	cpi	r24, 0x08	; 8
     602:	a0 f2       	brcs	.-88     	; 0x5ac <CLCD_u8WriteDataChar+0x12>
	{
	DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(Copy_u8Data,local_loopcount));
	}
	DIO_u8WritePinVal(CLC_u8RS, DIO_u8HIGH);
     604:	8a e1       	ldi	r24, 0x1A	; 26
     606:	61 e0       	ldi	r22, 0x01	; 1
     608:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8RW, DIO_u8LOW);
     60c:	89 e1       	ldi	r24, 0x19	; 25
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
     614:	88 e1       	ldi	r24, 0x18	; 24
     616:	61 e0       	ldi	r22, 0x01	; 1
     618:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
	DELAY(1);
     61c:	1a 82       	std	Y+2, r1	; 0x02
     61e:	19 82       	std	Y+1, r1	; 0x01
     620:	06 c0       	rjmp	.+12     	; 0x62e <CLCD_u8WriteDataChar+0x94>
     622:	00 00       	nop
     624:	89 81       	ldd	r24, Y+1	; 0x01
     626:	9a 81       	ldd	r25, Y+2	; 0x02
     628:	01 96       	adiw	r24, 0x01	; 1
     62a:	9a 83       	std	Y+2, r25	; 0x02
     62c:	89 83       	std	Y+1, r24	; 0x01
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	9a 81       	ldd	r25, Y+2	; 0x02
     632:	51 e0       	ldi	r21, 0x01	; 1
     634:	84 3f       	cpi	r24, 0xF4	; 244
     636:	95 07       	cpc	r25, r21
     638:	a0 f3       	brcs	.-24     	; 0x622 <CLCD_u8WriteDataChar+0x88>

	DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
     63a:	88 e1       	ldi	r24, 0x18	; 24
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>

	return 0 ;
     642:	80 e0       	ldi	r24, 0x00	; 0
}
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	cf 91       	pop	r28
     64e:	df 91       	pop	r29
     650:	08 95       	ret

00000652 <CLCD_u8WriteDataStr>:

extern u8 CLCD_u8WriteDataStr(u8 *Copy_u8Data)
{
     652:	df 93       	push	r29
     654:	cf 93       	push	r28
     656:	00 d0       	rcall	.+0      	; 0x658 <CLCD_u8WriteDataStr+0x6>
     658:	00 d0       	rcall	.+0      	; 0x65a <CLCD_u8WriteDataStr+0x8>
     65a:	0f 92       	push	r0
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	9d 83       	std	Y+5, r25	; 0x05
     662:	8c 83       	std	Y+4, r24	; 0x04
	u8 local_loopcount=0 ;
     664:	1b 82       	std	Y+3, r1	; 0x03
     666:	54 c0       	rjmp	.+168    	; 0x710 <CLCD_u8WriteDataStr+0xbe>
while(*Copy_u8Data)
{
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
     668:	1b 82       	std	Y+3, r1	; 0x03
     66a:	2b c0       	rjmp	.+86     	; 0x6c2 <CLCD_u8WriteDataStr+0x70>
	{
	DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(*Copy_u8Data,local_loopcount));
     66c:	8b 81       	ldd	r24, Y+3	; 0x03
     66e:	88 2f       	mov	r24, r24
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	fc 01       	movw	r30, r24
     674:	e3 58       	subi	r30, 0x83	; 131
     676:	ff 4f       	sbci	r31, 0xFF	; 255
     678:	60 81       	ld	r22, Z
     67a:	ec 81       	ldd	r30, Y+4	; 0x04
     67c:	fd 81       	ldd	r31, Y+5	; 0x05
     67e:	80 81       	ld	r24, Z
     680:	48 2f       	mov	r20, r24
     682:	50 e0       	ldi	r21, 0x00	; 0
     684:	8b 81       	ldd	r24, Y+3	; 0x03
     686:	28 2f       	mov	r18, r24
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	02 c0       	rjmp	.+4      	; 0x694 <CLCD_u8WriteDataStr+0x42>
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	2a 95       	dec	r18
     696:	e2 f7       	brpl	.-8      	; 0x690 <CLCD_u8WriteDataStr+0x3e>
     698:	9a 01       	movw	r18, r20
     69a:	28 23       	and	r18, r24
     69c:	39 23       	and	r19, r25
     69e:	8b 81       	ldd	r24, Y+3	; 0x03
     6a0:	88 2f       	mov	r24, r24
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	a9 01       	movw	r20, r18
     6a6:	02 c0       	rjmp	.+4      	; 0x6ac <CLCD_u8WriteDataStr+0x5a>
     6a8:	55 95       	asr	r21
     6aa:	47 95       	ror	r20
     6ac:	8a 95       	dec	r24
     6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <CLCD_u8WriteDataStr+0x56>
     6b0:	ca 01       	movw	r24, r20
     6b2:	98 2f       	mov	r25, r24
     6b4:	86 2f       	mov	r24, r22
     6b6:	69 2f       	mov	r22, r25
     6b8:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
extern u8 CLCD_u8WriteDataStr(u8 *Copy_u8Data)
{
	u8 local_loopcount=0 ;
while(*Copy_u8Data)
{
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
     6bc:	8b 81       	ldd	r24, Y+3	; 0x03
     6be:	8f 5f       	subi	r24, 0xFF	; 255
     6c0:	8b 83       	std	Y+3, r24	; 0x03
     6c2:	8b 81       	ldd	r24, Y+3	; 0x03
     6c4:	88 30       	cpi	r24, 0x08	; 8
     6c6:	90 f2       	brcs	.-92     	; 0x66c <CLCD_u8WriteDataStr+0x1a>
	{
	DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(*Copy_u8Data,local_loopcount));
	}

	DIO_u8WritePinVal(CLC_u8RS, DIO_u8HIGH);
     6c8:	8a e1       	ldi	r24, 0x1A	; 26
     6ca:	61 e0       	ldi	r22, 0x01	; 1
     6cc:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8RW, DIO_u8LOW);
     6d0:	89 e1       	ldi	r24, 0x19	; 25
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
     6d8:	88 e1       	ldi	r24, 0x18	; 24
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
	DELAY(1);
     6e0:	1a 82       	std	Y+2, r1	; 0x02
     6e2:	19 82       	std	Y+1, r1	; 0x01
     6e4:	06 c0       	rjmp	.+12     	; 0x6f2 <CLCD_u8WriteDataStr+0xa0>
     6e6:	00 00       	nop
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
     6ea:	9a 81       	ldd	r25, Y+2	; 0x02
     6ec:	01 96       	adiw	r24, 0x01	; 1
     6ee:	9a 83       	std	Y+2, r25	; 0x02
     6f0:	89 83       	std	Y+1, r24	; 0x01
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	9a 81       	ldd	r25, Y+2	; 0x02
     6f6:	51 e0       	ldi	r21, 0x01	; 1
     6f8:	84 3f       	cpi	r24, 0xF4	; 244
     6fa:	95 07       	cpc	r25, r21
     6fc:	a0 f3       	brcs	.-24     	; 0x6e6 <CLCD_u8WriteDataStr+0x94>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
     6fe:	88 e1       	ldi	r24, 0x18	; 24
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
	Copy_u8Data++ ;
     706:	8c 81       	ldd	r24, Y+4	; 0x04
     708:	9d 81       	ldd	r25, Y+5	; 0x05
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	9d 83       	std	Y+5, r25	; 0x05
     70e:	8c 83       	std	Y+4, r24	; 0x04
}

extern u8 CLCD_u8WriteDataStr(u8 *Copy_u8Data)
{
	u8 local_loopcount=0 ;
while(*Copy_u8Data)
     710:	ec 81       	ldd	r30, Y+4	; 0x04
     712:	fd 81       	ldd	r31, Y+5	; 0x05
     714:	80 81       	ld	r24, Z
     716:	88 23       	and	r24, r24
     718:	09 f0       	breq	.+2      	; 0x71c <CLCD_u8WriteDataStr+0xca>
     71a:	a6 cf       	rjmp	.-180    	; 0x668 <CLCD_u8WriteDataStr+0x16>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
	DELAY(1);
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
	Copy_u8Data++ ;
	}
	return 0 ;
     71c:	80 e0       	ldi	r24, 0x00	; 0
}
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	cf 91       	pop	r28
     72a:	df 91       	pop	r29
     72c:	08 95       	ret

0000072e <CLCD_u8ReadBF>:
extern u8 CLCD_u8ReadBF(u8 *Copy_u8BF)
{
     72e:	df 93       	push	r29
     730:	cf 93       	push	r28
     732:	00 d0       	rcall	.+0      	; 0x734 <CLCD_u8ReadBF+0x6>
     734:	00 d0       	rcall	.+0      	; 0x736 <CLCD_u8ReadBF+0x8>
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	9c 83       	std	Y+4, r25	; 0x04
     73c:	8b 83       	std	Y+3, r24	; 0x03
	DIO_u8WritePinVal(CLC_u8RS, DIO_u8LOW);
     73e:	8a e1       	ldi	r24, 0x1A	; 26
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8RW, DIO_u8HIGH);
     746:	89 e1       	ldi	r24, 0x19	; 25
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
	//DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
	DIO_u8WritePinDir(CLC_u8D7,DIO_u8LOW);
     74e:	87 e1       	ldi	r24, 0x17	; 23
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	0e 94 6f 05 	call	0xade	; 0xade <DIO_u8WritePinDir>
	DIO_u8ReadPinVal(CLC_u8D7,Copy_u8BF);
     756:	2b 81       	ldd	r18, Y+3	; 0x03
     758:	3c 81       	ldd	r19, Y+4	; 0x04
     75a:	87 e1       	ldi	r24, 0x17	; 23
     75c:	b9 01       	movw	r22, r18
     75e:	0e 94 4b 04 	call	0x896	; 0x896 <DIO_u8ReadPinVal>
	DELAY(1);
     762:	1a 82       	std	Y+2, r1	; 0x02
     764:	19 82       	std	Y+1, r1	; 0x01
     766:	06 c0       	rjmp	.+12     	; 0x774 <CLCD_u8ReadBF+0x46>
     768:	00 00       	nop
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	9a 81       	ldd	r25, Y+2	; 0x02
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	9a 83       	std	Y+2, r25	; 0x02
     772:	89 83       	std	Y+1, r24	; 0x01
     774:	89 81       	ldd	r24, Y+1	; 0x01
     776:	9a 81       	ldd	r25, Y+2	; 0x02
     778:	21 e0       	ldi	r18, 0x01	; 1
     77a:	84 3f       	cpi	r24, 0xF4	; 244
     77c:	92 07       	cpc	r25, r18
     77e:	a0 f3       	brcs	.-24     	; 0x768 <CLCD_u8ReadBF+0x3a>
	//DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
	DIO_u8WritePinDir(CLC_u8D7,DIO_u8HIGH);
     780:	87 e1       	ldi	r24, 0x17	; 23
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	0e 94 6f 05 	call	0xade	; 0xade <DIO_u8WritePinDir>

	return 0 ;
     788:	80 e0       	ldi	r24, 0x00	; 0
}
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	cf 91       	pop	r28
     794:	df 91       	pop	r29
     796:	08 95       	ret

00000798 <CLCD_u8WriteOnCGRam>:

extern u8 CLCD_u8WriteOnCGRam(u8 *Copy_u8Ptrn,u8 Copy_location)
{
     798:	df 93       	push	r29
     79a:	cf 93       	push	r28
     79c:	00 d0       	rcall	.+0      	; 0x79e <CLCD_u8WriteOnCGRam+0x6>
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <CLCD_u8WriteOnCGRam+0x8>
     7a0:	00 d0       	rcall	.+0      	; 0x7a2 <CLCD_u8WriteOnCGRam+0xa>
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	9b 83       	std	Y+3, r25	; 0x03
     7a8:	8a 83       	std	Y+2, r24	; 0x02
     7aa:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_loopcount ;
	CLCD_u8WriteComand((0x40+Copy_location*8));
     7ac:	8c 81       	ldd	r24, Y+4	; 0x04
     7ae:	88 2f       	mov	r24, r24
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	08 96       	adiw	r24, 0x08	; 8
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	88 0f       	add	r24, r24
     7ba:	99 1f       	adc	r25, r25
     7bc:	88 0f       	add	r24, r24
     7be:	99 1f       	adc	r25, r25
     7c0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
     7c4:	19 82       	std	Y+1, r1	; 0x01
     7c6:	0e c0       	rjmp	.+28     	; 0x7e4 <CLCD_u8WriteOnCGRam+0x4c>
	{
		CLCD_u8WriteDataChar(Copy_u8Ptrn[local_loopcount]);
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	28 2f       	mov	r18, r24
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	8a 81       	ldd	r24, Y+2	; 0x02
     7d0:	9b 81       	ldd	r25, Y+3	; 0x03
     7d2:	fc 01       	movw	r30, r24
     7d4:	e2 0f       	add	r30, r18
     7d6:	f3 1f       	adc	r31, r19
     7d8:	80 81       	ld	r24, Z
     7da:	0e 94 cd 02 	call	0x59a	; 0x59a <CLCD_u8WriteDataChar>

extern u8 CLCD_u8WriteOnCGRam(u8 *Copy_u8Ptrn,u8 Copy_location)
{
	u8 local_loopcount ;
	CLCD_u8WriteComand((0x40+Copy_location*8));
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	8f 5f       	subi	r24, 0xFF	; 255
     7e2:	89 83       	std	Y+1, r24	; 0x01
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	88 30       	cpi	r24, 0x08	; 8
     7e8:	78 f3       	brcs	.-34     	; 0x7c8 <CLCD_u8WriteOnCGRam+0x30>
	{
		CLCD_u8WriteDataChar(Copy_u8Ptrn[local_loopcount]);
	}


	return CHKerr[Copy_location<8]  ;
     7ea:	1e 82       	std	Y+6, r1	; 0x06
     7ec:	1d 82       	std	Y+5, r1	; 0x05
     7ee:	8c 81       	ldd	r24, Y+4	; 0x04
     7f0:	88 30       	cpi	r24, 0x08	; 8
     7f2:	20 f4       	brcc	.+8      	; 0x7fc <CLCD_u8WriteOnCGRam+0x64>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	9e 83       	std	Y+6, r25	; 0x06
     7fa:	8d 83       	std	Y+5, r24	; 0x05
     7fc:	ed 81       	ldd	r30, Y+5	; 0x05
     7fe:	fe 81       	ldd	r31, Y+6	; 0x06
     800:	eb 57       	subi	r30, 0x7B	; 123
     802:	ff 4f       	sbci	r31, 0xFF	; 255
     804:	80 81       	ld	r24, Z
}
     806:	26 96       	adiw	r28, 0x06	; 6
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	f8 94       	cli
     80c:	de bf       	out	0x3e, r29	; 62
     80e:	0f be       	out	0x3f, r0	; 63
     810:	cd bf       	out	0x3d, r28	; 61
     812:	cf 91       	pop	r28
     814:	df 91       	pop	r29
     816:	08 95       	ret

00000818 <DIO_voidInit>:
static  u8 * const DIO_u8Ddrs[]={DIO_u8DDRA ,DIO_u8DDRB, DIO_u8DDRC , DIO_u8DDRD} ;
static  u8 *const DIO_u8Pins[]={DIO_u8PINA ,DIO_u8PINB, DIO_u8PINC , DIO_u8PIND} ;


extern void DIO_voidInit(void)
{
     818:	df 93       	push	r29
     81a:	cf 93       	push	r28
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62

/*Comment!:initializing Ports Directions */
*DIO_u8Ddrs[DIO_u8PORT0]=DIO_u8PORTA_DIR;
     820:	e0 91 8f 00 	lds	r30, 0x008F
     824:	f0 91 90 00 	lds	r31, 0x0090
     828:	8e ef       	ldi	r24, 0xFE	; 254
     82a:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT1]=DIO_u8PORTB_DIR;
     82c:	e0 91 91 00 	lds	r30, 0x0091
     830:	f0 91 92 00 	lds	r31, 0x0092
     834:	8e ef       	ldi	r24, 0xFE	; 254
     836:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT2]=DIO_u8PORTC_DIR;
     838:	e0 91 93 00 	lds	r30, 0x0093
     83c:	f0 91 94 00 	lds	r31, 0x0094
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT3]=DIO_u8PORTD_DIR;
     844:	e0 91 95 00 	lds	r30, 0x0095
     848:	f0 91 96 00 	lds	r31, 0x0096
     84c:	8f ef       	ldi	r24, 0xFF	; 255
     84e:	80 83       	st	Z, r24

/*Comment!:initializing Ports Value  */
*DIO_u8Ports[DIO_u8PORT0] =(DIO_u8PORTA_DIR & DIO_u8PORTA_VAL) | ((~DIO_u8PORTA_DIR)&*DIO_u8Ports[DIO_u8PORT0] );
     850:	a0 91 87 00 	lds	r26, 0x0087
     854:	b0 91 88 00 	lds	r27, 0x0088
     858:	e0 91 87 00 	lds	r30, 0x0087
     85c:	f0 91 88 00 	lds	r31, 0x0088
     860:	80 81       	ld	r24, Z
     862:	81 70       	andi	r24, 0x01	; 1
     864:	8c 93       	st	X, r24
*DIO_u8Ports[DIO_u8PORT1] =(DIO_u8PORTB_DIR & DIO_u8PORTB_VAL)| ((~DIO_u8PORTB_DIR)&*DIO_u8Ports[DIO_u8PORT1] );
     866:	a0 91 89 00 	lds	r26, 0x0089
     86a:	b0 91 8a 00 	lds	r27, 0x008A
     86e:	e0 91 89 00 	lds	r30, 0x0089
     872:	f0 91 8a 00 	lds	r31, 0x008A
     876:	80 81       	ld	r24, Z
     878:	81 70       	andi	r24, 0x01	; 1
     87a:	8c 93       	st	X, r24
*DIO_u8Ports[DIO_u8PORT2] =(DIO_u8PORTC_DIR & DIO_u8PORTC_VAL)| ((~DIO_u8PORTC_DIR)&*DIO_u8Ports[DIO_u8PORT2] );
     87c:	e0 91 8b 00 	lds	r30, 0x008B
     880:	f0 91 8c 00 	lds	r31, 0x008C
     884:	10 82       	st	Z, r1
*DIO_u8Ports[DIO_u8PORT3] =(DIO_u8PORTD_DIR & DIO_u8PORTD_VAL)| ((~DIO_u8PORTD_DIR)&*DIO_u8Ports[DIO_u8PORT3] );
     886:	e0 91 8d 00 	lds	r30, 0x008D
     88a:	f0 91 8e 00 	lds	r31, 0x008E
     88e:	10 82       	st	Z, r1

}
     890:	cf 91       	pop	r28
     892:	df 91       	pop	r29
     894:	08 95       	ret

00000896 <DIO_u8ReadPinVal>:


extern u8 DIO_u8ReadPinVal(u8 Copy_u8PinIdx,u8* Copy_u8PtrToval)
{
     896:	df 93       	push	r29
     898:	cf 93       	push	r28
     89a:	00 d0       	rcall	.+0      	; 0x89c <DIO_u8ReadPinVal+0x6>
     89c:	00 d0       	rcall	.+0      	; 0x89e <DIO_u8ReadPinVal+0x8>
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <DIO_u8ReadPinVal+0xa>
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	8c 83       	std	Y+4, r24	; 0x04
     8a6:	7e 83       	std	Y+6, r23	; 0x06
     8a8:	6d 83       	std	Y+5, r22	; 0x05

	 u8 Local_u8CheckPinState=ok ;
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8PinIdx<DIO_u8PINMAXIDX)
     8ae:	8c 81       	ldd	r24, Y+4	; 0x04
     8b0:	8f 31       	cpi	r24, 0x1F	; 31
     8b2:	80 f5       	brcc	.+96     	; 0x914 <DIO_u8ReadPinVal+0x7e>
	    {

		u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
     8b4:	8c 81       	ldd	r24, Y+4	; 0x04
     8b6:	86 95       	lsr	r24
     8b8:	86 95       	lsr	r24
     8ba:	86 95       	lsr	r24
     8bc:	8a 83       	std	Y+2, r24	; 0x02
		u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
     8be:	8c 81       	ldd	r24, Y+4	; 0x04
     8c0:	87 70       	andi	r24, 0x07	; 7
     8c2:	89 83       	std	Y+1, r24	; 0x01

		* Copy_u8PtrToval=get_bit(*DIO_u8Pins[local_u8CheckPinPlace],local_u8MapPin);
     8c4:	8a 81       	ldd	r24, Y+2	; 0x02
     8c6:	88 2f       	mov	r24, r24
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	fc 01       	movw	r30, r24
     8d0:	e9 56       	subi	r30, 0x69	; 105
     8d2:	ff 4f       	sbci	r31, 0xFF	; 255
     8d4:	01 90       	ld	r0, Z+
     8d6:	f0 81       	ld	r31, Z
     8d8:	e0 2d       	mov	r30, r0
     8da:	80 81       	ld	r24, Z
     8dc:	48 2f       	mov	r20, r24
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	28 2f       	mov	r18, r24
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <DIO_u8ReadPinVal+0x5a>
     8ec:	88 0f       	add	r24, r24
     8ee:	99 1f       	adc	r25, r25
     8f0:	2a 95       	dec	r18
     8f2:	e2 f7       	brpl	.-8      	; 0x8ec <DIO_u8ReadPinVal+0x56>
     8f4:	9a 01       	movw	r18, r20
     8f6:	28 23       	and	r18, r24
     8f8:	39 23       	and	r19, r25
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	88 2f       	mov	r24, r24
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a9 01       	movw	r20, r18
     902:	02 c0       	rjmp	.+4      	; 0x908 <DIO_u8ReadPinVal+0x72>
     904:	55 95       	asr	r21
     906:	47 95       	ror	r20
     908:	8a 95       	dec	r24
     90a:	e2 f7       	brpl	.-8      	; 0x904 <DIO_u8ReadPinVal+0x6e>
     90c:	ca 01       	movw	r24, r20
     90e:	ed 81       	ldd	r30, Y+5	; 0x05
     910:	fe 81       	ldd	r31, Y+6	; 0x06
     912:	80 83       	st	Z, r24
    }
    else
    {

    }
return    Local_u8CheckPinState=ok ;
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	8b 83       	std	Y+3, r24	; 0x03
     918:	8b 81       	ldd	r24, Y+3	; 0x03
}
     91a:	26 96       	adiw	r28, 0x06	; 6
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
     926:	cf 91       	pop	r28
     928:	df 91       	pop	r29
     92a:	08 95       	ret

0000092c <DIO_u8WritePinVal>:

extern u8 DIO_u8WritePinVal(u8 Copy_u8PinIdx,u8 Copy_u8Pinval)
{
     92c:	df 93       	push	r29
     92e:	cf 93       	push	r28
     930:	00 d0       	rcall	.+0      	; 0x932 <DIO_u8WritePinVal+0x6>
     932:	00 d0       	rcall	.+0      	; 0x934 <DIO_u8WritePinVal+0x8>
     934:	00 d0       	rcall	.+0      	; 0x936 <DIO_u8WritePinVal+0xa>
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
     93a:	8d 83       	std	Y+5, r24	; 0x05
     93c:	6e 83       	std	Y+6, r22	; 0x06
	 u8 Local_u8CheckPinState=ok ;
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	8c 83       	std	Y+4, r24	; 0x04

	    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
     942:	8d 81       	ldd	r24, Y+5	; 0x05
     944:	80 32       	cpi	r24, 0x20	; 32
     946:	10 f0       	brcs	.+4      	; 0x94c <DIO_u8WritePinVal+0x20>
	    {
	    	 Local_u8CheckPinState=error ;
     948:	1c 82       	std	Y+4, r1	; 0x04
     94a:	64 c0       	rjmp	.+200    	; 0xa14 <DIO_u8WritePinVal+0xe8>
	    }
	    else
	    {
	    	 u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
     94c:	8d 81       	ldd	r24, Y+5	; 0x05
     94e:	86 95       	lsr	r24
     950:	86 95       	lsr	r24
     952:	86 95       	lsr	r24
     954:	8b 83       	std	Y+3, r24	; 0x03
	    		 u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
     956:	8d 81       	ldd	r24, Y+5	; 0x05
     958:	87 70       	andi	r24, 0x07	; 7
     95a:	8a 83       	std	Y+2, r24	; 0x02
	    	     u8 local_u8PinDir;
	    	     local_u8PinDir=get_bit(*DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin);
     95c:	8b 81       	ldd	r24, Y+3	; 0x03
     95e:	88 2f       	mov	r24, r24
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	88 0f       	add	r24, r24
     964:	99 1f       	adc	r25, r25
     966:	fc 01       	movw	r30, r24
     968:	e1 57       	subi	r30, 0x71	; 113
     96a:	ff 4f       	sbci	r31, 0xFF	; 255
     96c:	01 90       	ld	r0, Z+
     96e:	f0 81       	ld	r31, Z
     970:	e0 2d       	mov	r30, r0
     972:	80 81       	ld	r24, Z
     974:	48 2f       	mov	r20, r24
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	8a 81       	ldd	r24, Y+2	; 0x02
     97a:	28 2f       	mov	r18, r24
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	02 c0       	rjmp	.+4      	; 0x988 <DIO_u8WritePinVal+0x5c>
     984:	88 0f       	add	r24, r24
     986:	99 1f       	adc	r25, r25
     988:	2a 95       	dec	r18
     98a:	e2 f7       	brpl	.-8      	; 0x984 <DIO_u8WritePinVal+0x58>
     98c:	9a 01       	movw	r18, r20
     98e:	28 23       	and	r18, r24
     990:	39 23       	and	r19, r25
     992:	8a 81       	ldd	r24, Y+2	; 0x02
     994:	88 2f       	mov	r24, r24
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	a9 01       	movw	r20, r18
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <DIO_u8WritePinVal+0x74>
     99c:	55 95       	asr	r21
     99e:	47 95       	ror	r20
     9a0:	8a 95       	dec	r24
     9a2:	e2 f7       	brpl	.-8      	; 0x99c <DIO_u8WritePinVal+0x70>
     9a4:	ca 01       	movw	r24, r20
     9a6:	89 83       	std	Y+1, r24	; 0x01
	    	if(local_u8PinDir==1)
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	81 30       	cpi	r24, 0x01	; 1
     9ac:	99 f5       	brne	.+102    	; 0xa14 <DIO_u8WritePinVal+0xe8>
	    	{
	    	assign_bit(*DIO_u8Ports[local_u8CheckPinPlace],local_u8MapPin,Copy_u8Pinval);
     9ae:	8b 81       	ldd	r24, Y+3	; 0x03
     9b0:	88 2f       	mov	r24, r24
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	fc 01       	movw	r30, r24
     9ba:	e9 57       	subi	r30, 0x79	; 121
     9bc:	ff 4f       	sbci	r31, 0xFF	; 255
     9be:	a0 81       	ld	r26, Z
     9c0:	b1 81       	ldd	r27, Z+1	; 0x01
     9c2:	8a 81       	ldd	r24, Y+2	; 0x02
     9c4:	28 2f       	mov	r18, r24
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <DIO_u8WritePinVal+0xa6>
     9ce:	88 0f       	add	r24, r24
     9d0:	99 1f       	adc	r25, r25
     9d2:	2a 95       	dec	r18
     9d4:	e2 f7       	brpl	.-8      	; 0x9ce <DIO_u8WritePinVal+0xa2>
     9d6:	28 2f       	mov	r18, r24
     9d8:	20 95       	com	r18
     9da:	8b 81       	ldd	r24, Y+3	; 0x03
     9dc:	88 2f       	mov	r24, r24
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	88 0f       	add	r24, r24
     9e2:	99 1f       	adc	r25, r25
     9e4:	fc 01       	movw	r30, r24
     9e6:	e9 57       	subi	r30, 0x79	; 121
     9e8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ea:	01 90       	ld	r0, Z+
     9ec:	f0 81       	ld	r31, Z
     9ee:	e0 2d       	mov	r30, r0
     9f0:	80 81       	ld	r24, Z
     9f2:	42 2f       	mov	r20, r18
     9f4:	48 23       	and	r20, r24
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	28 2f       	mov	r18, r24
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	8a 81       	ldd	r24, Y+2	; 0x02
     9fe:	88 2f       	mov	r24, r24
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	b9 01       	movw	r22, r18
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <DIO_u8WritePinVal+0xde>
     a06:	66 0f       	add	r22, r22
     a08:	77 1f       	adc	r23, r23
     a0a:	8a 95       	dec	r24
     a0c:	e2 f7       	brpl	.-8      	; 0xa06 <DIO_u8WritePinVal+0xda>
     a0e:	cb 01       	movw	r24, r22
     a10:	84 2b       	or	r24, r20
     a12:	8c 93       	st	X, r24
	    	{

	    	}
	    }

     return  Local_u8CheckPinState ;
     a14:	8c 81       	ldd	r24, Y+4	; 0x04
}
     a16:	26 96       	adiw	r28, 0x06	; 6
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	de bf       	out	0x3e, r29	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	cd bf       	out	0x3d, r28	; 61
     a22:	cf 91       	pop	r28
     a24:	df 91       	pop	r29
     a26:	08 95       	ret

00000a28 <DIO_u8ReadPortVal>:


extern u8 DIO_u8ReadPortVal(u8 Copy_u8PortIdx,u8* Copy_u8PtrToval)
{
     a28:	df 93       	push	r29
     a2a:	cf 93       	push	r28
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <DIO_u8ReadPortVal+0x6>
     a2e:	00 d0       	rcall	.+0      	; 0xa30 <DIO_u8ReadPortVal+0x8>
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	8a 83       	std	Y+2, r24	; 0x02
     a36:	7c 83       	std	Y+4, r23	; 0x04
     a38:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CheckPortR=ok ;
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
     a3e:	8a 81       	ldd	r24, Y+2	; 0x02
     a40:	84 30       	cpi	r24, 0x04	; 4
     a42:	80 f4       	brcc	.+32     	; 0xa64 <DIO_u8ReadPortVal+0x3c>
	{

	* Copy_u8PtrToval=*DIO_u8Pins[Copy_u8PortIdx] ;
     a44:	8a 81       	ldd	r24, Y+2	; 0x02
     a46:	88 2f       	mov	r24, r24
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	fc 01       	movw	r30, r24
     a50:	e9 56       	subi	r30, 0x69	; 105
     a52:	ff 4f       	sbci	r31, 0xFF	; 255
     a54:	01 90       	ld	r0, Z+
     a56:	f0 81       	ld	r31, Z
     a58:	e0 2d       	mov	r30, r0
     a5a:	80 81       	ld	r24, Z
     a5c:	eb 81       	ldd	r30, Y+3	; 0x03
     a5e:	fc 81       	ldd	r31, Y+4	; 0x04
     a60:	80 83       	st	Z, r24
     a62:	01 c0       	rjmp	.+2      	; 0xa66 <DIO_u8ReadPortVal+0x3e>
	}
	else
	{
		Local_u8CheckPortR=error ;
     a64:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8CheckPortR ;
     a66:	89 81       	ldd	r24, Y+1	; 0x01
}
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	cf 91       	pop	r28
     a72:	df 91       	pop	r29
     a74:	08 95       	ret

00000a76 <DIO_u8WritePortVal>:

extern u8 DIO_u8WritePortVal(u8 Copy_u8PortIdx,u8 Copy_u8Portval)
{
     a76:	df 93       	push	r29
     a78:	cf 93       	push	r28
     a7a:	00 d0       	rcall	.+0      	; 0xa7c <DIO_u8WritePortVal+0x6>
     a7c:	00 d0       	rcall	.+0      	; 0xa7e <DIO_u8WritePortVal+0x8>
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	8b 83       	std	Y+3, r24	; 0x03
     a84:	6c 83       	std	Y+4, r22	; 0x04
     	u8 Local_u8CheckPortR=ok ;
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	8a 83       	std	Y+2, r24	; 0x02
        u8 local_u8PortDir;
		if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
     a8a:	8b 81       	ldd	r24, Y+3	; 0x03
     a8c:	84 30       	cpi	r24, 0x04	; 4
     a8e:	f0 f4       	brcc	.+60     	; 0xacc <DIO_u8WritePortVal+0x56>
		{
				local_u8PortDir=*DIO_u8Ddrs[Copy_u8PortIdx] ;
     a90:	8b 81       	ldd	r24, Y+3	; 0x03
     a92:	88 2f       	mov	r24, r24
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	fc 01       	movw	r30, r24
     a9c:	e1 57       	subi	r30, 0x71	; 113
     a9e:	ff 4f       	sbci	r31, 0xFF	; 255
     aa0:	01 90       	ld	r0, Z+
     aa2:	f0 81       	ld	r31, Z
     aa4:	e0 2d       	mov	r30, r0
     aa6:	80 81       	ld	r24, Z
     aa8:	89 83       	std	Y+1, r24	; 0x01
			  if(local_u8PortDir==0xff)
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	8f 3f       	cpi	r24, 0xFF	; 255
     aae:	79 f4       	brne	.+30     	; 0xace <DIO_u8WritePortVal+0x58>
			  {
		        *DIO_u8Ports[Copy_u8PortIdx]= Copy_u8Portval;
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	88 2f       	mov	r24, r24
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	fc 01       	movw	r30, r24
     abc:	e9 57       	subi	r30, 0x79	; 121
     abe:	ff 4f       	sbci	r31, 0xFF	; 255
     ac0:	01 90       	ld	r0, Z+
     ac2:	f0 81       	ld	r31, Z
     ac4:	e0 2d       	mov	r30, r0
     ac6:	8c 81       	ldd	r24, Y+4	; 0x04
     ac8:	80 83       	st	Z, r24
     aca:	01 c0       	rjmp	.+2      	; 0xace <DIO_u8WritePortVal+0x58>

			  }
		}
		else
		{
			Local_u8CheckPortR=error ;
     acc:	1a 82       	std	Y+2, r1	; 0x02
		}

		return Local_u8CheckPortR ;
     ace:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	cf 91       	pop	r28
     ada:	df 91       	pop	r29
     adc:	08 95       	ret

00000ade <DIO_u8WritePinDir>:

extern u8 DIO_u8WritePinDir(u8 Copy_u8PinIdx,u8 Copy_u8PinDir)
{
     ade:	df 93       	push	r29
     ae0:	cf 93       	push	r28
     ae2:	00 d0       	rcall	.+0      	; 0xae4 <DIO_u8WritePinDir+0x6>
     ae4:	00 d0       	rcall	.+0      	; 0xae6 <DIO_u8WritePinDir+0x8>
     ae6:	0f 92       	push	r0
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	8c 83       	std	Y+4, r24	; 0x04
     aee:	6d 83       	std	Y+5, r22	; 0x05
	     u8 Local_u8CheckPinState=ok ;
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	8b 83       	std	Y+3, r24	; 0x03

		    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
     af4:	8c 81       	ldd	r24, Y+4	; 0x04
     af6:	80 32       	cpi	r24, 0x20	; 32
     af8:	10 f0       	brcs	.+4      	; 0xafe <DIO_u8WritePinDir+0x20>
		    {
		    	 Local_u8CheckPinState=error ;
     afa:	1b 82       	std	Y+3, r1	; 0x03
     afc:	3b c0       	rjmp	.+118    	; 0xb74 <DIO_u8WritePinDir+0x96>
		    }
		    else
		    {
		    	u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
     afe:	8c 81       	ldd	r24, Y+4	; 0x04
     b00:	86 95       	lsr	r24
     b02:	86 95       	lsr	r24
     b04:	86 95       	lsr	r24
     b06:	8a 83       	std	Y+2, r24	; 0x02
		    	u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
     b08:	8c 81       	ldd	r24, Y+4	; 0x04
     b0a:	87 70       	andi	r24, 0x07	; 7
     b0c:	89 83       	std	Y+1, r24	; 0x01
		    	assign_bit(* DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin,Copy_u8PinDir);
     b0e:	8a 81       	ldd	r24, Y+2	; 0x02
     b10:	88 2f       	mov	r24, r24
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	88 0f       	add	r24, r24
     b16:	99 1f       	adc	r25, r25
     b18:	fc 01       	movw	r30, r24
     b1a:	e1 57       	subi	r30, 0x71	; 113
     b1c:	ff 4f       	sbci	r31, 0xFF	; 255
     b1e:	a0 81       	ld	r26, Z
     b20:	b1 81       	ldd	r27, Z+1	; 0x01
     b22:	89 81       	ldd	r24, Y+1	; 0x01
     b24:	28 2f       	mov	r18, r24
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <DIO_u8WritePinDir+0x54>
     b2e:	88 0f       	add	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	2a 95       	dec	r18
     b34:	e2 f7       	brpl	.-8      	; 0xb2e <DIO_u8WritePinDir+0x50>
     b36:	28 2f       	mov	r18, r24
     b38:	20 95       	com	r18
     b3a:	8a 81       	ldd	r24, Y+2	; 0x02
     b3c:	88 2f       	mov	r24, r24
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	fc 01       	movw	r30, r24
     b46:	e1 57       	subi	r30, 0x71	; 113
     b48:	ff 4f       	sbci	r31, 0xFF	; 255
     b4a:	01 90       	ld	r0, Z+
     b4c:	f0 81       	ld	r31, Z
     b4e:	e0 2d       	mov	r30, r0
     b50:	80 81       	ld	r24, Z
     b52:	42 2f       	mov	r20, r18
     b54:	48 23       	and	r20, r24
     b56:	8d 81       	ldd	r24, Y+5	; 0x05
     b58:	28 2f       	mov	r18, r24
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	88 2f       	mov	r24, r24
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	b9 01       	movw	r22, r18
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <DIO_u8WritePinDir+0x8c>
     b66:	66 0f       	add	r22, r22
     b68:	77 1f       	adc	r23, r23
     b6a:	8a 95       	dec	r24
     b6c:	e2 f7       	brpl	.-8      	; 0xb66 <DIO_u8WritePinDir+0x88>
     b6e:	cb 01       	movw	r24, r22
     b70:	84 2b       	or	r24, r20
     b72:	8c 93       	st	X, r24
		    }

	     return  Local_u8CheckPinState ;
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
}
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <DIO_u8WritePortDir>:

extern u8 DIO_u8WritePortDir(u8 Copy_u8PortIdx,u8 Copy_u8PortDir)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <DIO_u8WritePortDir+0x6>
     b8c:	0f 92       	push	r0
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	8a 83       	std	Y+2, r24	; 0x02
     b94:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8CheckPortR=ok ;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	89 83       	std	Y+1, r24	; 0x01

			if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	84 30       	cpi	r24, 0x04	; 4
     b9e:	70 f4       	brcc	.+28     	; 0xbbc <DIO_u8WritePortDir+0x36>
			{

			*DIO_u8Ddrs[Copy_u8PortIdx]= Copy_u8PortDir;
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	88 2f       	mov	r24, r24
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	fc 01       	movw	r30, r24
     bac:	e1 57       	subi	r30, 0x71	; 113
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	01 90       	ld	r0, Z+
     bb2:	f0 81       	ld	r31, Z
     bb4:	e0 2d       	mov	r30, r0
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	80 83       	st	Z, r24
     bba:	01 c0       	rjmp	.+2      	; 0xbbe <DIO_u8WritePortDir+0x38>
			}
			else
			{
				Local_u8CheckPortR=error ;
     bbc:	19 82       	std	Y+1, r1	; 0x01
			}

			return Local_u8CheckPortR ;
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
}
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <DIO_u8ReadPinDir>:

extern u8 DIO_u8ReadPinDir(u8 Copy_u8PinIdx,u8 * Copy_u8PtrToDir)
{
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <DIO_u8ReadPinDir+0x6>
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <DIO_u8ReadPinDir+0x8>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <DIO_u8ReadPinDir+0xa>
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	8c 83       	std	Y+4, r24	; 0x04
     bdc:	7e 83       	std	Y+6, r23	; 0x06
     bde:	6d 83       	std	Y+5, r22	; 0x05
	 u8 Local_u8CheckPinState=ok ;
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	8b 83       	std	Y+3, r24	; 0x03


	    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
     be4:	8c 81       	ldd	r24, Y+4	; 0x04
     be6:	80 32       	cpi	r24, 0x20	; 32
     be8:	10 f0       	brcs	.+4      	; 0xbee <DIO_u8ReadPinDir+0x22>
	    {
	    	 Local_u8CheckPinState=error ;
     bea:	1b 82       	std	Y+3, r1	; 0x03
     bec:	30 c0       	rjmp	.+96     	; 0xc4e <DIO_u8ReadPinDir+0x82>
	    }
	    else
	    {
	    	u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS;
     bee:	8c 81       	ldd	r24, Y+4	; 0x04
     bf0:	86 95       	lsr	r24
     bf2:	86 95       	lsr	r24
     bf4:	86 95       	lsr	r24
     bf6:	8a 83       	std	Y+2, r24	; 0x02
	    		 u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
     bf8:	8c 81       	ldd	r24, Y+4	; 0x04
     bfa:	87 70       	andi	r24, 0x07	; 7
     bfc:	89 83       	std	Y+1, r24	; 0x01
	    	* Copy_u8PtrToDir=get_bit(*DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin);
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	fc 01       	movw	r30, r24
     c0a:	e1 57       	subi	r30, 0x71	; 113
     c0c:	ff 4f       	sbci	r31, 0xFF	; 255
     c0e:	01 90       	ld	r0, Z+
     c10:	f0 81       	ld	r31, Z
     c12:	e0 2d       	mov	r30, r0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <DIO_u8ReadPinDir+0x5e>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	2a 95       	dec	r18
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <DIO_u8ReadPinDir+0x5a>
     c2e:	9a 01       	movw	r18, r20
     c30:	28 23       	and	r18, r24
     c32:	39 23       	and	r19, r25
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	88 2f       	mov	r24, r24
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	a9 01       	movw	r20, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <DIO_u8ReadPinDir+0x76>
     c3e:	55 95       	asr	r21
     c40:	47 95       	ror	r20
     c42:	8a 95       	dec	r24
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <DIO_u8ReadPinDir+0x72>
     c46:	ca 01       	movw	r24, r20
     c48:	ed 81       	ldd	r30, Y+5	; 0x05
     c4a:	fe 81       	ldd	r31, Y+6	; 0x06
     c4c:	80 83       	st	Z, r24
	    }
	return  Local_u8CheckPinState ;
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
}
     c50:	26 96       	adiw	r28, 0x06	; 6
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	08 95       	ret

00000c62 <DIO_u8ReadPortDir>:

extern u8 DIO_u8ReadPortDir(u8 Copy_u8PortIdx,u8 *Copy_u8PtrToDir)
{
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	00 d0       	rcall	.+0      	; 0xc68 <DIO_u8ReadPortDir+0x6>
     c68:	00 d0       	rcall	.+0      	; 0xc6a <DIO_u8ReadPortDir+0x8>
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	8a 83       	std	Y+2, r24	; 0x02
     c70:	7c 83       	std	Y+4, r23	; 0x04
     c72:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CheckPortR=ok ;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	84 30       	cpi	r24, 0x04	; 4
     c7c:	80 f4       	brcc	.+32     	; 0xc9e <DIO_u8ReadPortDir+0x3c>
		{

		* Copy_u8PtrToDir=*DIO_u8Pins[Copy_u8PortIdx] ;
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	88 2f       	mov	r24, r24
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	fc 01       	movw	r30, r24
     c8a:	e9 56       	subi	r30, 0x69	; 105
     c8c:	ff 4f       	sbci	r31, 0xFF	; 255
     c8e:	01 90       	ld	r0, Z+
     c90:	f0 81       	ld	r31, Z
     c92:	e0 2d       	mov	r30, r0
     c94:	80 81       	ld	r24, Z
     c96:	eb 81       	ldd	r30, Y+3	; 0x03
     c98:	fc 81       	ldd	r31, Y+4	; 0x04
     c9a:	80 83       	st	Z, r24
     c9c:	01 c0       	rjmp	.+2      	; 0xca0 <DIO_u8ReadPortDir+0x3e>
		}
		else
		{
			Local_u8CheckPortR=error ;
     c9e:	19 82       	std	Y+1, r1	; 0x01
		}

		return Local_u8CheckPortR ;
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <TSW_voidinit>:
static u8 TSW_LowCounter;
static u8 TSW_HighCounter;


extern void TSW_voidinit(void)
{
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62

	TSW_ButtonState=TSW_u8RELEASED ;
     cb8:	10 92 c2 00 	sts	0x00C2, r1
	TSW_laststat=TSW_u8RELEASED;
     cbc:	10 92 c4 00 	sts	0x00C4, r1
	TSW_ButtonVal=TSW_u8RELEASED ;
     cc0:	10 92 c3 00 	sts	0x00C3, r1
	TSW_LowCounter=TSW_u8RELEASED ;
     cc4:	10 92 c5 00 	sts	0x00C5, r1
	TSW_HighCounter=TSW_u8RELEASED;
     cc8:	10 92 c6 00 	sts	0x00C6, r1
}
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <TSW_u8ReadState>:

extern u8 TSW_u8ReadState(u8 Copy_u8SwIdx,u8 * Copy_u8PtrToState)
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	27 97       	sbiw	r28, 0x07	; 7
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	7b 83       	std	Y+3, r23	; 0x03
     cea:	6a 83       	std	Y+2, r22	; 0x02
	//u8 local_u8GetButtonStateStatus=ok;
		DIO_u8ReadPinVal(TSW_SWtchs[Copy_u8SwIdx],&TSW_ButtonVal);
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	88 2f       	mov	r24, r24
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	fc 01       	movw	r30, r24
     cf4:	e1 56       	subi	r30, 0x61	; 97
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	80 81       	ld	r24, Z
     cfa:	23 ec       	ldi	r18, 0xC3	; 195
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	b9 01       	movw	r22, r18
     d00:	0e 94 4b 04 	call	0x896	; 0x896 <DIO_u8ReadPinVal>

		switch  (TSW_ButtonState)
     d04:	80 91 c2 00 	lds	r24, 0x00C2
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	3f 83       	std	Y+7, r19	; 0x07
     d0e:	2e 83       	std	Y+6, r18	; 0x06
     d10:	8e 81       	ldd	r24, Y+6	; 0x06
     d12:	9f 81       	ldd	r25, Y+7	; 0x07
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	91 05       	cpc	r25, r1
     d18:	e9 f0       	breq	.+58     	; 0xd54 <TSW_u8ReadState+0x82>
     d1a:	2e 81       	ldd	r18, Y+6	; 0x06
     d1c:	3f 81       	ldd	r19, Y+7	; 0x07
     d1e:	22 30       	cpi	r18, 0x02	; 2
     d20:	31 05       	cpc	r19, r1
     d22:	69 f1       	breq	.+90     	; 0xd7e <TSW_u8ReadState+0xac>
     d24:	8e 81       	ldd	r24, Y+6	; 0x06
     d26:	9f 81       	ldd	r25, Y+7	; 0x07
     d28:	00 97       	sbiw	r24, 0x00	; 0
     d2a:	09 f0       	breq	.+2      	; 0xd2e <TSW_u8ReadState+0x5c>
     d2c:	5e c0       	rjmp	.+188    	; 0xdea <TSW_u8ReadState+0x118>
		{
			case TSW_u8RELEASED:
				if(TSW_ButtonVal==1)
     d2e:	80 91 c3 00 	lds	r24, 0x00C3
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	59 f4       	brne	.+22     	; 0xd4c <TSW_u8ReadState+0x7a>
					{
					TSW_ButtonState=TSW_BOUNCE;
     d36:	82 e0       	ldi	r24, 0x02	; 2
     d38:	80 93 c2 00 	sts	0x00C2, r24
					TSW_laststat=TSW_u8RELEASED;
     d3c:	10 92 c4 00 	sts	0x00C4, r1
					* Copy_u8PtrToState=TSW_laststat;
     d40:	80 91 c4 00 	lds	r24, 0x00C4
     d44:	ea 81       	ldd	r30, Y+2	; 0x02
     d46:	fb 81       	ldd	r31, Y+3	; 0x03
     d48:	80 83       	st	Z, r24
     d4a:	4f c0       	rjmp	.+158    	; 0xdea <TSW_u8ReadState+0x118>
					}
				else
				{
					*Copy_u8PtrToState=TSW_u8RELEASED;
     d4c:	ea 81       	ldd	r30, Y+2	; 0x02
     d4e:	fb 81       	ldd	r31, Y+3	; 0x03
     d50:	10 82       	st	Z, r1
     d52:	4b c0       	rjmp	.+150    	; 0xdea <TSW_u8ReadState+0x118>
				}
				break;
			case TSW_u8PRESSED:
				if(TSW_ButtonVal==0)
     d54:	80 91 c3 00 	lds	r24, 0x00C3
     d58:	88 23       	and	r24, r24
     d5a:	61 f4       	brne	.+24     	; 0xd74 <TSW_u8ReadState+0xa2>
						{
					TSW_ButtonState=TSW_BOUNCE;
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	80 93 c2 00 	sts	0x00C2, r24
							TSW_laststat=TSW_u8PRESSED;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	80 93 c4 00 	sts	0x00C4, r24
							* Copy_u8PtrToState=TSW_laststat;
     d68:	80 91 c4 00 	lds	r24, 0x00C4
     d6c:	ea 81       	ldd	r30, Y+2	; 0x02
     d6e:	fb 81       	ldd	r31, Y+3	; 0x03
     d70:	80 83       	st	Z, r24
     d72:	3b c0       	rjmp	.+118    	; 0xdea <TSW_u8ReadState+0x118>
						}
				else
				{
					*Copy_u8PtrToState=TSW_u8PRESSED;
     d74:	ea 81       	ldd	r30, Y+2	; 0x02
     d76:	fb 81       	ldd	r31, Y+3	; 0x03
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	80 83       	st	Z, r24
     d7c:	36 c0       	rjmp	.+108    	; 0xdea <TSW_u8ReadState+0x118>
				}
				break;
			case TSW_BOUNCE:
				if(TSW_ButtonVal==1)
     d7e:	80 91 c3 00 	lds	r24, 0x00C3
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	59 f4       	brne	.+22     	; 0xd9c <TSW_u8ReadState+0xca>
				{
					TSW_HighCounter++;
     d86:	80 91 c6 00 	lds	r24, 0x00C6
     d8a:	8f 5f       	subi	r24, 0xFF	; 255
     d8c:	80 93 c6 00 	sts	0x00C6, r24
					*Copy_u8PtrToState=TSW_laststat;
     d90:	80 91 c4 00 	lds	r24, 0x00C4
     d94:	ea 81       	ldd	r30, Y+2	; 0x02
     d96:	fb 81       	ldd	r31, Y+3	; 0x03
     d98:	80 83       	st	Z, r24
     d9a:	0a c0       	rjmp	.+20     	; 0xdb0 <TSW_u8ReadState+0xde>
				}
				else
				{
					TSW_LowCounter++;
     d9c:	80 91 c5 00 	lds	r24, 0x00C5
     da0:	8f 5f       	subi	r24, 0xFF	; 255
     da2:	80 93 c5 00 	sts	0x00C5, r24
					*Copy_u8PtrToState=TSW_laststat;
     da6:	80 91 c4 00 	lds	r24, 0x00C4
     daa:	ea 81       	ldd	r30, Y+2	; 0x02
     dac:	fb 81       	ldd	r31, Y+3	; 0x03
     dae:	80 83       	st	Z, r24
				}
				if(TSW_HighCounter==BOUNCETIME)
     db0:	80 91 c6 00 	lds	r24, 0x00C6
     db4:	8a 30       	cpi	r24, 0x0A	; 10
     db6:	61 f4       	brne	.+24     	; 0xdd0 <TSW_u8ReadState+0xfe>
				{
					TSW_ButtonState=TSW_u8PRESSED;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	80 93 c2 00 	sts	0x00C2, r24
					TSW_HighCounter=0;
     dbe:	10 92 c6 00 	sts	0x00C6, r1
					TSW_LowCounter=0;
     dc2:	10 92 c5 00 	sts	0x00C5, r1
					*Copy_u8PtrToState=TSW_u8PRESSED;
     dc6:	ea 81       	ldd	r30, Y+2	; 0x02
     dc8:	fb 81       	ldd	r31, Y+3	; 0x03
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	80 83       	st	Z, r24
     dce:	0d c0       	rjmp	.+26     	; 0xdea <TSW_u8ReadState+0x118>
				}
				else if (TSW_LowCounter==BOUNCETIME)
     dd0:	80 91 c5 00 	lds	r24, 0x00C5
     dd4:	8a 30       	cpi	r24, 0x0A	; 10
     dd6:	49 f4       	brne	.+18     	; 0xdea <TSW_u8ReadState+0x118>
				{
					TSW_ButtonState=TSW_u8RELEASED;
     dd8:	10 92 c2 00 	sts	0x00C2, r1
					TSW_LowCounter=0;
     ddc:	10 92 c5 00 	sts	0x00C5, r1
					TSW_HighCounter=0;
     de0:	10 92 c6 00 	sts	0x00C6, r1
					*Copy_u8PtrToState=TSW_u8RELEASED;
     de4:	ea 81       	ldd	r30, Y+2	; 0x02
     de6:	fb 81       	ldd	r31, Y+3	; 0x03
     de8:	10 82       	st	Z, r1
				break;
			default:
				break;
			}

return CheckErr[Copy_u8SwIdx<15];
     dea:	1d 82       	std	Y+5, r1	; 0x05
     dec:	1c 82       	std	Y+4, r1	; 0x04
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	8f 30       	cpi	r24, 0x0F	; 15
     df2:	20 f4       	brcc	.+8      	; 0xdfc <TSW_u8ReadState+0x12a>
     df4:	21 e0       	ldi	r18, 0x01	; 1
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	3d 83       	std	Y+5, r19	; 0x05
     dfa:	2c 83       	std	Y+4, r18	; 0x04
     dfc:	ec 81       	ldd	r30, Y+4	; 0x04
     dfe:	fd 81       	ldd	r31, Y+5	; 0x05
     e00:	e0 56       	subi	r30, 0x60	; 96
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	80 81       	ld	r24, Z
}
     e06:	27 96       	adiw	r28, 0x07	; 7
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <main>:
void ADC_conv();
void Write_LCD();
void Read_sw(void);
void write_name();
void main ()
{
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62

	DIO_voidInit();
     e20:	0e 94 0c 04 	call	0x818	; 0x818 <DIO_voidInit>
	CLC_voidInit();
     e24:	0e 94 0d 02 	call	0x41a	; 0x41a <CLC_voidInit>
	TSW_voidinit() ;
     e28:	0e 94 58 06 	call	0xcb0	; 0xcb0 <TSW_voidinit>
	ADC_voidInit();
     e2c:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>
	ADC_voidEnable();
     e30:	0e 94 64 00 	call	0xc8	; 0xc8 <ADC_voidEnable>


	while(1)
	{

		Read_sw();
     e34:	0e 94 ab 08 	call	0x1156	; 0x1156 <Read_sw>
     e38:	fd cf       	rjmp	.-6      	; 0xe34 <main+0x1c>

00000e3a <ADC_conv>:
	}
}

void ADC_conv()
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62

	ADC_u8ReadCh_SSht(0 , &ADCREAD);
     e42:	29 ec       	ldi	r18, 0xC9	; 201
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	b9 01       	movw	r22, r18
     e4a:	0e 94 80 00 	call	0x100	; 0x100 <ADC_u8ReadCh_SSht>

	//	if(ADCREAD!=old_ADC)
	//		old_ADC=ADCREAD ;

	if(ADCREAD-old_ADC > 5 && flag1==0)
     e4e:	20 91 c9 00 	lds	r18, 0x00C9
     e52:	30 91 ca 00 	lds	r19, 0x00CA
     e56:	80 91 d0 00 	lds	r24, 0x00D0
     e5a:	88 2f       	mov	r24, r24
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	a9 01       	movw	r20, r18
     e60:	48 1b       	sub	r20, r24
     e62:	59 0b       	sbc	r21, r25
     e64:	ca 01       	movw	r24, r20
     e66:	86 30       	cpi	r24, 0x06	; 6
     e68:	91 05       	cpc	r25, r1
     e6a:	60 f0       	brcs	.+24     	; 0xe84 <ADC_conv+0x4a>
     e6c:	80 91 cf 00 	lds	r24, 0x00CF
     e70:	88 23       	and	r24, r24
     e72:	41 f4       	brne	.+16     	; 0xe84 <ADC_conv+0x4a>
	{
	old_ADC=ADCREAD ;
     e74:	80 91 c9 00 	lds	r24, 0x00C9
     e78:	90 91 ca 00 	lds	r25, 0x00CA
     e7c:	80 93 d0 00 	sts	0x00D0, r24
	Write_LCD();
     e80:	0e 94 31 08 	call	0x1062	; 0x1062 <Write_LCD>
	}

	//else
	//{
	if(ADCREAD<=132 && ADCREAD>124)
     e84:	80 91 c9 00 	lds	r24, 0x00C9
     e88:	90 91 ca 00 	lds	r25, 0x00CA
     e8c:	85 38       	cpi	r24, 0x85	; 133
     e8e:	91 05       	cpc	r25, r1
     e90:	58 f4       	brcc	.+22     	; 0xea8 <ADC_conv+0x6e>
     e92:	80 91 c9 00 	lds	r24, 0x00C9
     e96:	90 91 ca 00 	lds	r25, 0x00CA
     e9a:	8d 37       	cpi	r24, 0x7D	; 125
     e9c:	91 05       	cpc	r25, r1
     e9e:	20 f0       	brcs	.+8      	; 0xea8 <ADC_conv+0x6e>
	{
		flg=2 ;
     ea0:	82 e0       	ldi	r24, 0x02	; 2
     ea2:	80 93 c7 00 	sts	0x00C7, r24
     ea6:	58 c0       	rjmp	.+176    	; 0xf58 <ADC_conv+0x11e>
	}
	else if (ADCREAD>132)
     ea8:	80 91 c9 00 	lds	r24, 0x00C9
     eac:	90 91 ca 00 	lds	r25, 0x00CA
     eb0:	85 38       	cpi	r24, 0x85	; 133
     eb2:	91 05       	cpc	r25, r1
     eb4:	18 f1       	brcs	.+70     	; 0xefc <ADC_conv+0xc2>
	{
		count+=(old_ADC);
     eb6:	80 91 d0 00 	lds	r24, 0x00D0
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	80 91 cd 00 	lds	r24, 0x00CD
     ec2:	90 91 ce 00 	lds	r25, 0x00CE
     ec6:	82 0f       	add	r24, r18
     ec8:	93 1f       	adc	r25, r19
     eca:	90 93 ce 00 	sts	0x00CE, r25
     ece:	80 93 cd 00 	sts	0x00CD, r24
		if(count>1500)
     ed2:	80 91 cd 00 	lds	r24, 0x00CD
     ed6:	90 91 ce 00 	lds	r25, 0x00CE
     eda:	55 e0       	ldi	r21, 0x05	; 5
     edc:	8d 3d       	cpi	r24, 0xDD	; 221
     ede:	95 07       	cpc	r25, r21
     ee0:	50 f0       	brcs	.+20     	; 0xef6 <ADC_conv+0xbc>
		{

			step();
     ee2:	0e 94 af 07 	call	0xf5e	; 0xf5e <step>
			count=ADCREAD	;
     ee6:	80 91 c9 00 	lds	r24, 0x00C9
     eea:	90 91 ca 00 	lds	r25, 0x00CA
     eee:	90 93 ce 00 	sts	0x00CE, r25
     ef2:	80 93 cd 00 	sts	0x00CD, r24
		}
		flg=0 ;
     ef6:	10 92 c7 00 	sts	0x00C7, r1
     efa:	2e c0       	rjmp	.+92     	; 0xf58 <ADC_conv+0x11e>

	}
	else if (ADCREAD<=124)
     efc:	80 91 c9 00 	lds	r24, 0x00C9
     f00:	90 91 ca 00 	lds	r25, 0x00CA
     f04:	8d 37       	cpi	r24, 0x7D	; 125
     f06:	91 05       	cpc	r25, r1
     f08:	38 f5       	brcc	.+78     	; 0xf58 <ADC_conv+0x11e>
	{
		c+=((255-old_ADC)) ;
     f0a:	20 91 cb 00 	lds	r18, 0x00CB
     f0e:	30 91 cc 00 	lds	r19, 0x00CC
     f12:	80 91 d0 00 	lds	r24, 0x00D0
     f16:	88 2f       	mov	r24, r24
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	a9 01       	movw	r20, r18
     f1c:	48 1b       	sub	r20, r24
     f1e:	59 0b       	sbc	r21, r25
     f20:	ca 01       	movw	r24, r20
     f22:	81 50       	subi	r24, 0x01	; 1
     f24:	9f 4f       	sbci	r25, 0xFF	; 255
     f26:	90 93 cc 00 	sts	0x00CC, r25
     f2a:	80 93 cb 00 	sts	0x00CB, r24
		if(c>1500)
     f2e:	80 91 cb 00 	lds	r24, 0x00CB
     f32:	90 91 cc 00 	lds	r25, 0x00CC
     f36:	55 e0       	ldi	r21, 0x05	; 5
     f38:	8d 3d       	cpi	r24, 0xDD	; 221
     f3a:	95 07       	cpc	r25, r21
     f3c:	50 f0       	brcs	.+20     	; 0xf52 <ADC_conv+0x118>
		{
			step();
     f3e:	0e 94 af 07 	call	0xf5e	; 0xf5e <step>
			c=ADCREAD	;
     f42:	80 91 c9 00 	lds	r24, 0x00C9
     f46:	90 91 ca 00 	lds	r25, 0x00CA
     f4a:	90 93 cc 00 	sts	0x00CC, r25
     f4e:	80 93 cb 00 	sts	0x00CB, r24
		}
		flg=1 ;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	80 93 c7 00 	sts	0x00C7, r24
	}
	//}
}
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <step>:
void step()
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
	if (flg==0)
     f66:	80 91 c7 00 	lds	r24, 0x00C7
     f6a:	88 23       	and	r24, r24
     f6c:	b1 f5       	brne	.+108    	; 0xfda <step+0x7c>
{
	DIO_u8WritePinVal(st1,get_bit(m,0));
     f6e:	80 91 7a 00 	lds	r24, 0x007A
     f72:	98 2f       	mov	r25, r24
     f74:	91 70       	andi	r25, 0x01	; 1
     f76:	8f e1       	ldi	r24, 0x1F	; 31
     f78:	69 2f       	mov	r22, r25
     f7a:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
	DIO_u8WritePinVal(st2,get_bit(m,1));
     f7e:	80 91 7a 00 	lds	r24, 0x007A
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	82 70       	andi	r24, 0x02	; 2
     f88:	90 70       	andi	r25, 0x00	; 0
     f8a:	95 95       	asr	r25
     f8c:	87 95       	ror	r24
     f8e:	98 2f       	mov	r25, r24
     f90:	8c e1       	ldi	r24, 0x1C	; 28
     f92:	69 2f       	mov	r22, r25
     f94:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
	DIO_u8WritePinVal(st3,get_bit(m,2));
     f98:	80 91 7a 00 	lds	r24, 0x007A
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	84 70       	andi	r24, 0x04	; 4
     fa2:	90 70       	andi	r25, 0x00	; 0
     fa4:	95 95       	asr	r25
     fa6:	87 95       	ror	r24
     fa8:	95 95       	asr	r25
     faa:	87 95       	ror	r24
     fac:	98 2f       	mov	r25, r24
     fae:	8e e1       	ldi	r24, 0x1E	; 30
     fb0:	69 2f       	mov	r22, r25
     fb2:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
	DIO_u8WritePinVal(st4,get_bit(m,3));
     fb6:	80 91 7a 00 	lds	r24, 0x007A
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	88 70       	andi	r24, 0x08	; 8
     fc0:	90 70       	andi	r25, 0x00	; 0
     fc2:	95 95       	asr	r25
     fc4:	87 95       	ror	r24
     fc6:	95 95       	asr	r25
     fc8:	87 95       	ror	r24
     fca:	95 95       	asr	r25
     fcc:	87 95       	ror	r24
     fce:	98 2f       	mov	r25, r24
     fd0:	8d e1       	ldi	r24, 0x1D	; 29
     fd2:	69 2f       	mov	r22, r25
     fd4:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
     fd8:	35 c0       	rjmp	.+106    	; 0x1044 <step+0xe6>
}
	else
{
		DIO_u8WritePinVal(st4,get_bit(m,0));
     fda:	80 91 7a 00 	lds	r24, 0x007A
     fde:	98 2f       	mov	r25, r24
     fe0:	91 70       	andi	r25, 0x01	; 1
     fe2:	8d e1       	ldi	r24, 0x1D	; 29
     fe4:	69 2f       	mov	r22, r25
     fe6:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
		DIO_u8WritePinVal(st3,get_bit(m,1));
     fea:	80 91 7a 00 	lds	r24, 0x007A
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	82 70       	andi	r24, 0x02	; 2
     ff4:	90 70       	andi	r25, 0x00	; 0
     ff6:	95 95       	asr	r25
     ff8:	87 95       	ror	r24
     ffa:	98 2f       	mov	r25, r24
     ffc:	8e e1       	ldi	r24, 0x1E	; 30
     ffe:	69 2f       	mov	r22, r25
    1000:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
		DIO_u8WritePinVal(st2,get_bit(m,2));
    1004:	80 91 7a 00 	lds	r24, 0x007A
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	84 70       	andi	r24, 0x04	; 4
    100e:	90 70       	andi	r25, 0x00	; 0
    1010:	95 95       	asr	r25
    1012:	87 95       	ror	r24
    1014:	95 95       	asr	r25
    1016:	87 95       	ror	r24
    1018:	98 2f       	mov	r25, r24
    101a:	8c e1       	ldi	r24, 0x1C	; 28
    101c:	69 2f       	mov	r22, r25
    101e:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
		DIO_u8WritePinVal(st1,get_bit(m,3));
    1022:	80 91 7a 00 	lds	r24, 0x007A
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	88 70       	andi	r24, 0x08	; 8
    102c:	90 70       	andi	r25, 0x00	; 0
    102e:	95 95       	asr	r25
    1030:	87 95       	ror	r24
    1032:	95 95       	asr	r25
    1034:	87 95       	ror	r24
    1036:	95 95       	asr	r25
    1038:	87 95       	ror	r24
    103a:	98 2f       	mov	r25, r24
    103c:	8f e1       	ldi	r24, 0x1F	; 31
    103e:	69 2f       	mov	r22, r25
    1040:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_u8WritePinVal>
}

	m<<=1 ;
    1044:	80 91 7a 00 	lds	r24, 0x007A
    1048:	88 0f       	add	r24, r24
    104a:	80 93 7a 00 	sts	0x007A, r24
	if(m==16)
    104e:	80 91 7a 00 	lds	r24, 0x007A
    1052:	80 31       	cpi	r24, 0x10	; 16
    1054:	19 f4       	brne	.+6      	; 0x105c <step+0xfe>
		m=1 ;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	80 93 7a 00 	sts	0x007A, r24
}
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <Write_LCD>:
void Write_LCD(void)
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	2a 97       	sbiw	r28, 0x0a	; 10
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
	u8 str[8];
	switch (flg)
    1076:	80 91 c7 00 	lds	r24, 0x00C7
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	3a 87       	std	Y+10, r19	; 0x0a
    1080:	29 87       	std	Y+9, r18	; 0x09
    1082:	89 85       	ldd	r24, Y+9	; 0x09
    1084:	9a 85       	ldd	r25, Y+10	; 0x0a
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	91 05       	cpc	r25, r1
    108a:	49 f1       	breq	.+82     	; 0x10de <Write_LCD+0x7c>
    108c:	29 85       	ldd	r18, Y+9	; 0x09
    108e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	09 f4       	brne	.+2      	; 0x1098 <Write_LCD+0x36>
    1096:	45 c0       	rjmp	.+138    	; 0x1122 <Write_LCD+0xc0>
    1098:	89 85       	ldd	r24, Y+9	; 0x09
    109a:	9a 85       	ldd	r25, Y+10	; 0x0a
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	09 f0       	breq	.+2      	; 0x10a2 <Write_LCD+0x40>
    10a0:	51 c0       	rjmp	.+162    	; 0x1144 <Write_LCD+0xe2>
	{
	case 0:
		CLCD_u8WriteComand(CLC_u8CLRDISP);
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>
		CLCD_u8WriteDataStr("RIGHT");
    10a8:	80 e6       	ldi	r24, 0x60	; 96
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 29 03 	call	0x652	; 0x652 <CLCD_u8WriteDataStr>
		CLCD_u8WriteComand(CLC_u8NEWL);
    10b0:	80 ec       	ldi	r24, 0xC0	; 192
    10b2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>
		itoa((ADCREAD),str,10);
    10b6:	80 91 c9 00 	lds	r24, 0x00C9
    10ba:	90 91 ca 00 	lds	r25, 0x00CA
    10be:	9e 01       	movw	r18, r28
    10c0:	2f 5f       	subi	r18, 0xFF	; 255
    10c2:	3f 4f       	sbci	r19, 0xFF	; 255
    10c4:	b9 01       	movw	r22, r18
    10c6:	4a e0       	ldi	r20, 0x0A	; 10
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	0e 94 aa 09 	call	0x1354	; 0x1354 <itoa>
		CLCD_u8WriteDataStr(str);
    10ce:	ce 01       	movw	r24, r28
    10d0:	01 96       	adiw	r24, 0x01	; 1
    10d2:	0e 94 29 03 	call	0x652	; 0x652 <CLCD_u8WriteDataStr>
		CLCD_u8WriteComand(CLC_u8STL);
    10d6:	80 e8       	ldi	r24, 0x80	; 128
    10d8:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>
    10dc:	33 c0       	rjmp	.+102    	; 0x1144 <Write_LCD+0xe2>
		break ;
	case 1:
		CLCD_u8WriteComand(CLC_u8CLRDISP);
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>
		CLCD_u8WriteDataStr("LEFT ");
    10e4:	86 e6       	ldi	r24, 0x66	; 102
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 29 03 	call	0x652	; 0x652 <CLCD_u8WriteDataStr>
		CLCD_u8WriteComand(CLC_u8NEWL);
    10ec:	80 ec       	ldi	r24, 0xC0	; 192
    10ee:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>
		itoa(((256-ADCREAD)),str,10);
    10f2:	20 91 c9 00 	lds	r18, 0x00C9
    10f6:	30 91 ca 00 	lds	r19, 0x00CA
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	82 1b       	sub	r24, r18
    1100:	93 0b       	sbc	r25, r19
    1102:	9e 01       	movw	r18, r28
    1104:	2f 5f       	subi	r18, 0xFF	; 255
    1106:	3f 4f       	sbci	r19, 0xFF	; 255
    1108:	b9 01       	movw	r22, r18
    110a:	4a e0       	ldi	r20, 0x0A	; 10
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	0e 94 aa 09 	call	0x1354	; 0x1354 <itoa>
		CLCD_u8WriteDataStr(str);
    1112:	ce 01       	movw	r24, r28
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	0e 94 29 03 	call	0x652	; 0x652 <CLCD_u8WriteDataStr>
		CLCD_u8WriteComand(CLC_u8STL);
    111a:	80 e8       	ldi	r24, 0x80	; 128
    111c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>
    1120:	11 c0       	rjmp	.+34     	; 0x1144 <Write_LCD+0xe2>
		break ;
	case 2:
		CLCD_u8WriteComand(CLC_u8CLRDISP);
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>
		CLCD_u8WriteDataStr("STOP ");
    1128:	8c e6       	ldi	r24, 0x6C	; 108
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 29 03 	call	0x652	; 0x652 <CLCD_u8WriteDataStr>
		CLCD_u8WriteComand(CLC_u8NEWL);
    1130:	80 ec       	ldi	r24, 0xC0	; 192
    1132:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>
		CLCD_u8WriteDataStr("000");
    1136:	82 e7       	ldi	r24, 0x72	; 114
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 94 29 03 	call	0x652	; 0x652 <CLCD_u8WriteDataStr>
		CLCD_u8WriteComand(CLC_u8STL);
    113e:	80 e8       	ldi	r24, 0x80	; 128
    1140:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>
		break ;
	default :
		break ;
	}

}
    1144:	2a 96       	adiw	r28, 0x0a	; 10
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <Read_sw>:
void Read_sw(void)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	0f 92       	push	r0
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
	u8 READsw  ;
	TSW_u8ReadState(0,&READsw);
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	9e 01       	movw	r18, r28
    1164:	2f 5f       	subi	r18, 0xFF	; 255
    1166:	3f 4f       	sbci	r19, 0xFF	; 255
    1168:	b9 01       	movw	r22, r18
    116a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <TSW_u8ReadState>
	if(READsw==1)
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	d9 f4       	brne	.+54     	; 0x11aa <Read_sw+0x54>
	{
		if(f==0)
    1174:	80 91 c8 00 	lds	r24, 0x00C8
    1178:	88 23       	and	r24, r24
    117a:	a1 f4       	brne	.+40     	; 0x11a4 <Read_sw+0x4e>
		{
		f=1 ;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	80 93 c8 00 	sts	0x00C8, r24
		flag1=1 ;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	80 93 cf 00 	sts	0x00CF, r24

		old_ADC=0;
    1188:	10 92 d0 00 	sts	0x00D0, r1
		if(ADCREAD<10)
    118c:	80 91 c9 00 	lds	r24, 0x00C9
    1190:	90 91 ca 00 	lds	r25, 0x00CA
    1194:	8a 30       	cpi	r24, 0x0A	; 10
    1196:	91 05       	cpc	r25, r1
    1198:	18 f4       	brcc	.+6      	; 0x11a0 <Read_sw+0x4a>
			old_ADC=20;
    119a:	84 e1       	ldi	r24, 0x14	; 20
    119c:	80 93 d0 00 	sts	0x00D0, r24

		write_name();
    11a0:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <write_name>
		}
		ADC_conv();
    11a4:	0e 94 1d 07 	call	0xe3a	; 0xe3a <ADC_conv>
    11a8:	0a c0       	rjmp	.+20     	; 0x11be <Read_sw+0x68>
	}
	else
	{
		if(f==1)
    11aa:	80 91 c8 00 	lds	r24, 0x00C8
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	21 f4       	brne	.+8      	; 0x11ba <Read_sw+0x64>
		{
			flag1=0 ;
    11b2:	10 92 cf 00 	sts	0x00CF, r1
		f=0 ;
    11b6:	10 92 c8 00 	sts	0x00C8, r1
		}
		ADC_conv();
    11ba:	0e 94 1d 07 	call	0xe3a	; 0xe3a <ADC_conv>

	}

}
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <write_name>:
void write_name()
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	e5 97       	sbiw	r28, 0x35	; 53
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
	u8 ML[]={0x1f,0x09,0x09,0x09,0x09,0x0f,0x00,0x00};
    11da:	ce 01       	movw	r24, r28
    11dc:	02 96       	adiw	r24, 0x02	; 2
    11de:	9b a3       	std	Y+35, r25	; 0x23
    11e0:	8a a3       	std	Y+34, r24	; 0x22
    11e2:	ea eb       	ldi	r30, 0xBA	; 186
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	fd a3       	std	Y+37, r31	; 0x25
    11e8:	ec a3       	std	Y+36, r30	; 0x24
    11ea:	f8 e0       	ldi	r31, 0x08	; 8
    11ec:	fe a3       	std	Y+38, r31	; 0x26
    11ee:	ec a1       	ldd	r30, Y+36	; 0x24
    11f0:	fd a1       	ldd	r31, Y+37	; 0x25
    11f2:	00 80       	ld	r0, Z
    11f4:	8c a1       	ldd	r24, Y+36	; 0x24
    11f6:	9d a1       	ldd	r25, Y+37	; 0x25
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	9d a3       	std	Y+37, r25	; 0x25
    11fc:	8c a3       	std	Y+36, r24	; 0x24
    11fe:	ea a1       	ldd	r30, Y+34	; 0x22
    1200:	fb a1       	ldd	r31, Y+35	; 0x23
    1202:	00 82       	st	Z, r0
    1204:	8a a1       	ldd	r24, Y+34	; 0x22
    1206:	9b a1       	ldd	r25, Y+35	; 0x23
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	9b a3       	std	Y+35, r25	; 0x23
    120c:	8a a3       	std	Y+34, r24	; 0x22
    120e:	9e a1       	ldd	r25, Y+38	; 0x26
    1210:	91 50       	subi	r25, 0x01	; 1
    1212:	9e a3       	std	Y+38, r25	; 0x26
    1214:	ee a1       	ldd	r30, Y+38	; 0x26
    1216:	ee 23       	and	r30, r30
    1218:	51 f7       	brne	.-44     	; 0x11ee <write_name+0x28>
	u8 DL[]={0x00,0x01,0x01,0x01,0x1f,0x00,0x00,0x00};
    121a:	ce 01       	movw	r24, r28
    121c:	0a 96       	adiw	r24, 0x0a	; 10
    121e:	98 a7       	std	Y+40, r25	; 0x28
    1220:	8f a3       	std	Y+39, r24	; 0x27
    1222:	e2 eb       	ldi	r30, 0xB2	; 178
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	fa a7       	std	Y+42, r31	; 0x2a
    1228:	e9 a7       	std	Y+41, r30	; 0x29
    122a:	f8 e0       	ldi	r31, 0x08	; 8
    122c:	fb a7       	std	Y+43, r31	; 0x2b
    122e:	e9 a5       	ldd	r30, Y+41	; 0x29
    1230:	fa a5       	ldd	r31, Y+42	; 0x2a
    1232:	00 80       	ld	r0, Z
    1234:	89 a5       	ldd	r24, Y+41	; 0x29
    1236:	9a a5       	ldd	r25, Y+42	; 0x2a
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	9a a7       	std	Y+42, r25	; 0x2a
    123c:	89 a7       	std	Y+41, r24	; 0x29
    123e:	ef a1       	ldd	r30, Y+39	; 0x27
    1240:	f8 a5       	ldd	r31, Y+40	; 0x28
    1242:	00 82       	st	Z, r0
    1244:	8f a1       	ldd	r24, Y+39	; 0x27
    1246:	98 a5       	ldd	r25, Y+40	; 0x28
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	98 a7       	std	Y+40, r25	; 0x28
    124c:	8f a3       	std	Y+39, r24	; 0x27
    124e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1250:	91 50       	subi	r25, 0x01	; 1
    1252:	9b a7       	std	Y+43, r25	; 0x2b
    1254:	eb a5       	ldd	r30, Y+43	; 0x2b
    1256:	ee 23       	and	r30, r30
    1258:	51 f7       	brne	.-44     	; 0x122e <write_name+0x68>
	u8 OL[]={0x1f,0x11,0x11,0x1f,0x01,0x1f,0x00,0x00};
    125a:	ce 01       	movw	r24, r28
    125c:	42 96       	adiw	r24, 0x12	; 18
    125e:	9d a7       	std	Y+45, r25	; 0x2d
    1260:	8c a7       	std	Y+44, r24	; 0x2c
    1262:	ea ea       	ldi	r30, 0xAA	; 170
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	ff a7       	std	Y+47, r31	; 0x2f
    1268:	ee a7       	std	Y+46, r30	; 0x2e
    126a:	f8 e0       	ldi	r31, 0x08	; 8
    126c:	f8 ab       	std	Y+48, r31	; 0x30
    126e:	ee a5       	ldd	r30, Y+46	; 0x2e
    1270:	ff a5       	ldd	r31, Y+47	; 0x2f
    1272:	00 80       	ld	r0, Z
    1274:	8e a5       	ldd	r24, Y+46	; 0x2e
    1276:	9f a5       	ldd	r25, Y+47	; 0x2f
    1278:	01 96       	adiw	r24, 0x01	; 1
    127a:	9f a7       	std	Y+47, r25	; 0x2f
    127c:	8e a7       	std	Y+46, r24	; 0x2e
    127e:	ec a5       	ldd	r30, Y+44	; 0x2c
    1280:	fd a5       	ldd	r31, Y+45	; 0x2d
    1282:	00 82       	st	Z, r0
    1284:	8c a5       	ldd	r24, Y+44	; 0x2c
    1286:	9d a5       	ldd	r25, Y+45	; 0x2d
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	9d a7       	std	Y+45, r25	; 0x2d
    128c:	8c a7       	std	Y+44, r24	; 0x2c
    128e:	98 a9       	ldd	r25, Y+48	; 0x30
    1290:	91 50       	subi	r25, 0x01	; 1
    1292:	98 ab       	std	Y+48, r25	; 0x30
    1294:	e8 a9       	ldd	r30, Y+48	; 0x30
    1296:	ee 23       	and	r30, r30
    1298:	51 f7       	brne	.-44     	; 0x126e <write_name+0xa8>
	u8 HL[]={0x1f,0x01,0x0f,0x08,0x08,0x08,0x0f,0x00};
    129a:	ce 01       	movw	r24, r28
    129c:	4a 96       	adiw	r24, 0x1a	; 26
    129e:	9a ab       	std	Y+50, r25	; 0x32
    12a0:	89 ab       	std	Y+49, r24	; 0x31
    12a2:	e2 ea       	ldi	r30, 0xA2	; 162
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	fc ab       	std	Y+52, r31	; 0x34
    12a8:	eb ab       	std	Y+51, r30	; 0x33
    12aa:	f8 e0       	ldi	r31, 0x08	; 8
    12ac:	fd ab       	std	Y+53, r31	; 0x35
    12ae:	eb a9       	ldd	r30, Y+51	; 0x33
    12b0:	fc a9       	ldd	r31, Y+52	; 0x34
    12b2:	00 80       	ld	r0, Z
    12b4:	8b a9       	ldd	r24, Y+51	; 0x33
    12b6:	9c a9       	ldd	r25, Y+52	; 0x34
    12b8:	01 96       	adiw	r24, 0x01	; 1
    12ba:	9c ab       	std	Y+52, r25	; 0x34
    12bc:	8b ab       	std	Y+51, r24	; 0x33
    12be:	e9 a9       	ldd	r30, Y+49	; 0x31
    12c0:	fa a9       	ldd	r31, Y+50	; 0x32
    12c2:	00 82       	st	Z, r0
    12c4:	89 a9       	ldd	r24, Y+49	; 0x31
    12c6:	9a a9       	ldd	r25, Y+50	; 0x32
    12c8:	01 96       	adiw	r24, 0x01	; 1
    12ca:	9a ab       	std	Y+50, r25	; 0x32
    12cc:	89 ab       	std	Y+49, r24	; 0x31
    12ce:	9d a9       	ldd	r25, Y+53	; 0x35
    12d0:	91 50       	subi	r25, 0x01	; 1
    12d2:	9d ab       	std	Y+53, r25	; 0x35
    12d4:	ed a9       	ldd	r30, Y+53	; 0x35
    12d6:	ee 23       	and	r30, r30
    12d8:	51 f7       	brne	.-44     	; 0x12ae <write_name+0xe8>
	u8 i ;

	CLCD_u8WriteComand(CLC_u8CLRDISP);
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>
	CLCD_u8WriteOnCGRam(HL,0);
    12e0:	ce 01       	movw	r24, r28
    12e2:	4a 96       	adiw	r24, 0x1a	; 26
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	0e 94 cc 03 	call	0x798	; 0x798 <CLCD_u8WriteOnCGRam>
	CLCD_u8WriteOnCGRam(OL,1);
    12ea:	ce 01       	movw	r24, r28
    12ec:	42 96       	adiw	r24, 0x12	; 18
    12ee:	61 e0       	ldi	r22, 0x01	; 1
    12f0:	0e 94 cc 03 	call	0x798	; 0x798 <CLCD_u8WriteOnCGRam>
	CLCD_u8WriteOnCGRam(DL,2);
    12f4:	ce 01       	movw	r24, r28
    12f6:	0a 96       	adiw	r24, 0x0a	; 10
    12f8:	62 e0       	ldi	r22, 0x02	; 2
    12fa:	0e 94 cc 03 	call	0x798	; 0x798 <CLCD_u8WriteOnCGRam>
	CLCD_u8WriteOnCGRam(ML,3);
    12fe:	ce 01       	movw	r24, r28
    1300:	02 96       	adiw	r24, 0x02	; 2
    1302:	63 e0       	ldi	r22, 0x03	; 3
    1304:	0e 94 cc 03 	call	0x798	; 0x798 <CLCD_u8WriteOnCGRam>
	CLCD_u8WriteOnCGRam(ML,4);
    1308:	ce 01       	movw	r24, r28
    130a:	02 96       	adiw	r24, 0x02	; 2
    130c:	64 e0       	ldi	r22, 0x04	; 4
    130e:	0e 94 cc 03 	call	0x798	; 0x798 <CLCD_u8WriteOnCGRam>

	CLCD_u8WriteComand(CLC_u8STL);
    1312:	80 e8       	ldi	r24, 0x80	; 128
    1314:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>

	for(i=0;i<5;i++)
    1318:	19 82       	std	Y+1, r1	; 0x01
    131a:	06 c0       	rjmp	.+12     	; 0x1328 <write_name+0x162>
		CLCD_u8WriteDataChar(i);
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	0e 94 cd 02 	call	0x59a	; 0x59a <CLCD_u8WriteDataChar>
	CLCD_u8WriteOnCGRam(ML,3);
	CLCD_u8WriteOnCGRam(ML,4);

	CLCD_u8WriteComand(CLC_u8STL);

	for(i=0;i<5;i++)
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	8f 5f       	subi	r24, 0xFF	; 255
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	85 30       	cpi	r24, 0x05	; 5
    132c:	b8 f3       	brcs	.-18     	; 0x131c <write_name+0x156>
		CLCD_u8WriteDataChar(i);

	CLCD_u8WriteComand(CLC_u8NEWL);
    132e:	80 ec       	ldi	r24, 0xC0	; 192
    1330:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>
	CLCD_u8WriteDataStr("   ");
    1334:	86 e7       	ldi	r24, 0x76	; 118
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	0e 94 29 03 	call	0x652	; 0x652 <CLCD_u8WriteDataStr>
	CLCD_u8WriteComand(CLC_u8STL);
    133c:	80 e8       	ldi	r24, 0x80	; 128
    133e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CLCD_u8WriteComand>
}
    1342:	e5 96       	adiw	r28, 0x35	; 53
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <itoa>:
    1354:	fb 01       	movw	r30, r22
    1356:	9f 01       	movw	r18, r30
    1358:	e8 94       	clt
    135a:	42 30       	cpi	r20, 0x02	; 2
    135c:	c4 f0       	brlt	.+48     	; 0x138e <itoa+0x3a>
    135e:	45 32       	cpi	r20, 0x25	; 37
    1360:	b4 f4       	brge	.+44     	; 0x138e <itoa+0x3a>
    1362:	4a 30       	cpi	r20, 0x0A	; 10
    1364:	29 f4       	brne	.+10     	; 0x1370 <itoa+0x1c>
    1366:	97 fb       	bst	r25, 7
    1368:	1e f4       	brtc	.+6      	; 0x1370 <itoa+0x1c>
    136a:	90 95       	com	r25
    136c:	81 95       	neg	r24
    136e:	9f 4f       	sbci	r25, 0xFF	; 255
    1370:	64 2f       	mov	r22, r20
    1372:	77 27       	eor	r23, r23
    1374:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__udivmodhi4>
    1378:	80 5d       	subi	r24, 0xD0	; 208
    137a:	8a 33       	cpi	r24, 0x3A	; 58
    137c:	0c f0       	brlt	.+2      	; 0x1380 <itoa+0x2c>
    137e:	89 5d       	subi	r24, 0xD9	; 217
    1380:	81 93       	st	Z+, r24
    1382:	cb 01       	movw	r24, r22
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	a1 f7       	brne	.-24     	; 0x1370 <itoa+0x1c>
    1388:	16 f4       	brtc	.+4      	; 0x138e <itoa+0x3a>
    138a:	5d e2       	ldi	r21, 0x2D	; 45
    138c:	51 93       	st	Z+, r21
    138e:	10 82       	st	Z, r1
    1390:	c9 01       	movw	r24, r18
    1392:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <strrev>

00001396 <strrev>:
    1396:	dc 01       	movw	r26, r24
    1398:	fc 01       	movw	r30, r24
    139a:	67 2f       	mov	r22, r23
    139c:	71 91       	ld	r23, Z+
    139e:	77 23       	and	r23, r23
    13a0:	e1 f7       	brne	.-8      	; 0x139a <strrev+0x4>
    13a2:	32 97       	sbiw	r30, 0x02	; 2
    13a4:	04 c0       	rjmp	.+8      	; 0x13ae <strrev+0x18>
    13a6:	7c 91       	ld	r23, X
    13a8:	6d 93       	st	X+, r22
    13aa:	70 83       	st	Z, r23
    13ac:	62 91       	ld	r22, -Z
    13ae:	ae 17       	cp	r26, r30
    13b0:	bf 07       	cpc	r27, r31
    13b2:	c8 f3       	brcs	.-14     	; 0x13a6 <strrev+0x10>
    13b4:	08 95       	ret

000013b6 <__udivmodhi4>:
    13b6:	aa 1b       	sub	r26, r26
    13b8:	bb 1b       	sub	r27, r27
    13ba:	51 e1       	ldi	r21, 0x11	; 17
    13bc:	07 c0       	rjmp	.+14     	; 0x13cc <__udivmodhi4_ep>

000013be <__udivmodhi4_loop>:
    13be:	aa 1f       	adc	r26, r26
    13c0:	bb 1f       	adc	r27, r27
    13c2:	a6 17       	cp	r26, r22
    13c4:	b7 07       	cpc	r27, r23
    13c6:	10 f0       	brcs	.+4      	; 0x13cc <__udivmodhi4_ep>
    13c8:	a6 1b       	sub	r26, r22
    13ca:	b7 0b       	sbc	r27, r23

000013cc <__udivmodhi4_ep>:
    13cc:	88 1f       	adc	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	5a 95       	dec	r21
    13d2:	a9 f7       	brne	.-22     	; 0x13be <__udivmodhi4_loop>
    13d4:	80 95       	com	r24
    13d6:	90 95       	com	r25
    13d8:	bc 01       	movw	r22, r24
    13da:	cd 01       	movw	r24, r26
    13dc:	08 95       	ret

000013de <_exit>:
    13de:	f8 94       	cli

000013e0 <__stop_program>:
    13e0:	ff cf       	rjmp	.-2      	; 0x13e0 <__stop_program>
