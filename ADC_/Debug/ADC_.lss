
ADC_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000008fa  0000096e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000e64  00000000  00000000  00000988  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000070b  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 53 04 	call	0x8a6	; 0x8a6 <main>
  7a:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_voidInit>:
#include "ADC_config.h"
#include "utilites.h"

static const u8 CHKERR[2]={error,ok};
extern void ADC_voidInit(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	ADC_ADMUX = ADC_ADMUX_VAL;
  8a:	e7 e2       	ldi	r30, 0x27	; 39
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 e4       	ldi	r24, 0x40	; 64
  90:	80 83       	st	Z, r24
	ADC_ADCSRA= ADC_ADCSRA_VAL ;
  92:	e6 e2       	ldi	r30, 0x26	; 38
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	10 82       	st	Z, r1
	ADC_ADCH=ADC_ADCH_VAL;
  98:	e5 e2       	ldi	r30, 0x25	; 37
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	10 82       	st	Z, r1
	ADC_ADCL=ADC_ADCL_VAL;
  9e:	e4 e2       	ldi	r30, 0x24	; 36
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1
	ADC_SFIOR|=ADC_SFIOR_VAL  ;
  a4:	a0 e5       	ldi	r26, 0x50	; 80
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	e0 e5       	ldi	r30, 0x50	; 80
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8c 93       	st	X, r24

}
  b0:	cf 91       	pop	r28
  b2:	df 91       	pop	r29
  b4:	08 95       	ret

000000b6 <ADC_voidEnable>:

extern void ADC_voidEnable(void)
{
  b6:	df 93       	push	r29
  b8:	cf 93       	push	r28
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
	ADC_ADCSRA|=(1<<ADEN);
  be:	a6 e2       	ldi	r26, 0x26	; 38
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	e6 e2       	ldi	r30, 0x26	; 38
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	8c 93       	st	X, r24
}
  cc:	cf 91       	pop	r28
  ce:	df 91       	pop	r29
  d0:	08 95       	ret

000000d2 <ADC_voidDisable>:

extern void ADC_voidDisable(void)
{
  d2:	df 93       	push	r29
  d4:	cf 93       	push	r28
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
	ADC_ADCSRA&=~(1<<ADEN);
  da:	a6 e2       	ldi	r26, 0x26	; 38
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	e6 e2       	ldi	r30, 0x26	; 38
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8f 77       	andi	r24, 0x7F	; 127
  e6:	8c 93       	st	X, r24
}
  e8:	cf 91       	pop	r28
  ea:	df 91       	pop	r29
  ec:	08 95       	ret

000000ee <ADC_u8ReadCh_SSht>:

extern u8 ADC_u8ReadCh_SSht(u8 Copy_ChIdx , u16 * Copy_PtrToVal)
{
  ee:	df 93       	push	r29
  f0:	cf 93       	push	r28
  f2:	00 d0       	rcall	.+0      	; 0xf4 <ADC_u8ReadCh_SSht+0x6>
  f4:	00 d0       	rcall	.+0      	; 0xf6 <ADC_u8ReadCh_SSht+0x8>
  f6:	0f 92       	push	r0
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	89 83       	std	Y+1, r24	; 0x01
  fe:	7b 83       	std	Y+3, r23	; 0x03
 100:	6a 83       	std	Y+2, r22	; 0x02

	*Copy_PtrToVal=0 ;
 102:	ea 81       	ldd	r30, Y+2	; 0x02
 104:	fb 81       	ldd	r31, Y+3	; 0x03
 106:	11 82       	std	Z+1, r1	; 0x01
 108:	10 82       	st	Z, r1
	ADC_ADMUX&=0xE0 ;
 10a:	a7 e2       	ldi	r26, 0x27	; 39
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	e7 e2       	ldi	r30, 0x27	; 39
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 7e       	andi	r24, 0xE0	; 224
 116:	8c 93       	st	X, r24
	ADC_ADMUX|=(0x1F & Copy_ChIdx) ;
 118:	a7 e2       	ldi	r26, 0x27	; 39
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e7 e2       	ldi	r30, 0x27	; 39
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	98 2f       	mov	r25, r24
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	8f 71       	andi	r24, 0x1F	; 31
 128:	89 2b       	or	r24, r25
 12a:	8c 93       	st	X, r24
	ADC_ADCSRA|=(1<<ADSC);
 12c:	a6 e2       	ldi	r26, 0x26	; 38
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e6 e2       	ldi	r30, 0x26	; 38
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 64       	ori	r24, 0x40	; 64
 138:	8c 93       	st	X, r24

	while(ADC_ADCSRA&(1<<ADSC)) ;
 13a:	e6 e2       	ldi	r30, 0x26	; 38
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	88 2f       	mov	r24, r24
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	80 74       	andi	r24, 0x40	; 64
 146:	90 70       	andi	r25, 0x00	; 0
 148:	00 97       	sbiw	r24, 0x00	; 0
 14a:	b9 f7       	brne	.-18     	; 0x13a <ADC_u8ReadCh_SSht+0x4c>
switch 	(ADC_RES)
{
case ADC_LOWRES :
		if(ADC_ADLAR_INITVAL==0)
		{
		* Copy_PtrToVal = ADC_ADCL  ;
 14c:	e4 e2       	ldi	r30, 0x24	; 36
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	88 2f       	mov	r24, r24
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	ea 81       	ldd	r30, Y+2	; 0x02
 158:	fb 81       	ldd	r31, Y+3	; 0x03
 15a:	91 83       	std	Z+1, r25	; 0x01
 15c:	80 83       	st	Z, r24
		* Copy_PtrToVal >>=2  ;
 15e:	ea 81       	ldd	r30, Y+2	; 0x02
 160:	fb 81       	ldd	r31, Y+3	; 0x03
 162:	80 81       	ld	r24, Z
 164:	91 81       	ldd	r25, Z+1	; 0x01
 166:	96 95       	lsr	r25
 168:	87 95       	ror	r24
 16a:	96 95       	lsr	r25
 16c:	87 95       	ror	r24
 16e:	ea 81       	ldd	r30, Y+2	; 0x02
 170:	fb 81       	ldd	r31, Y+3	; 0x03
 172:	91 83       	std	Z+1, r25	; 0x01
 174:	80 83       	st	Z, r24
		* Copy_PtrToVal |=(ADC_ADCH<<6) ;
 176:	ea 81       	ldd	r30, Y+2	; 0x02
 178:	fb 81       	ldd	r31, Y+3	; 0x03
 17a:	20 81       	ld	r18, Z
 17c:	31 81       	ldd	r19, Z+1	; 0x01
 17e:	e5 e2       	ldi	r30, 0x25	; 37
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	88 2f       	mov	r24, r24
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	00 24       	eor	r0, r0
 18a:	96 95       	lsr	r25
 18c:	87 95       	ror	r24
 18e:	07 94       	ror	r0
 190:	96 95       	lsr	r25
 192:	87 95       	ror	r24
 194:	07 94       	ror	r0
 196:	98 2f       	mov	r25, r24
 198:	80 2d       	mov	r24, r0
 19a:	82 2b       	or	r24, r18
 19c:	93 2b       	or	r25, r19
 19e:	ea 81       	ldd	r30, Y+2	; 0x02
 1a0:	fb 81       	ldd	r31, Y+3	; 0x03
 1a2:	91 83       	std	Z+1, r25	; 0x01
 1a4:	80 83       	st	Z, r24
	break ;

default :
	break ;
}
return CHKERR[Copy_ChIdx < 8];
 1a6:	1d 82       	std	Y+5, r1	; 0x05
 1a8:	1c 82       	std	Y+4, r1	; 0x04
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	88 30       	cpi	r24, 0x08	; 8
 1ae:	20 f4       	brcc	.+8      	; 0x1b8 <ADC_u8ReadCh_SSht+0xca>
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	9d 83       	std	Y+5, r25	; 0x05
 1b6:	8c 83       	std	Y+4, r24	; 0x04
 1b8:	ec 81       	ldd	r30, Y+4	; 0x04
 1ba:	fd 81       	ldd	r31, Y+5	; 0x05
 1bc:	e0 5a       	subi	r30, 0xA0	; 160
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	80 81       	ld	r24, Z
}
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	cf 91       	pop	r28
 1ce:	df 91       	pop	r29
 1d0:	08 95       	ret

000001d2 <ADC_u8ReadCh_MSht>:

extern u8 ADC_u8ReadCh_MSht(u8 Copy_ChIdx , u16 * Copy_PtrToVal)
{
 1d2:	df 93       	push	r29
 1d4:	cf 93       	push	r28
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
 1da:	2a 97       	sbiw	r28, 0x0a	; 10
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	cd bf       	out	0x3d, r28	; 61
 1e6:	8e 83       	std	Y+6, r24	; 0x06
 1e8:	78 87       	std	Y+8, r23	; 0x08
 1ea:	6f 83       	std	Y+7, r22	; 0x07

	u8 local_u8ount=0;
 1ec:	1d 82       	std	Y+5, r1	; 0x05
	u16 local_u16avg=0 ;
 1ee:	1c 82       	std	Y+4, r1	; 0x04
 1f0:	1b 82       	std	Y+3, r1	; 0x03
	u32 local_u32sum=0 ;
 1f2:	1a 82       	std	Y+2, r1	; 0x02
 1f4:	19 82       	std	Y+1, r1	; 0x01
	 * Copy_PtrToVal=0;
 1f6:	ef 81       	ldd	r30, Y+7	; 0x07
 1f8:	f8 85       	ldd	r31, Y+8	; 0x08
 1fa:	11 82       	std	Z+1, r1	; 0x01
 1fc:	10 82       	st	Z, r1
for(local_u8ount=0 ;local_u8ount<8;local_u8ount++)
 1fe:	1d 82       	std	Y+5, r1	; 0x05
 200:	49 c0       	rjmp	.+146    	; 0x294 <ADC_u8ReadCh_MSht+0xc2>
{
	ADC_ADMUX|=(0x1F & Copy_ChIdx) ;
 202:	a7 e2       	ldi	r26, 0x27	; 39
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	e7 e2       	ldi	r30, 0x27	; 39
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	98 2f       	mov	r25, r24
 20e:	8e 81       	ldd	r24, Y+6	; 0x06
 210:	8f 71       	andi	r24, 0x1F	; 31
 212:	89 2b       	or	r24, r25
 214:	8c 93       	st	X, r24
	ADC_ADCSRA|=(1<<ADSC);
 216:	a6 e2       	ldi	r26, 0x26	; 38
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	e6 e2       	ldi	r30, 0x26	; 38
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	80 64       	ori	r24, 0x40	; 64
 222:	8c 93       	st	X, r24

	while(ADC_ADCSRA&(1<<ADSC)) ;
 224:	e6 e2       	ldi	r30, 0x26	; 38
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	88 2f       	mov	r24, r24
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	80 74       	andi	r24, 0x40	; 64
 230:	90 70       	andi	r25, 0x00	; 0
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	b9 f7       	brne	.-18     	; 0x224 <ADC_u8ReadCh_MSht+0x52>
switch 	(ADC_RES)
{
case ADC_LOWRES :
		if(ADC_ADLAR_INITVAL==0)
		{
			local_u16avg = ADC_ADCL  ;
 236:	e4 e2       	ldi	r30, 0x24	; 36
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	88 2f       	mov	r24, r24
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	9c 83       	std	Y+4, r25	; 0x04
 242:	8b 83       	std	Y+3, r24	; 0x03
			local_u16avg >>=2  ;
 244:	8b 81       	ldd	r24, Y+3	; 0x03
 246:	9c 81       	ldd	r25, Y+4	; 0x04
 248:	96 95       	lsr	r25
 24a:	87 95       	ror	r24
 24c:	96 95       	lsr	r25
 24e:	87 95       	ror	r24
 250:	9c 83       	std	Y+4, r25	; 0x04
 252:	8b 83       	std	Y+3, r24	; 0x03
			local_u16avg |=(ADC_ADCH<<6) ;
 254:	e5 e2       	ldi	r30, 0x25	; 37
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	88 2f       	mov	r24, r24
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	00 24       	eor	r0, r0
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	07 94       	ror	r0
 266:	96 95       	lsr	r25
 268:	87 95       	ror	r24
 26a:	07 94       	ror	r0
 26c:	98 2f       	mov	r25, r24
 26e:	80 2d       	mov	r24, r0
 270:	9c 01       	movw	r18, r24
 272:	8b 81       	ldd	r24, Y+3	; 0x03
 274:	9c 81       	ldd	r25, Y+4	; 0x04
 276:	82 2b       	or	r24, r18
 278:	93 2b       	or	r25, r19
 27a:	9c 83       	std	Y+4, r25	; 0x04
 27c:	8b 83       	std	Y+3, r24	; 0x03
	break ;

default :
	break ;
}
	local_u32sum+=local_u16avg ;
 27e:	29 81       	ldd	r18, Y+1	; 0x01
 280:	3a 81       	ldd	r19, Y+2	; 0x02
 282:	8b 81       	ldd	r24, Y+3	; 0x03
 284:	9c 81       	ldd	r25, Y+4	; 0x04
 286:	82 0f       	add	r24, r18
 288:	93 1f       	adc	r25, r19
 28a:	9a 83       	std	Y+2, r25	; 0x02
 28c:	89 83       	std	Y+1, r24	; 0x01

	u8 local_u8ount=0;
	u16 local_u16avg=0 ;
	u32 local_u32sum=0 ;
	 * Copy_PtrToVal=0;
for(local_u8ount=0 ;local_u8ount<8;local_u8ount++)
 28e:	8d 81       	ldd	r24, Y+5	; 0x05
 290:	8f 5f       	subi	r24, 0xFF	; 255
 292:	8d 83       	std	Y+5, r24	; 0x05
 294:	8d 81       	ldd	r24, Y+5	; 0x05
 296:	88 30       	cpi	r24, 0x08	; 8
 298:	08 f4       	brcc	.+2      	; 0x29c <ADC_u8ReadCh_MSht+0xca>
 29a:	b3 cf       	rjmp	.-154    	; 0x202 <ADC_u8ReadCh_MSht+0x30>
default :
	break ;
}
	local_u32sum+=local_u16avg ;
}
* Copy_PtrToVal =  local_u32sum /8 ;
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	9a 81       	ldd	r25, Y+2	; 0x02
 2a0:	96 95       	lsr	r25
 2a2:	87 95       	ror	r24
 2a4:	96 95       	lsr	r25
 2a6:	87 95       	ror	r24
 2a8:	96 95       	lsr	r25
 2aa:	87 95       	ror	r24
 2ac:	ef 81       	ldd	r30, Y+7	; 0x07
 2ae:	f8 85       	ldd	r31, Y+8	; 0x08
 2b0:	91 83       	std	Z+1, r25	; 0x01
 2b2:	80 83       	st	Z, r24
return CHKERR[Copy_ChIdx < 8];
 2b4:	1a 86       	std	Y+10, r1	; 0x0a
 2b6:	19 86       	std	Y+9, r1	; 0x09
 2b8:	8e 81       	ldd	r24, Y+6	; 0x06
 2ba:	88 30       	cpi	r24, 0x08	; 8
 2bc:	20 f4       	brcc	.+8      	; 0x2c6 <ADC_u8ReadCh_MSht+0xf4>
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	9a 87       	std	Y+10, r25	; 0x0a
 2c4:	89 87       	std	Y+9, r24	; 0x09
 2c6:	e9 85       	ldd	r30, Y+9	; 0x09
 2c8:	fa 85       	ldd	r31, Y+10	; 0x0a
 2ca:	e0 5a       	subi	r30, 0xA0	; 160
 2cc:	ff 4f       	sbci	r31, 0xFF	; 255
 2ce:	80 81       	ld	r24, Z
}
 2d0:	2a 96       	adiw	r28, 0x0a	; 10
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
 2dc:	cf 91       	pop	r28
 2de:	df 91       	pop	r29
 2e0:	08 95       	ret

000002e2 <ADC_u8ReadGp>:

extern u8 ADC_u8ReadGp( u8 * Copy_IdxArr, u16 * Copy_PtrToVal)
{
 2e2:	df 93       	push	r29
 2e4:	cf 93       	push	r28
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
 2ea:	27 97       	sbiw	r28, 0x07	; 7
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
 2f6:	9b 83       	std	Y+3, r25	; 0x03
 2f8:	8a 83       	std	Y+2, r24	; 0x02
 2fa:	7d 83       	std	Y+5, r23	; 0x05
 2fc:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_u8count ;
	 * Copy_PtrToVal=0;
 2fe:	ec 81       	ldd	r30, Y+4	; 0x04
 300:	fd 81       	ldd	r31, Y+5	; 0x05
 302:	11 82       	std	Z+1, r1	; 0x01
 304:	10 82       	st	Z, r1

for(local_u8count=0;local_u8count<4;local_u8count++)
 306:	19 82       	std	Y+1, r1	; 0x01
 308:	52 c0       	rjmp	.+164    	; 0x3ae <ADC_u8ReadGp+0xcc>
{
		ADC_ADMUX|=(0x1F & Copy_IdxArr[local_u8count]) ;
 30a:	a7 e2       	ldi	r26, 0x27	; 39
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	e7 e2       	ldi	r30, 0x27	; 39
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	48 2f       	mov	r20, r24
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	28 2f       	mov	r18, r24
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	8a 81       	ldd	r24, Y+2	; 0x02
 31e:	9b 81       	ldd	r25, Y+3	; 0x03
 320:	fc 01       	movw	r30, r24
 322:	e2 0f       	add	r30, r18
 324:	f3 1f       	adc	r31, r19
 326:	80 81       	ld	r24, Z
 328:	8f 71       	andi	r24, 0x1F	; 31
 32a:	84 2b       	or	r24, r20
 32c:	8c 93       	st	X, r24
		ADC_ADCSRA|=(1<<ADSC);
 32e:	a6 e2       	ldi	r26, 0x26	; 38
 330:	b0 e0       	ldi	r27, 0x00	; 0
 332:	e6 e2       	ldi	r30, 0x26	; 38
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	80 64       	ori	r24, 0x40	; 64
 33a:	8c 93       	st	X, r24

		while(ADC_ADCSRA&(1<<ADSC)) ;
 33c:	e6 e2       	ldi	r30, 0x26	; 38
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	88 2f       	mov	r24, r24
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	80 74       	andi	r24, 0x40	; 64
 348:	90 70       	andi	r25, 0x00	; 0
 34a:	00 97       	sbiw	r24, 0x00	; 0
 34c:	b9 f7       	brne	.-18     	; 0x33c <ADC_u8ReadGp+0x5a>
	switch 	(ADC_RES)
	{
	case ADC_LOWRES :
			if(ADC_ADLAR_INITVAL==0)
			{
				* Copy_PtrToVal = ADC_ADCL  ;
 34e:	e4 e2       	ldi	r30, 0x24	; 36
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	88 2f       	mov	r24, r24
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	ec 81       	ldd	r30, Y+4	; 0x04
 35a:	fd 81       	ldd	r31, Y+5	; 0x05
 35c:	91 83       	std	Z+1, r25	; 0x01
 35e:	80 83       	st	Z, r24
				* Copy_PtrToVal >>=2  ;
 360:	ec 81       	ldd	r30, Y+4	; 0x04
 362:	fd 81       	ldd	r31, Y+5	; 0x05
 364:	80 81       	ld	r24, Z
 366:	91 81       	ldd	r25, Z+1	; 0x01
 368:	96 95       	lsr	r25
 36a:	87 95       	ror	r24
 36c:	96 95       	lsr	r25
 36e:	87 95       	ror	r24
 370:	ec 81       	ldd	r30, Y+4	; 0x04
 372:	fd 81       	ldd	r31, Y+5	; 0x05
 374:	91 83       	std	Z+1, r25	; 0x01
 376:	80 83       	st	Z, r24
				* Copy_PtrToVal |=(ADC_ADCH<<6) ;
 378:	ec 81       	ldd	r30, Y+4	; 0x04
 37a:	fd 81       	ldd	r31, Y+5	; 0x05
 37c:	20 81       	ld	r18, Z
 37e:	31 81       	ldd	r19, Z+1	; 0x01
 380:	e5 e2       	ldi	r30, 0x25	; 37
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	88 2f       	mov	r24, r24
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	00 24       	eor	r0, r0
 38c:	96 95       	lsr	r25
 38e:	87 95       	ror	r24
 390:	07 94       	ror	r0
 392:	96 95       	lsr	r25
 394:	87 95       	ror	r24
 396:	07 94       	ror	r0
 398:	98 2f       	mov	r25, r24
 39a:	80 2d       	mov	r24, r0
 39c:	82 2b       	or	r24, r18
 39e:	93 2b       	or	r25, r19
 3a0:	ec 81       	ldd	r30, Y+4	; 0x04
 3a2:	fd 81       	ldd	r31, Y+5	; 0x05
 3a4:	91 83       	std	Z+1, r25	; 0x01
 3a6:	80 83       	st	Z, r24
extern u8 ADC_u8ReadGp( u8 * Copy_IdxArr, u16 * Copy_PtrToVal)
{
	u8 local_u8count ;
	 * Copy_PtrToVal=0;

for(local_u8count=0;local_u8count<4;local_u8count++)
 3a8:	89 81       	ldd	r24, Y+1	; 0x01
 3aa:	8f 5f       	subi	r24, 0xFF	; 255
 3ac:	89 83       	std	Y+1, r24	; 0x01
 3ae:	89 81       	ldd	r24, Y+1	; 0x01
 3b0:	84 30       	cpi	r24, 0x04	; 4
 3b2:	08 f4       	brcc	.+2      	; 0x3b6 <ADC_u8ReadGp+0xd4>
 3b4:	aa cf       	rjmp	.-172    	; 0x30a <ADC_u8ReadGp+0x28>

	default :
		break ;
	}
}
	return CHKERR[Copy_IdxArr[0] < 8 && Copy_IdxArr[1] < 8 && Copy_IdxArr[2] < 8 && Copy_IdxArr[3] < 8 ];
 3b6:	ea 81       	ldd	r30, Y+2	; 0x02
 3b8:	fb 81       	ldd	r31, Y+3	; 0x03
 3ba:	80 81       	ld	r24, Z
 3bc:	88 30       	cpi	r24, 0x08	; 8
 3be:	d0 f4       	brcc	.+52     	; 0x3f4 <ADC_u8ReadGp+0x112>
 3c0:	8a 81       	ldd	r24, Y+2	; 0x02
 3c2:	9b 81       	ldd	r25, Y+3	; 0x03
 3c4:	fc 01       	movw	r30, r24
 3c6:	31 96       	adiw	r30, 0x01	; 1
 3c8:	80 81       	ld	r24, Z
 3ca:	88 30       	cpi	r24, 0x08	; 8
 3cc:	98 f4       	brcc	.+38     	; 0x3f4 <ADC_u8ReadGp+0x112>
 3ce:	8a 81       	ldd	r24, Y+2	; 0x02
 3d0:	9b 81       	ldd	r25, Y+3	; 0x03
 3d2:	fc 01       	movw	r30, r24
 3d4:	32 96       	adiw	r30, 0x02	; 2
 3d6:	80 81       	ld	r24, Z
 3d8:	88 30       	cpi	r24, 0x08	; 8
 3da:	60 f4       	brcc	.+24     	; 0x3f4 <ADC_u8ReadGp+0x112>
 3dc:	8a 81       	ldd	r24, Y+2	; 0x02
 3de:	9b 81       	ldd	r25, Y+3	; 0x03
 3e0:	fc 01       	movw	r30, r24
 3e2:	33 96       	adiw	r30, 0x03	; 3
 3e4:	80 81       	ld	r24, Z
 3e6:	88 30       	cpi	r24, 0x08	; 8
 3e8:	28 f4       	brcc	.+10     	; 0x3f4 <ADC_u8ReadGp+0x112>
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	9f 83       	std	Y+7, r25	; 0x07
 3f0:	8e 83       	std	Y+6, r24	; 0x06
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <ADC_u8ReadGp+0x116>
 3f4:	1f 82       	std	Y+7, r1	; 0x07
 3f6:	1e 82       	std	Y+6, r1	; 0x06
 3f8:	8e 81       	ldd	r24, Y+6	; 0x06
 3fa:	9f 81       	ldd	r25, Y+7	; 0x07
 3fc:	fc 01       	movw	r30, r24
 3fe:	e0 5a       	subi	r30, 0xA0	; 160
 400:	ff 4f       	sbci	r31, 0xFF	; 255
 402:	80 81       	ld	r24, Z
}
 404:	27 96       	adiw	r28, 0x07	; 7
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	f8 94       	cli
 40a:	de bf       	out	0x3e, r29	; 62
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	cd bf       	out	0x3d, r28	; 61
 410:	cf 91       	pop	r28
 412:	df 91       	pop	r29
 414:	08 95       	ret

00000416 <DIO_voidInit>:
static  u8 * const DIO_u8Ddrs[]={DIO_u8DDRA ,DIO_u8DDRB, DIO_u8DDRC , DIO_u8DDRD} ;
static  u8 *const DIO_u8Pins[]={DIO_u8PINA ,DIO_u8PINB, DIO_u8PINC , DIO_u8PIND} ;


extern void DIO_voidInit(void)
{
 416:	df 93       	push	r29
 418:	cf 93       	push	r28
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62

/*Comment!:initializing Ports Directions */
*DIO_u8Ddrs[DIO_u8PORT0]=DIO_u8PORTA_DIR;
 41e:	e0 91 6a 00 	lds	r30, 0x006A
 422:	f0 91 6b 00 	lds	r31, 0x006B
 426:	10 82       	st	Z, r1
*DIO_u8Ddrs[DIO_u8PORT1]=DIO_u8PORTB_DIR;
 428:	e0 91 6c 00 	lds	r30, 0x006C
 42c:	f0 91 6d 00 	lds	r31, 0x006D
 430:	10 82       	st	Z, r1
*DIO_u8Ddrs[DIO_u8PORT2]=DIO_u8PORTC_DIR;
 432:	e0 91 6e 00 	lds	r30, 0x006E
 436:	f0 91 6f 00 	lds	r31, 0x006F
 43a:	8f ef       	ldi	r24, 0xFF	; 255
 43c:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT3]=DIO_u8PORTD_DIR;
 43e:	e0 91 70 00 	lds	r30, 0x0070
 442:	f0 91 71 00 	lds	r31, 0x0071
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	80 83       	st	Z, r24

/*Comment!:initializing Ports Value  */
*DIO_u8Ports[DIO_u8PORT0] =(DIO_u8PORTA_DIR & DIO_u8PORTA_VAL) | ((~DIO_u8PORTA_DIR)&*DIO_u8Ports[DIO_u8PORT0] );
 44a:	a0 91 62 00 	lds	r26, 0x0062
 44e:	b0 91 63 00 	lds	r27, 0x0063
 452:	e0 91 62 00 	lds	r30, 0x0062
 456:	f0 91 63 00 	lds	r31, 0x0063
 45a:	80 81       	ld	r24, Z
 45c:	8c 93       	st	X, r24
*DIO_u8Ports[DIO_u8PORT1] =(DIO_u8PORTB_DIR & DIO_u8PORTB_VAL)| ((~DIO_u8PORTB_DIR)&*DIO_u8Ports[DIO_u8PORT1] );
 45e:	a0 91 64 00 	lds	r26, 0x0064
 462:	b0 91 65 00 	lds	r27, 0x0065
 466:	e0 91 64 00 	lds	r30, 0x0064
 46a:	f0 91 65 00 	lds	r31, 0x0065
 46e:	80 81       	ld	r24, Z
 470:	8c 93       	st	X, r24
*DIO_u8Ports[DIO_u8PORT2] =(DIO_u8PORTC_DIR & DIO_u8PORTC_VAL)| ((~DIO_u8PORTC_DIR)&*DIO_u8Ports[DIO_u8PORT2] );
 472:	e0 91 66 00 	lds	r30, 0x0066
 476:	f0 91 67 00 	lds	r31, 0x0067
 47a:	10 82       	st	Z, r1
*DIO_u8Ports[DIO_u8PORT3] =(DIO_u8PORTD_DIR & DIO_u8PORTD_VAL)| ((~DIO_u8PORTD_DIR)&*DIO_u8Ports[DIO_u8PORT3] );
 47c:	e0 91 68 00 	lds	r30, 0x0068
 480:	f0 91 69 00 	lds	r31, 0x0069
 484:	10 82       	st	Z, r1

}
 486:	cf 91       	pop	r28
 488:	df 91       	pop	r29
 48a:	08 95       	ret

0000048c <DIO_u8ReadPinVal>:


extern u8 DIO_u8ReadPinVal(u8 Copy_u8PinIdx,u8* Copy_u8PtrToval)
{
 48c:	df 93       	push	r29
 48e:	cf 93       	push	r28
 490:	00 d0       	rcall	.+0      	; 0x492 <DIO_u8ReadPinVal+0x6>
 492:	00 d0       	rcall	.+0      	; 0x494 <DIO_u8ReadPinVal+0x8>
 494:	00 d0       	rcall	.+0      	; 0x496 <DIO_u8ReadPinVal+0xa>
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	8c 83       	std	Y+4, r24	; 0x04
 49c:	7e 83       	std	Y+6, r23	; 0x06
 49e:	6d 83       	std	Y+5, r22	; 0x05

	 u8 Local_u8CheckPinState=ok ;
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8PinIdx<DIO_u8PINMAXIDX)
 4a4:	8c 81       	ldd	r24, Y+4	; 0x04
 4a6:	8f 31       	cpi	r24, 0x1F	; 31
 4a8:	80 f5       	brcc	.+96     	; 0x50a <DIO_u8ReadPinVal+0x7e>
	    {

		u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
 4aa:	8c 81       	ldd	r24, Y+4	; 0x04
 4ac:	86 95       	lsr	r24
 4ae:	86 95       	lsr	r24
 4b0:	86 95       	lsr	r24
 4b2:	8a 83       	std	Y+2, r24	; 0x02
		u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
 4b4:	8c 81       	ldd	r24, Y+4	; 0x04
 4b6:	87 70       	andi	r24, 0x07	; 7
 4b8:	89 83       	std	Y+1, r24	; 0x01

		* Copy_u8PtrToval=get_bit(*DIO_u8Pins[local_u8CheckPinPlace],local_u8MapPin);
 4ba:	8a 81       	ldd	r24, Y+2	; 0x02
 4bc:	88 2f       	mov	r24, r24
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	fc 01       	movw	r30, r24
 4c6:	ee 58       	subi	r30, 0x8E	; 142
 4c8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ca:	01 90       	ld	r0, Z+
 4cc:	f0 81       	ld	r31, Z
 4ce:	e0 2d       	mov	r30, r0
 4d0:	80 81       	ld	r24, Z
 4d2:	48 2f       	mov	r20, r24
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	89 81       	ldd	r24, Y+1	; 0x01
 4d8:	28 2f       	mov	r18, r24
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_u8ReadPinVal+0x5a>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	2a 95       	dec	r18
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_u8ReadPinVal+0x56>
 4ea:	9a 01       	movw	r18, r20
 4ec:	28 23       	and	r18, r24
 4ee:	39 23       	and	r19, r25
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
 4f2:	88 2f       	mov	r24, r24
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	a9 01       	movw	r20, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_u8ReadPinVal+0x72>
 4fa:	55 95       	asr	r21
 4fc:	47 95       	ror	r20
 4fe:	8a 95       	dec	r24
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_u8ReadPinVal+0x6e>
 502:	ca 01       	movw	r24, r20
 504:	ed 81       	ldd	r30, Y+5	; 0x05
 506:	fe 81       	ldd	r31, Y+6	; 0x06
 508:	80 83       	st	Z, r24
    }
    else
    {

    }
return    Local_u8CheckPinState=ok ;
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	8b 83       	std	Y+3, r24	; 0x03
 50e:	8b 81       	ldd	r24, Y+3	; 0x03
}
 510:	26 96       	adiw	r28, 0x06	; 6
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	de bf       	out	0x3e, r29	; 62
 518:	0f be       	out	0x3f, r0	; 63
 51a:	cd bf       	out	0x3d, r28	; 61
 51c:	cf 91       	pop	r28
 51e:	df 91       	pop	r29
 520:	08 95       	ret

00000522 <DIO_u8WritePinVal>:

extern u8 DIO_u8WritePinVal(u8 Copy_u8PinIdx,u8 Copy_u8Pinval)
{
 522:	df 93       	push	r29
 524:	cf 93       	push	r28
 526:	00 d0       	rcall	.+0      	; 0x528 <DIO_u8WritePinVal+0x6>
 528:	00 d0       	rcall	.+0      	; 0x52a <DIO_u8WritePinVal+0x8>
 52a:	00 d0       	rcall	.+0      	; 0x52c <DIO_u8WritePinVal+0xa>
 52c:	cd b7       	in	r28, 0x3d	; 61
 52e:	de b7       	in	r29, 0x3e	; 62
 530:	8d 83       	std	Y+5, r24	; 0x05
 532:	6e 83       	std	Y+6, r22	; 0x06
	 u8 Local_u8CheckPinState=ok ;
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	8c 83       	std	Y+4, r24	; 0x04

	    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
 538:	8d 81       	ldd	r24, Y+5	; 0x05
 53a:	80 32       	cpi	r24, 0x20	; 32
 53c:	10 f0       	brcs	.+4      	; 0x542 <DIO_u8WritePinVal+0x20>
	    {
	    	 Local_u8CheckPinState=error ;
 53e:	1c 82       	std	Y+4, r1	; 0x04
 540:	64 c0       	rjmp	.+200    	; 0x60a <DIO_u8WritePinVal+0xe8>
	    }
	    else
	    {
	    	 u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
 542:	8d 81       	ldd	r24, Y+5	; 0x05
 544:	86 95       	lsr	r24
 546:	86 95       	lsr	r24
 548:	86 95       	lsr	r24
 54a:	8b 83       	std	Y+3, r24	; 0x03
	    		 u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
 54c:	8d 81       	ldd	r24, Y+5	; 0x05
 54e:	87 70       	andi	r24, 0x07	; 7
 550:	8a 83       	std	Y+2, r24	; 0x02
	    	     u8 local_u8PinDir;
	    	     local_u8PinDir=get_bit(*DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin);
 552:	8b 81       	ldd	r24, Y+3	; 0x03
 554:	88 2f       	mov	r24, r24
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	fc 01       	movw	r30, r24
 55e:	e6 59       	subi	r30, 0x96	; 150
 560:	ff 4f       	sbci	r31, 0xFF	; 255
 562:	01 90       	ld	r0, Z+
 564:	f0 81       	ld	r31, Z
 566:	e0 2d       	mov	r30, r0
 568:	80 81       	ld	r24, Z
 56a:	48 2f       	mov	r20, r24
 56c:	50 e0       	ldi	r21, 0x00	; 0
 56e:	8a 81       	ldd	r24, Y+2	; 0x02
 570:	28 2f       	mov	r18, r24
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_u8WritePinVal+0x5c>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	2a 95       	dec	r18
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_u8WritePinVal+0x58>
 582:	9a 01       	movw	r18, r20
 584:	28 23       	and	r18, r24
 586:	39 23       	and	r19, r25
 588:	8a 81       	ldd	r24, Y+2	; 0x02
 58a:	88 2f       	mov	r24, r24
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	a9 01       	movw	r20, r18
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_u8WritePinVal+0x74>
 592:	55 95       	asr	r21
 594:	47 95       	ror	r20
 596:	8a 95       	dec	r24
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_u8WritePinVal+0x70>
 59a:	ca 01       	movw	r24, r20
 59c:	89 83       	std	Y+1, r24	; 0x01
	    	if(local_u8PinDir==1)
 59e:	89 81       	ldd	r24, Y+1	; 0x01
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	99 f5       	brne	.+102    	; 0x60a <DIO_u8WritePinVal+0xe8>
	    	{
	    	assign_bit(*DIO_u8Ports[local_u8CheckPinPlace],local_u8MapPin,Copy_u8Pinval);
 5a4:	8b 81       	ldd	r24, Y+3	; 0x03
 5a6:	88 2f       	mov	r24, r24
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	fc 01       	movw	r30, r24
 5b0:	ee 59       	subi	r30, 0x9E	; 158
 5b2:	ff 4f       	sbci	r31, 0xFF	; 255
 5b4:	a0 81       	ld	r26, Z
 5b6:	b1 81       	ldd	r27, Z+1	; 0x01
 5b8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ba:	28 2f       	mov	r18, r24
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_u8WritePinVal+0xa6>
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	2a 95       	dec	r18
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_u8WritePinVal+0xa2>
 5cc:	28 2f       	mov	r18, r24
 5ce:	20 95       	com	r18
 5d0:	8b 81       	ldd	r24, Y+3	; 0x03
 5d2:	88 2f       	mov	r24, r24
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	fc 01       	movw	r30, r24
 5dc:	ee 59       	subi	r30, 0x9E	; 158
 5de:	ff 4f       	sbci	r31, 0xFF	; 255
 5e0:	01 90       	ld	r0, Z+
 5e2:	f0 81       	ld	r31, Z
 5e4:	e0 2d       	mov	r30, r0
 5e6:	80 81       	ld	r24, Z
 5e8:	42 2f       	mov	r20, r18
 5ea:	48 23       	and	r20, r24
 5ec:	8e 81       	ldd	r24, Y+6	; 0x06
 5ee:	28 2f       	mov	r18, r24
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	8a 81       	ldd	r24, Y+2	; 0x02
 5f4:	88 2f       	mov	r24, r24
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	b9 01       	movw	r22, r18
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_u8WritePinVal+0xde>
 5fc:	66 0f       	add	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	8a 95       	dec	r24
 602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_u8WritePinVal+0xda>
 604:	cb 01       	movw	r24, r22
 606:	84 2b       	or	r24, r20
 608:	8c 93       	st	X, r24
	    	{

	    	}
	    }

     return  Local_u8CheckPinState ;
 60a:	8c 81       	ldd	r24, Y+4	; 0x04
}
 60c:	26 96       	adiw	r28, 0x06	; 6
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	f8 94       	cli
 612:	de bf       	out	0x3e, r29	; 62
 614:	0f be       	out	0x3f, r0	; 63
 616:	cd bf       	out	0x3d, r28	; 61
 618:	cf 91       	pop	r28
 61a:	df 91       	pop	r29
 61c:	08 95       	ret

0000061e <DIO_u8ReadPortVal>:


extern u8 DIO_u8ReadPortVal(u8 Copy_u8PortIdx,u8* Copy_u8PtrToval)
{
 61e:	df 93       	push	r29
 620:	cf 93       	push	r28
 622:	00 d0       	rcall	.+0      	; 0x624 <DIO_u8ReadPortVal+0x6>
 624:	00 d0       	rcall	.+0      	; 0x626 <DIO_u8ReadPortVal+0x8>
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
 62a:	8a 83       	std	Y+2, r24	; 0x02
 62c:	7c 83       	std	Y+4, r23	; 0x04
 62e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CheckPortR=ok ;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
 634:	8a 81       	ldd	r24, Y+2	; 0x02
 636:	84 30       	cpi	r24, 0x04	; 4
 638:	80 f4       	brcc	.+32     	; 0x65a <DIO_u8ReadPortVal+0x3c>
	{

	* Copy_u8PtrToval=*DIO_u8Pins[Copy_u8PortIdx] ;
 63a:	8a 81       	ldd	r24, Y+2	; 0x02
 63c:	88 2f       	mov	r24, r24
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	fc 01       	movw	r30, r24
 646:	ee 58       	subi	r30, 0x8E	; 142
 648:	ff 4f       	sbci	r31, 0xFF	; 255
 64a:	01 90       	ld	r0, Z+
 64c:	f0 81       	ld	r31, Z
 64e:	e0 2d       	mov	r30, r0
 650:	80 81       	ld	r24, Z
 652:	eb 81       	ldd	r30, Y+3	; 0x03
 654:	fc 81       	ldd	r31, Y+4	; 0x04
 656:	80 83       	st	Z, r24
 658:	01 c0       	rjmp	.+2      	; 0x65c <DIO_u8ReadPortVal+0x3e>
	}
	else
	{
		Local_u8CheckPortR=error ;
 65a:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8CheckPortR ;
 65c:	89 81       	ldd	r24, Y+1	; 0x01
}
 65e:	0f 90       	pop	r0
 660:	0f 90       	pop	r0
 662:	0f 90       	pop	r0
 664:	0f 90       	pop	r0
 666:	cf 91       	pop	r28
 668:	df 91       	pop	r29
 66a:	08 95       	ret

0000066c <DIO_u8WritePortVal>:

extern u8 DIO_u8WritePortVal(u8 Copy_u8PortIdx,u8 Copy_u8Portval)
{
 66c:	df 93       	push	r29
 66e:	cf 93       	push	r28
 670:	00 d0       	rcall	.+0      	; 0x672 <DIO_u8WritePortVal+0x6>
 672:	00 d0       	rcall	.+0      	; 0x674 <DIO_u8WritePortVal+0x8>
 674:	cd b7       	in	r28, 0x3d	; 61
 676:	de b7       	in	r29, 0x3e	; 62
 678:	8b 83       	std	Y+3, r24	; 0x03
 67a:	6c 83       	std	Y+4, r22	; 0x04
     	u8 Local_u8CheckPortR=ok ;
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	8a 83       	std	Y+2, r24	; 0x02
        u8 local_u8PortDir;
		if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
 680:	8b 81       	ldd	r24, Y+3	; 0x03
 682:	84 30       	cpi	r24, 0x04	; 4
 684:	f0 f4       	brcc	.+60     	; 0x6c2 <DIO_u8WritePortVal+0x56>
		{
				local_u8PortDir=*DIO_u8Ddrs[Copy_u8PortIdx] ;
 686:	8b 81       	ldd	r24, Y+3	; 0x03
 688:	88 2f       	mov	r24, r24
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	fc 01       	movw	r30, r24
 692:	e6 59       	subi	r30, 0x96	; 150
 694:	ff 4f       	sbci	r31, 0xFF	; 255
 696:	01 90       	ld	r0, Z+
 698:	f0 81       	ld	r31, Z
 69a:	e0 2d       	mov	r30, r0
 69c:	80 81       	ld	r24, Z
 69e:	89 83       	std	Y+1, r24	; 0x01
			  if(local_u8PortDir==0xff)
 6a0:	89 81       	ldd	r24, Y+1	; 0x01
 6a2:	8f 3f       	cpi	r24, 0xFF	; 255
 6a4:	79 f4       	brne	.+30     	; 0x6c4 <DIO_u8WritePortVal+0x58>
			  {
		        *DIO_u8Ports[Copy_u8PortIdx]= Copy_u8Portval;
 6a6:	8b 81       	ldd	r24, Y+3	; 0x03
 6a8:	88 2f       	mov	r24, r24
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	fc 01       	movw	r30, r24
 6b2:	ee 59       	subi	r30, 0x9E	; 158
 6b4:	ff 4f       	sbci	r31, 0xFF	; 255
 6b6:	01 90       	ld	r0, Z+
 6b8:	f0 81       	ld	r31, Z
 6ba:	e0 2d       	mov	r30, r0
 6bc:	8c 81       	ldd	r24, Y+4	; 0x04
 6be:	80 83       	st	Z, r24
 6c0:	01 c0       	rjmp	.+2      	; 0x6c4 <DIO_u8WritePortVal+0x58>

			  }
		}
		else
		{
			Local_u8CheckPortR=error ;
 6c2:	1a 82       	std	Y+2, r1	; 0x02
		}

		return Local_u8CheckPortR ;
 6c4:	8a 81       	ldd	r24, Y+2	; 0x02
}
 6c6:	0f 90       	pop	r0
 6c8:	0f 90       	pop	r0
 6ca:	0f 90       	pop	r0
 6cc:	0f 90       	pop	r0
 6ce:	cf 91       	pop	r28
 6d0:	df 91       	pop	r29
 6d2:	08 95       	ret

000006d4 <DIO_u8WritePinDir>:

extern u8 DIO_u8WritePinDir(u8 Copy_u8PinIdx,u8 Copy_u8PinDir)
{
 6d4:	df 93       	push	r29
 6d6:	cf 93       	push	r28
 6d8:	00 d0       	rcall	.+0      	; 0x6da <DIO_u8WritePinDir+0x6>
 6da:	00 d0       	rcall	.+0      	; 0x6dc <DIO_u8WritePinDir+0x8>
 6dc:	0f 92       	push	r0
 6de:	cd b7       	in	r28, 0x3d	; 61
 6e0:	de b7       	in	r29, 0x3e	; 62
 6e2:	8c 83       	std	Y+4, r24	; 0x04
 6e4:	6d 83       	std	Y+5, r22	; 0x05
	     u8 Local_u8CheckPinState=ok ;
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	8b 83       	std	Y+3, r24	; 0x03

		    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
 6ea:	8c 81       	ldd	r24, Y+4	; 0x04
 6ec:	80 32       	cpi	r24, 0x20	; 32
 6ee:	10 f0       	brcs	.+4      	; 0x6f4 <DIO_u8WritePinDir+0x20>
		    {
		    	 Local_u8CheckPinState=error ;
 6f0:	1b 82       	std	Y+3, r1	; 0x03
 6f2:	3b c0       	rjmp	.+118    	; 0x76a <DIO_u8WritePinDir+0x96>
		    }
		    else
		    {
		    	u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
 6f4:	8c 81       	ldd	r24, Y+4	; 0x04
 6f6:	86 95       	lsr	r24
 6f8:	86 95       	lsr	r24
 6fa:	86 95       	lsr	r24
 6fc:	8a 83       	std	Y+2, r24	; 0x02
		    	u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
 6fe:	8c 81       	ldd	r24, Y+4	; 0x04
 700:	87 70       	andi	r24, 0x07	; 7
 702:	89 83       	std	Y+1, r24	; 0x01
		    	assign_bit(* DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin,Copy_u8PinDir);
 704:	8a 81       	ldd	r24, Y+2	; 0x02
 706:	88 2f       	mov	r24, r24
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	88 0f       	add	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	fc 01       	movw	r30, r24
 710:	e6 59       	subi	r30, 0x96	; 150
 712:	ff 4f       	sbci	r31, 0xFF	; 255
 714:	a0 81       	ld	r26, Z
 716:	b1 81       	ldd	r27, Z+1	; 0x01
 718:	89 81       	ldd	r24, Y+1	; 0x01
 71a:	28 2f       	mov	r18, r24
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	02 c0       	rjmp	.+4      	; 0x728 <DIO_u8WritePinDir+0x54>
 724:	88 0f       	add	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	2a 95       	dec	r18
 72a:	e2 f7       	brpl	.-8      	; 0x724 <DIO_u8WritePinDir+0x50>
 72c:	28 2f       	mov	r18, r24
 72e:	20 95       	com	r18
 730:	8a 81       	ldd	r24, Y+2	; 0x02
 732:	88 2f       	mov	r24, r24
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	fc 01       	movw	r30, r24
 73c:	e6 59       	subi	r30, 0x96	; 150
 73e:	ff 4f       	sbci	r31, 0xFF	; 255
 740:	01 90       	ld	r0, Z+
 742:	f0 81       	ld	r31, Z
 744:	e0 2d       	mov	r30, r0
 746:	80 81       	ld	r24, Z
 748:	42 2f       	mov	r20, r18
 74a:	48 23       	and	r20, r24
 74c:	8d 81       	ldd	r24, Y+5	; 0x05
 74e:	28 2f       	mov	r18, r24
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	89 81       	ldd	r24, Y+1	; 0x01
 754:	88 2f       	mov	r24, r24
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	b9 01       	movw	r22, r18
 75a:	02 c0       	rjmp	.+4      	; 0x760 <DIO_u8WritePinDir+0x8c>
 75c:	66 0f       	add	r22, r22
 75e:	77 1f       	adc	r23, r23
 760:	8a 95       	dec	r24
 762:	e2 f7       	brpl	.-8      	; 0x75c <DIO_u8WritePinDir+0x88>
 764:	cb 01       	movw	r24, r22
 766:	84 2b       	or	r24, r20
 768:	8c 93       	st	X, r24
		    }

	     return  Local_u8CheckPinState ;
 76a:	8b 81       	ldd	r24, Y+3	; 0x03
}
 76c:	0f 90       	pop	r0
 76e:	0f 90       	pop	r0
 770:	0f 90       	pop	r0
 772:	0f 90       	pop	r0
 774:	0f 90       	pop	r0
 776:	cf 91       	pop	r28
 778:	df 91       	pop	r29
 77a:	08 95       	ret

0000077c <DIO_u8WritePortDir>:

extern u8 DIO_u8WritePortDir(u8 Copy_u8PortIdx,u8 Copy_u8PortDir)
{
 77c:	df 93       	push	r29
 77e:	cf 93       	push	r28
 780:	00 d0       	rcall	.+0      	; 0x782 <DIO_u8WritePortDir+0x6>
 782:	0f 92       	push	r0
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62
 788:	8a 83       	std	Y+2, r24	; 0x02
 78a:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8CheckPortR=ok ;
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	89 83       	std	Y+1, r24	; 0x01

			if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
 790:	8a 81       	ldd	r24, Y+2	; 0x02
 792:	84 30       	cpi	r24, 0x04	; 4
 794:	70 f4       	brcc	.+28     	; 0x7b2 <DIO_u8WritePortDir+0x36>
			{

			*DIO_u8Ddrs[Copy_u8PortIdx]= Copy_u8PortDir;
 796:	8a 81       	ldd	r24, Y+2	; 0x02
 798:	88 2f       	mov	r24, r24
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	fc 01       	movw	r30, r24
 7a2:	e6 59       	subi	r30, 0x96	; 150
 7a4:	ff 4f       	sbci	r31, 0xFF	; 255
 7a6:	01 90       	ld	r0, Z+
 7a8:	f0 81       	ld	r31, Z
 7aa:	e0 2d       	mov	r30, r0
 7ac:	8b 81       	ldd	r24, Y+3	; 0x03
 7ae:	80 83       	st	Z, r24
 7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <DIO_u8WritePortDir+0x38>
			}
			else
			{
				Local_u8CheckPortR=error ;
 7b2:	19 82       	std	Y+1, r1	; 0x01
			}

			return Local_u8CheckPortR ;
 7b4:	89 81       	ldd	r24, Y+1	; 0x01
}
 7b6:	0f 90       	pop	r0
 7b8:	0f 90       	pop	r0
 7ba:	0f 90       	pop	r0
 7bc:	cf 91       	pop	r28
 7be:	df 91       	pop	r29
 7c0:	08 95       	ret

000007c2 <DIO_u8ReadPinDir>:

extern u8 DIO_u8ReadPinDir(u8 Copy_u8PinIdx,u8 * Copy_u8PtrToDir)
{
 7c2:	df 93       	push	r29
 7c4:	cf 93       	push	r28
 7c6:	00 d0       	rcall	.+0      	; 0x7c8 <DIO_u8ReadPinDir+0x6>
 7c8:	00 d0       	rcall	.+0      	; 0x7ca <DIO_u8ReadPinDir+0x8>
 7ca:	00 d0       	rcall	.+0      	; 0x7cc <DIO_u8ReadPinDir+0xa>
 7cc:	cd b7       	in	r28, 0x3d	; 61
 7ce:	de b7       	in	r29, 0x3e	; 62
 7d0:	8c 83       	std	Y+4, r24	; 0x04
 7d2:	7e 83       	std	Y+6, r23	; 0x06
 7d4:	6d 83       	std	Y+5, r22	; 0x05
	 u8 Local_u8CheckPinState=ok ;
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	8b 83       	std	Y+3, r24	; 0x03


	    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
 7da:	8c 81       	ldd	r24, Y+4	; 0x04
 7dc:	80 32       	cpi	r24, 0x20	; 32
 7de:	10 f0       	brcs	.+4      	; 0x7e4 <DIO_u8ReadPinDir+0x22>
	    {
	    	 Local_u8CheckPinState=error ;
 7e0:	1b 82       	std	Y+3, r1	; 0x03
 7e2:	30 c0       	rjmp	.+96     	; 0x844 <DIO_u8ReadPinDir+0x82>
	    }
	    else
	    {
	    	u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS;
 7e4:	8c 81       	ldd	r24, Y+4	; 0x04
 7e6:	86 95       	lsr	r24
 7e8:	86 95       	lsr	r24
 7ea:	86 95       	lsr	r24
 7ec:	8a 83       	std	Y+2, r24	; 0x02
	    		 u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
 7ee:	8c 81       	ldd	r24, Y+4	; 0x04
 7f0:	87 70       	andi	r24, 0x07	; 7
 7f2:	89 83       	std	Y+1, r24	; 0x01
	    	* Copy_u8PtrToDir=get_bit(*DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin);
 7f4:	8a 81       	ldd	r24, Y+2	; 0x02
 7f6:	88 2f       	mov	r24, r24
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	88 0f       	add	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	fc 01       	movw	r30, r24
 800:	e6 59       	subi	r30, 0x96	; 150
 802:	ff 4f       	sbci	r31, 0xFF	; 255
 804:	01 90       	ld	r0, Z+
 806:	f0 81       	ld	r31, Z
 808:	e0 2d       	mov	r30, r0
 80a:	80 81       	ld	r24, Z
 80c:	48 2f       	mov	r20, r24
 80e:	50 e0       	ldi	r21, 0x00	; 0
 810:	89 81       	ldd	r24, Y+1	; 0x01
 812:	28 2f       	mov	r18, r24
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	02 c0       	rjmp	.+4      	; 0x820 <DIO_u8ReadPinDir+0x5e>
 81c:	88 0f       	add	r24, r24
 81e:	99 1f       	adc	r25, r25
 820:	2a 95       	dec	r18
 822:	e2 f7       	brpl	.-8      	; 0x81c <DIO_u8ReadPinDir+0x5a>
 824:	9a 01       	movw	r18, r20
 826:	28 23       	and	r18, r24
 828:	39 23       	and	r19, r25
 82a:	89 81       	ldd	r24, Y+1	; 0x01
 82c:	88 2f       	mov	r24, r24
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	a9 01       	movw	r20, r18
 832:	02 c0       	rjmp	.+4      	; 0x838 <DIO_u8ReadPinDir+0x76>
 834:	55 95       	asr	r21
 836:	47 95       	ror	r20
 838:	8a 95       	dec	r24
 83a:	e2 f7       	brpl	.-8      	; 0x834 <DIO_u8ReadPinDir+0x72>
 83c:	ca 01       	movw	r24, r20
 83e:	ed 81       	ldd	r30, Y+5	; 0x05
 840:	fe 81       	ldd	r31, Y+6	; 0x06
 842:	80 83       	st	Z, r24
	    }
	return  Local_u8CheckPinState ;
 844:	8b 81       	ldd	r24, Y+3	; 0x03
}
 846:	26 96       	adiw	r28, 0x06	; 6
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	f8 94       	cli
 84c:	de bf       	out	0x3e, r29	; 62
 84e:	0f be       	out	0x3f, r0	; 63
 850:	cd bf       	out	0x3d, r28	; 61
 852:	cf 91       	pop	r28
 854:	df 91       	pop	r29
 856:	08 95       	ret

00000858 <DIO_u8ReadPortDir>:

extern u8 DIO_u8ReadPortDir(u8 Copy_u8PortIdx,u8 *Copy_u8PtrToDir)
{
 858:	df 93       	push	r29
 85a:	cf 93       	push	r28
 85c:	00 d0       	rcall	.+0      	; 0x85e <DIO_u8ReadPortDir+0x6>
 85e:	00 d0       	rcall	.+0      	; 0x860 <__stack+0x1>
 860:	cd b7       	in	r28, 0x3d	; 61
 862:	de b7       	in	r29, 0x3e	; 62
 864:	8a 83       	std	Y+2, r24	; 0x02
 866:	7c 83       	std	Y+4, r23	; 0x04
 868:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CheckPortR=ok ;
 86a:	81 e0       	ldi	r24, 0x01	; 1
 86c:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
 86e:	8a 81       	ldd	r24, Y+2	; 0x02
 870:	84 30       	cpi	r24, 0x04	; 4
 872:	80 f4       	brcc	.+32     	; 0x894 <__stack+0x35>
		{

		* Copy_u8PtrToDir=*DIO_u8Pins[Copy_u8PortIdx] ;
 874:	8a 81       	ldd	r24, Y+2	; 0x02
 876:	88 2f       	mov	r24, r24
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	88 0f       	add	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	fc 01       	movw	r30, r24
 880:	ee 58       	subi	r30, 0x8E	; 142
 882:	ff 4f       	sbci	r31, 0xFF	; 255
 884:	01 90       	ld	r0, Z+
 886:	f0 81       	ld	r31, Z
 888:	e0 2d       	mov	r30, r0
 88a:	80 81       	ld	r24, Z
 88c:	eb 81       	ldd	r30, Y+3	; 0x03
 88e:	fc 81       	ldd	r31, Y+4	; 0x04
 890:	80 83       	st	Z, r24
 892:	01 c0       	rjmp	.+2      	; 0x896 <__stack+0x37>
		}
		else
		{
			Local_u8CheckPortR=error ;
 894:	19 82       	std	Y+1, r1	; 0x01
		}

		return Local_u8CheckPortR ;
 896:	89 81       	ldd	r24, Y+1	; 0x01
}
 898:	0f 90       	pop	r0
 89a:	0f 90       	pop	r0
 89c:	0f 90       	pop	r0
 89e:	0f 90       	pop	r0
 8a0:	cf 91       	pop	r28
 8a2:	df 91       	pop	r29
 8a4:	08 95       	ret

000008a6 <main>:

#include"DIO-interface.h"
#include"ADC_interface.h"

void main ()
{
 8a6:	df 93       	push	r29
 8a8:	cf 93       	push	r28
 8aa:	00 d0       	rcall	.+0      	; 0x8ac <main+0x6>
 8ac:	0f 92       	push	r0
 8ae:	cd b7       	in	r28, 0x3d	; 61
 8b0:	de b7       	in	r29, 0x3e	; 62
	u16 x ;
	u8 f=1;
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidInit();
 8b6:	0e 94 0b 02 	call	0x416	; 0x416 <DIO_voidInit>
	ADC_voidInit();
 8ba:	0e 94 41 00 	call	0x82	; 0x82 <ADC_voidInit>
	ADC_voidEnable();
 8be:	0e 94 5b 00 	call	0xb6	; 0xb6 <ADC_voidEnable>
while(1)
{

	ADC_u8ReadCh_SSht(0,&x) ;
 8c2:	9e 01       	movw	r18, r28
 8c4:	2e 5f       	subi	r18, 0xFE	; 254
 8c6:	3f 4f       	sbci	r19, 0xFF	; 255
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	b9 01       	movw	r22, r18
 8cc:	0e 94 77 00 	call	0xee	; 0xee <ADC_u8ReadCh_SSht>
	if(f==1)
 8d0:	89 81       	ldd	r24, Y+1	; 0x01
 8d2:	81 30       	cpi	r24, 0x01	; 1
 8d4:	b1 f7       	brne	.-20     	; 0x8c2 <main+0x1c>
	{
if(x<220)
 8d6:	8a 81       	ldd	r24, Y+2	; 0x02
 8d8:	9b 81       	ldd	r25, Y+3	; 0x03
 8da:	8c 3d       	cpi	r24, 0xDC	; 220
 8dc:	91 05       	cpc	r25, r1
 8de:	30 f4       	brcc	.+12     	; 0x8ec <main+0x46>
{
	DIO_u8WritePinVal(16,1);
 8e0:	80 e1       	ldi	r24, 0x10	; 16
 8e2:	61 e0       	ldi	r22, 0x01	; 1
 8e4:	0e 94 91 02 	call	0x522	; 0x522 <DIO_u8WritePinVal>
f=0;
 8e8:	19 82       	std	Y+1, r1	; 0x01
 8ea:	eb cf       	rjmp	.-42     	; 0x8c2 <main+0x1c>
}
else
{
	DIO_u8WritePinVal(16,0);
 8ec:	80 e1       	ldi	r24, 0x10	; 16
 8ee:	60 e0       	ldi	r22, 0x00	; 0
 8f0:	0e 94 91 02 	call	0x522	; 0x522 <DIO_u8WritePinVal>
 8f4:	e6 cf       	rjmp	.-52     	; 0x8c2 <main+0x1c>

000008f6 <_exit>:
 8f6:	f8 94       	cli

000008f8 <__stop_program>:
 8f8:	ff cf       	rjmp	.-2      	; 0x8f8 <__stop_program>
