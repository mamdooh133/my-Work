
nrf1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000298a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000298a  00002a1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800072  00800072  00002a30  2**0
                  ALLOC
  3 .stab         00001c2c  00000000  00000000  00002a30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d70  00000000  00000000  0000465c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000053cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000552c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000056bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007700  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008801  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009784  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009904  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a454  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      8a:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <main>:
#define LEDOUT PC5
#define LEDOUTPAUSE 300

//main here
int main(void)
{
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	c8 5b       	subi	r28, 0xB8	; 184
     cac:	d0 40       	sbci	r29, 0x00	; 0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
	mirf_init();
     cb8:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <mirf_init>
     cbc:	fe 01       	movw	r30, r28
     cbe:	ed 54       	subi	r30, 0x4D	; 77
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	a8 e4       	ldi	r26, 0x48	; 72
     cc8:	b2 e4       	ldi	r27, 0x42	; 66
     cca:	80 83       	st	Z, r24
     ccc:	91 83       	std	Z+1, r25	; 0x01
     cce:	a2 83       	std	Z+2, r26	; 0x02
     cd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd2:	8e 01       	movw	r16, r28
     cd4:	01 55       	subi	r16, 0x51	; 81
     cd6:	1f 4f       	sbci	r17, 0xFF	; 255
     cd8:	fe 01       	movw	r30, r28
     cda:	ed 54       	subi	r30, 0x4D	; 77
     cdc:	ff 4f       	sbci	r31, 0xFF	; 255
     cde:	60 81       	ld	r22, Z
     ce0:	71 81       	ldd	r23, Z+1	; 0x01
     ce2:	82 81       	ldd	r24, Z+2	; 0x02
     ce4:	93 81       	ldd	r25, Z+3	; 0x03
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	4a e7       	ldi	r20, 0x7A	; 122
     cec:	53 e4       	ldi	r21, 0x43	; 67
     cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	f8 01       	movw	r30, r16
     cf8:	80 83       	st	Z, r24
     cfa:	91 83       	std	Z+1, r25	; 0x01
     cfc:	a2 83       	std	Z+2, r26	; 0x02
     cfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d00:	fe 01       	movw	r30, r28
     d02:	e1 55       	subi	r30, 0x51	; 81
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	60 81       	ld	r22, Z
     d08:	71 81       	ldd	r23, Z+1	; 0x01
     d0a:	82 81       	ldd	r24, Z+2	; 0x02
     d0c:	93 81       	ldd	r25, Z+3	; 0x03
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	40 e8       	ldi	r20, 0x80	; 128
     d14:	5f e3       	ldi	r21, 0x3F	; 63
     d16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d1a:	88 23       	and	r24, r24
     d1c:	44 f4       	brge	.+16     	; 0xd2e <main+0x90>
		__ticks = 1;
     d1e:	fe 01       	movw	r30, r28
     d20:	e3 55       	subi	r30, 0x53	; 83
     d22:	ff 4f       	sbci	r31, 0xFF	; 255
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	91 83       	std	Z+1, r25	; 0x01
     d2a:	80 83       	st	Z, r24
     d2c:	64 c0       	rjmp	.+200    	; 0xdf6 <main+0x158>
	else if (__tmp > 65535)
     d2e:	fe 01       	movw	r30, r28
     d30:	e1 55       	subi	r30, 0x51	; 81
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	60 81       	ld	r22, Z
     d36:	71 81       	ldd	r23, Z+1	; 0x01
     d38:	82 81       	ldd	r24, Z+2	; 0x02
     d3a:	93 81       	ldd	r25, Z+3	; 0x03
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	3f ef       	ldi	r19, 0xFF	; 255
     d40:	4f e7       	ldi	r20, 0x7F	; 127
     d42:	57 e4       	ldi	r21, 0x47	; 71
     d44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d48:	18 16       	cp	r1, r24
     d4a:	0c f0       	brlt	.+2      	; 0xd4e <main+0xb0>
     d4c:	43 c0       	rjmp	.+134    	; 0xdd4 <main+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4e:	fe 01       	movw	r30, r28
     d50:	ed 54       	subi	r30, 0x4D	; 77
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	60 81       	ld	r22, Z
     d56:	71 81       	ldd	r23, Z+1	; 0x01
     d58:	82 81       	ldd	r24, Z+2	; 0x02
     d5a:	93 81       	ldd	r25, Z+3	; 0x03
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e2       	ldi	r20, 0x20	; 32
     d62:	51 e4       	ldi	r21, 0x41	; 65
     d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	8e 01       	movw	r16, r28
     d6e:	03 55       	subi	r16, 0x53	; 83
     d70:	1f 4f       	sbci	r17, 0xFF	; 255
     d72:	bc 01       	movw	r22, r24
     d74:	cd 01       	movw	r24, r26
     d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	f8 01       	movw	r30, r16
     d80:	91 83       	std	Z+1, r25	; 0x01
     d82:	80 83       	st	Z, r24
     d84:	1f c0       	rjmp	.+62     	; 0xdc4 <main+0x126>
     d86:	fe 01       	movw	r30, r28
     d88:	e5 55       	subi	r30, 0x55	; 85
     d8a:	ff 4f       	sbci	r31, 0xFF	; 255
     d8c:	89 e1       	ldi	r24, 0x19	; 25
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	91 83       	std	Z+1, r25	; 0x01
     d92:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d94:	fe 01       	movw	r30, r28
     d96:	e5 55       	subi	r30, 0x55	; 85
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	80 81       	ld	r24, Z
     d9c:	91 81       	ldd	r25, Z+1	; 0x01
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <main+0x100>
     da2:	fe 01       	movw	r30, r28
     da4:	e5 55       	subi	r30, 0x55	; 85
     da6:	ff 4f       	sbci	r31, 0xFF	; 255
     da8:	91 83       	std	Z+1, r25	; 0x01
     daa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dac:	de 01       	movw	r26, r28
     dae:	a3 55       	subi	r26, 0x53	; 83
     db0:	bf 4f       	sbci	r27, 0xFF	; 255
     db2:	fe 01       	movw	r30, r28
     db4:	e3 55       	subi	r30, 0x53	; 83
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	80 81       	ld	r24, Z
     dba:	91 81       	ldd	r25, Z+1	; 0x01
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	9c 93       	st	X, r25
     dc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc4:	fe 01       	movw	r30, r28
     dc6:	e3 55       	subi	r30, 0x53	; 83
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	80 81       	ld	r24, Z
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	d1 f6       	brne	.-76     	; 0xd86 <main+0xe8>
     dd2:	27 c0       	rjmp	.+78     	; 0xe22 <main+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd4:	8e 01       	movw	r16, r28
     dd6:	03 55       	subi	r16, 0x53	; 83
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	fe 01       	movw	r30, r28
     ddc:	e1 55       	subi	r30, 0x51	; 81
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	60 81       	ld	r22, Z
     de2:	71 81       	ldd	r23, Z+1	; 0x01
     de4:	82 81       	ldd	r24, Z+2	; 0x02
     de6:	93 81       	ldd	r25, Z+3	; 0x03
     de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	f8 01       	movw	r30, r16
     df2:	91 83       	std	Z+1, r25	; 0x01
     df4:	80 83       	st	Z, r24
     df6:	de 01       	movw	r26, r28
     df8:	a7 55       	subi	r26, 0x57	; 87
     dfa:	bf 4f       	sbci	r27, 0xFF	; 255
     dfc:	fe 01       	movw	r30, r28
     dfe:	e3 55       	subi	r30, 0x53	; 83
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	8d 93       	st	X+, r24
     e08:	9c 93       	st	X, r25
     e0a:	fe 01       	movw	r30, r28
     e0c:	e7 55       	subi	r30, 0x57	; 87
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	80 81       	ld	r24, Z
     e12:	91 81       	ldd	r25, Z+1	; 0x01
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	f1 f7       	brne	.-4      	; 0xe14 <main+0x176>
     e18:	fe 01       	movw	r30, r28
     e1a:	e7 55       	subi	r30, 0x57	; 87
     e1c:	ff 4f       	sbci	r31, 0xFF	; 255
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	80 83       	st	Z, r24
	_delay_ms(50);

	DDRC &= ~(1<<BUTTONROLE) | ~(1<<BUTTONSEND);
     e22:	a4 e3       	ldi	r26, 0x34	; 52
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e4 e3       	ldi	r30, 0x34	; 52
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	8c 93       	st	X, r24
	DDRC |= (1<<LEDOUT);
     e2e:	a4 e3       	ldi	r26, 0x34	; 52
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e4 e3       	ldi	r30, 0x34	; 52
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	80 62       	ori	r24, 0x20	; 32
     e3a:	8c 93       	st	X, r24
	PORTC &= ~(1<<LEDOUT);
     e3c:	a5 e3       	ldi	r26, 0x35	; 53
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e5 e3       	ldi	r30, 0x35	; 53
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8f 7d       	andi	r24, 0xDF	; 223
     e48:	8c 93       	st	X, r24

	//uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );

	sei();
     e4a:	78 94       	sei

	mirf_config();
     e4c:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <mirf_config>

	mirf_set_rxaddr(0, rxaddr);
     e50:	28 e6       	ldi	r18, 0x68	; 104
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	b9 01       	movw	r22, r18
     e58:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <mirf_set_rxaddr>
	mirf_set_txaddr(txaddr);
     e5c:	8d e6       	ldi	r24, 0x6D	; 109
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 41 10 	call	0x2082	; 0x2082 <mirf_set_txaddr>

	if ((PINC & (1<<BUTTONROLE)) == 0)
     e64:	e3 e3       	ldi	r30, 0x33	; 51
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 2f       	mov	r24, r24
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	81 70       	andi	r24, 0x01	; 1
     e70:	90 70       	andi	r25, 0x00	; 0
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	19 f4       	brne	.+6      	; 0xe7c <main+0x1de>
		txrxrole = ROLERX;
     e76:	10 92 72 00 	sts	0x0072, r1
     e7a:	03 c0       	rjmp	.+6      	; 0xe82 <main+0x1e4>
	else
		txrxrole = ROLETX;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	80 93 72 00 	sts	0x0072, r24

	if(txrxrole == ROLETX) {
     e82:	80 91 72 00 	lds	r24, 0x0072
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	09 f0       	breq	.+2      	; 0xe8c <main+0x1ee>
     e8a:	76 c1       	rjmp	.+748    	; 0x1178 <main+0x4da>
		PORTC |= (1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
     e8c:	a5 e3       	ldi	r26, 0x35	; 53
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e5 e3       	ldi	r30, 0x35	; 53
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	80 62       	ori	r24, 0x20	; 32
     e98:	8c 93       	st	X, r24
     e9a:	fe 01       	movw	r30, r28
     e9c:	eb 55       	subi	r30, 0x5B	; 91
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	a6 e9       	ldi	r26, 0x96	; 150
     ea6:	b3 e4       	ldi	r27, 0x43	; 67
     ea8:	80 83       	st	Z, r24
     eaa:	91 83       	std	Z+1, r25	; 0x01
     eac:	a2 83       	std	Z+2, r26	; 0x02
     eae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb0:	8e 01       	movw	r16, r28
     eb2:	0f 55       	subi	r16, 0x5F	; 95
     eb4:	1f 4f       	sbci	r17, 0xFF	; 255
     eb6:	fe 01       	movw	r30, r28
     eb8:	eb 55       	subi	r30, 0x5B	; 91
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	60 81       	ld	r22, Z
     ebe:	71 81       	ldd	r23, Z+1	; 0x01
     ec0:	82 81       	ldd	r24, Z+2	; 0x02
     ec2:	93 81       	ldd	r25, Z+3	; 0x03
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	4a e7       	ldi	r20, 0x7A	; 122
     eca:	53 e4       	ldi	r21, 0x43	; 67
     ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	f8 01       	movw	r30, r16
     ed6:	80 83       	st	Z, r24
     ed8:	91 83       	std	Z+1, r25	; 0x01
     eda:	a2 83       	std	Z+2, r26	; 0x02
     edc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ede:	fe 01       	movw	r30, r28
     ee0:	ef 55       	subi	r30, 0x5F	; 95
     ee2:	ff 4f       	sbci	r31, 0xFF	; 255
     ee4:	60 81       	ld	r22, Z
     ee6:	71 81       	ldd	r23, Z+1	; 0x01
     ee8:	82 81       	ldd	r24, Z+2	; 0x02
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	40 e8       	ldi	r20, 0x80	; 128
     ef2:	5f e3       	ldi	r21, 0x3F	; 63
     ef4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ef8:	88 23       	and	r24, r24
     efa:	44 f4       	brge	.+16     	; 0xf0c <main+0x26e>
		__ticks = 1;
     efc:	fe 01       	movw	r30, r28
     efe:	e1 56       	subi	r30, 0x61	; 97
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	91 83       	std	Z+1, r25	; 0x01
     f08:	80 83       	st	Z, r24
     f0a:	64 c0       	rjmp	.+200    	; 0xfd4 <main+0x336>
	else if (__tmp > 65535)
     f0c:	fe 01       	movw	r30, r28
     f0e:	ef 55       	subi	r30, 0x5F	; 95
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	60 81       	ld	r22, Z
     f14:	71 81       	ldd	r23, Z+1	; 0x01
     f16:	82 81       	ldd	r24, Z+2	; 0x02
     f18:	93 81       	ldd	r25, Z+3	; 0x03
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	3f ef       	ldi	r19, 0xFF	; 255
     f1e:	4f e7       	ldi	r20, 0x7F	; 127
     f20:	57 e4       	ldi	r21, 0x47	; 71
     f22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f26:	18 16       	cp	r1, r24
     f28:	0c f0       	brlt	.+2      	; 0xf2c <main+0x28e>
     f2a:	43 c0       	rjmp	.+134    	; 0xfb2 <main+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2c:	fe 01       	movw	r30, r28
     f2e:	eb 55       	subi	r30, 0x5B	; 91
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	60 81       	ld	r22, Z
     f34:	71 81       	ldd	r23, Z+1	; 0x01
     f36:	82 81       	ldd	r24, Z+2	; 0x02
     f38:	93 81       	ldd	r25, Z+3	; 0x03
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	40 e2       	ldi	r20, 0x20	; 32
     f40:	51 e4       	ldi	r21, 0x41	; 65
     f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	8e 01       	movw	r16, r28
     f4c:	01 56       	subi	r16, 0x61	; 97
     f4e:	1f 4f       	sbci	r17, 0xFF	; 255
     f50:	bc 01       	movw	r22, r24
     f52:	cd 01       	movw	r24, r26
     f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	f8 01       	movw	r30, r16
     f5e:	91 83       	std	Z+1, r25	; 0x01
     f60:	80 83       	st	Z, r24
     f62:	1f c0       	rjmp	.+62     	; 0xfa2 <main+0x304>
     f64:	fe 01       	movw	r30, r28
     f66:	e3 56       	subi	r30, 0x63	; 99
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	89 e1       	ldi	r24, 0x19	; 25
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	91 83       	std	Z+1, r25	; 0x01
     f70:	80 83       	st	Z, r24
     f72:	fe 01       	movw	r30, r28
     f74:	e3 56       	subi	r30, 0x63	; 99
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	80 81       	ld	r24, Z
     f7a:	91 81       	ldd	r25, Z+1	; 0x01
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <main+0x2de>
     f80:	fe 01       	movw	r30, r28
     f82:	e3 56       	subi	r30, 0x63	; 99
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	91 83       	std	Z+1, r25	; 0x01
     f88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8a:	de 01       	movw	r26, r28
     f8c:	a1 56       	subi	r26, 0x61	; 97
     f8e:	bf 4f       	sbci	r27, 0xFF	; 255
     f90:	fe 01       	movw	r30, r28
     f92:	e1 56       	subi	r30, 0x61	; 97
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	11 96       	adiw	r26, 0x01	; 1
     f9e:	9c 93       	st	X, r25
     fa0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa2:	fe 01       	movw	r30, r28
     fa4:	e1 56       	subi	r30, 0x61	; 97
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	80 81       	ld	r24, Z
     faa:	91 81       	ldd	r25, Z+1	; 0x01
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	d1 f6       	brne	.-76     	; 0xf64 <main+0x2c6>
     fb0:	27 c0       	rjmp	.+78     	; 0x1000 <main+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb2:	8e 01       	movw	r16, r28
     fb4:	01 56       	subi	r16, 0x61	; 97
     fb6:	1f 4f       	sbci	r17, 0xFF	; 255
     fb8:	fe 01       	movw	r30, r28
     fba:	ef 55       	subi	r30, 0x5F	; 95
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	60 81       	ld	r22, Z
     fc0:	71 81       	ldd	r23, Z+1	; 0x01
     fc2:	82 81       	ldd	r24, Z+2	; 0x02
     fc4:	93 81       	ldd	r25, Z+3	; 0x03
     fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	f8 01       	movw	r30, r16
     fd0:	91 83       	std	Z+1, r25	; 0x01
     fd2:	80 83       	st	Z, r24
     fd4:	de 01       	movw	r26, r28
     fd6:	a5 56       	subi	r26, 0x65	; 101
     fd8:	bf 4f       	sbci	r27, 0xFF	; 255
     fda:	fe 01       	movw	r30, r28
     fdc:	e1 56       	subi	r30, 0x61	; 97
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	80 81       	ld	r24, Z
     fe2:	91 81       	ldd	r25, Z+1	; 0x01
     fe4:	8d 93       	st	X+, r24
     fe6:	9c 93       	st	X, r25
     fe8:	fe 01       	movw	r30, r28
     fea:	e5 56       	subi	r30, 0x65	; 101
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	80 81       	ld	r24, Z
     ff0:	91 81       	ldd	r25, Z+1	; 0x01
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <main+0x354>
     ff6:	fe 01       	movw	r30, r28
     ff8:	e5 56       	subi	r30, 0x65	; 101
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	80 83       	st	Z, r24
		PORTC &= ~(1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
    1000:	a5 e3       	ldi	r26, 0x35	; 53
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e3       	ldi	r30, 0x35	; 53
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8f 7d       	andi	r24, 0xDF	; 223
    100c:	8c 93       	st	X, r24
    100e:	fe 01       	movw	r30, r28
    1010:	e9 56       	subi	r30, 0x69	; 105
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	a6 e9       	ldi	r26, 0x96	; 150
    101a:	b3 e4       	ldi	r27, 0x43	; 67
    101c:	80 83       	st	Z, r24
    101e:	91 83       	std	Z+1, r25	; 0x01
    1020:	a2 83       	std	Z+2, r26	; 0x02
    1022:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1024:	8e 01       	movw	r16, r28
    1026:	0d 56       	subi	r16, 0x6D	; 109
    1028:	1f 4f       	sbci	r17, 0xFF	; 255
    102a:	fe 01       	movw	r30, r28
    102c:	e9 56       	subi	r30, 0x69	; 105
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	60 81       	ld	r22, Z
    1032:	71 81       	ldd	r23, Z+1	; 0x01
    1034:	82 81       	ldd	r24, Z+2	; 0x02
    1036:	93 81       	ldd	r25, Z+3	; 0x03
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	4a e7       	ldi	r20, 0x7A	; 122
    103e:	53 e4       	ldi	r21, 0x43	; 67
    1040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	f8 01       	movw	r30, r16
    104a:	80 83       	st	Z, r24
    104c:	91 83       	std	Z+1, r25	; 0x01
    104e:	a2 83       	std	Z+2, r26	; 0x02
    1050:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1052:	fe 01       	movw	r30, r28
    1054:	ed 56       	subi	r30, 0x6D	; 109
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	60 81       	ld	r22, Z
    105a:	71 81       	ldd	r23, Z+1	; 0x01
    105c:	82 81       	ldd	r24, Z+2	; 0x02
    105e:	93 81       	ldd	r25, Z+3	; 0x03
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e8       	ldi	r20, 0x80	; 128
    1066:	5f e3       	ldi	r21, 0x3F	; 63
    1068:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    106c:	88 23       	and	r24, r24
    106e:	44 f4       	brge	.+16     	; 0x1080 <main+0x3e2>
		__ticks = 1;
    1070:	fe 01       	movw	r30, r28
    1072:	ef 56       	subi	r30, 0x6F	; 111
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	91 83       	std	Z+1, r25	; 0x01
    107c:	80 83       	st	Z, r24
    107e:	64 c0       	rjmp	.+200    	; 0x1148 <main+0x4aa>
	else if (__tmp > 65535)
    1080:	fe 01       	movw	r30, r28
    1082:	ed 56       	subi	r30, 0x6D	; 109
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	60 81       	ld	r22, Z
    1088:	71 81       	ldd	r23, Z+1	; 0x01
    108a:	82 81       	ldd	r24, Z+2	; 0x02
    108c:	93 81       	ldd	r25, Z+3	; 0x03
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	3f ef       	ldi	r19, 0xFF	; 255
    1092:	4f e7       	ldi	r20, 0x7F	; 127
    1094:	57 e4       	ldi	r21, 0x47	; 71
    1096:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    109a:	18 16       	cp	r1, r24
    109c:	0c f0       	brlt	.+2      	; 0x10a0 <main+0x402>
    109e:	43 c0       	rjmp	.+134    	; 0x1126 <main+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a0:	fe 01       	movw	r30, r28
    10a2:	e9 56       	subi	r30, 0x69	; 105
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	60 81       	ld	r22, Z
    10a8:	71 81       	ldd	r23, Z+1	; 0x01
    10aa:	82 81       	ldd	r24, Z+2	; 0x02
    10ac:	93 81       	ldd	r25, Z+3	; 0x03
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e2       	ldi	r20, 0x20	; 32
    10b4:	51 e4       	ldi	r21, 0x41	; 65
    10b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	8e 01       	movw	r16, r28
    10c0:	0f 56       	subi	r16, 0x6F	; 111
    10c2:	1f 4f       	sbci	r17, 0xFF	; 255
    10c4:	bc 01       	movw	r22, r24
    10c6:	cd 01       	movw	r24, r26
    10c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	f8 01       	movw	r30, r16
    10d2:	91 83       	std	Z+1, r25	; 0x01
    10d4:	80 83       	st	Z, r24
    10d6:	1f c0       	rjmp	.+62     	; 0x1116 <main+0x478>
    10d8:	fe 01       	movw	r30, r28
    10da:	e1 57       	subi	r30, 0x71	; 113
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	89 e1       	ldi	r24, 0x19	; 25
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	91 83       	std	Z+1, r25	; 0x01
    10e4:	80 83       	st	Z, r24
    10e6:	fe 01       	movw	r30, r28
    10e8:	e1 57       	subi	r30, 0x71	; 113
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <main+0x452>
    10f4:	fe 01       	movw	r30, r28
    10f6:	e1 57       	subi	r30, 0x71	; 113
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	91 83       	std	Z+1, r25	; 0x01
    10fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fe:	de 01       	movw	r26, r28
    1100:	af 56       	subi	r26, 0x6F	; 111
    1102:	bf 4f       	sbci	r27, 0xFF	; 255
    1104:	fe 01       	movw	r30, r28
    1106:	ef 56       	subi	r30, 0x6F	; 111
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	80 81       	ld	r24, Z
    110c:	91 81       	ldd	r25, Z+1	; 0x01
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	11 96       	adiw	r26, 0x01	; 1
    1112:	9c 93       	st	X, r25
    1114:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1116:	fe 01       	movw	r30, r28
    1118:	ef 56       	subi	r30, 0x6F	; 111
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	80 81       	ld	r24, Z
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	d1 f6       	brne	.-76     	; 0x10d8 <main+0x43a>
    1124:	17 c3       	rjmp	.+1582   	; 0x1754 <main+0xab6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1126:	8e 01       	movw	r16, r28
    1128:	0f 56       	subi	r16, 0x6F	; 111
    112a:	1f 4f       	sbci	r17, 0xFF	; 255
    112c:	fe 01       	movw	r30, r28
    112e:	ed 56       	subi	r30, 0x6D	; 109
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	60 81       	ld	r22, Z
    1134:	71 81       	ldd	r23, Z+1	; 0x01
    1136:	82 81       	ldd	r24, Z+2	; 0x02
    1138:	93 81       	ldd	r25, Z+3	; 0x03
    113a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	f8 01       	movw	r30, r16
    1144:	91 83       	std	Z+1, r25	; 0x01
    1146:	80 83       	st	Z, r24
    1148:	de 01       	movw	r26, r28
    114a:	a3 57       	subi	r26, 0x73	; 115
    114c:	bf 4f       	sbci	r27, 0xFF	; 255
    114e:	fe 01       	movw	r30, r28
    1150:	ef 56       	subi	r30, 0x6F	; 111
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	80 81       	ld	r24, Z
    1156:	91 81       	ldd	r25, Z+1	; 0x01
    1158:	11 96       	adiw	r26, 0x01	; 1
    115a:	9c 93       	st	X, r25
    115c:	8e 93       	st	-X, r24
    115e:	fe 01       	movw	r30, r28
    1160:	e3 57       	subi	r30, 0x73	; 115
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	80 81       	ld	r24, Z
    1166:	91 81       	ldd	r25, Z+1	; 0x01
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	f1 f7       	brne	.-4      	; 0x1168 <main+0x4ca>
    116c:	fe 01       	movw	r30, r28
    116e:	e3 57       	subi	r30, 0x73	; 115
    1170:	ff 4f       	sbci	r31, 0xFF	; 255
    1172:	91 83       	std	Z+1, r25	; 0x01
    1174:	80 83       	st	Z, r24
    1176:	ee c2       	rjmp	.+1500   	; 0x1754 <main+0xab6>
	} else if(txrxrole == ROLERX) {
    1178:	80 91 72 00 	lds	r24, 0x0072
    117c:	88 23       	and	r24, r24
    117e:	09 f0       	breq	.+2      	; 0x1182 <main+0x4e4>
    1180:	e9 c2       	rjmp	.+1490   	; 0x1754 <main+0xab6>
		PORTC |= (1 << LEDOUT); _delay_ms(LEDOUTPAUSE);
    1182:	a5 e3       	ldi	r26, 0x35	; 53
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e5 e3       	ldi	r30, 0x35	; 53
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	80 62       	ori	r24, 0x20	; 32
    118e:	8c 93       	st	X, r24
    1190:	fe 01       	movw	r30, r28
    1192:	e7 57       	subi	r30, 0x77	; 119
    1194:	ff 4f       	sbci	r31, 0xFF	; 255
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	a6 e9       	ldi	r26, 0x96	; 150
    119c:	b3 e4       	ldi	r27, 0x43	; 67
    119e:	80 83       	st	Z, r24
    11a0:	91 83       	std	Z+1, r25	; 0x01
    11a2:	a2 83       	std	Z+2, r26	; 0x02
    11a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a6:	8e 01       	movw	r16, r28
    11a8:	0b 57       	subi	r16, 0x7B	; 123
    11aa:	1f 4f       	sbci	r17, 0xFF	; 255
    11ac:	fe 01       	movw	r30, r28
    11ae:	e7 57       	subi	r30, 0x77	; 119
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	60 81       	ld	r22, Z
    11b4:	71 81       	ldd	r23, Z+1	; 0x01
    11b6:	82 81       	ldd	r24, Z+2	; 0x02
    11b8:	93 81       	ldd	r25, Z+3	; 0x03
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	4a e7       	ldi	r20, 0x7A	; 122
    11c0:	53 e4       	ldi	r21, 0x43	; 67
    11c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	f8 01       	movw	r30, r16
    11cc:	80 83       	st	Z, r24
    11ce:	91 83       	std	Z+1, r25	; 0x01
    11d0:	a2 83       	std	Z+2, r26	; 0x02
    11d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11d4:	fe 01       	movw	r30, r28
    11d6:	eb 57       	subi	r30, 0x7B	; 123
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	60 81       	ld	r22, Z
    11dc:	71 81       	ldd	r23, Z+1	; 0x01
    11de:	82 81       	ldd	r24, Z+2	; 0x02
    11e0:	93 81       	ldd	r25, Z+3	; 0x03
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e8       	ldi	r20, 0x80	; 128
    11e8:	5f e3       	ldi	r21, 0x3F	; 63
    11ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11ee:	88 23       	and	r24, r24
    11f0:	44 f4       	brge	.+16     	; 0x1202 <main+0x564>
		__ticks = 1;
    11f2:	fe 01       	movw	r30, r28
    11f4:	ed 57       	subi	r30, 0x7D	; 125
    11f6:	ff 4f       	sbci	r31, 0xFF	; 255
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	91 83       	std	Z+1, r25	; 0x01
    11fe:	80 83       	st	Z, r24
    1200:	64 c0       	rjmp	.+200    	; 0x12ca <main+0x62c>
	else if (__tmp > 65535)
    1202:	fe 01       	movw	r30, r28
    1204:	eb 57       	subi	r30, 0x7B	; 123
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	60 81       	ld	r22, Z
    120a:	71 81       	ldd	r23, Z+1	; 0x01
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	93 81       	ldd	r25, Z+3	; 0x03
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	3f ef       	ldi	r19, 0xFF	; 255
    1214:	4f e7       	ldi	r20, 0x7F	; 127
    1216:	57 e4       	ldi	r21, 0x47	; 71
    1218:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    121c:	18 16       	cp	r1, r24
    121e:	0c f0       	brlt	.+2      	; 0x1222 <main+0x584>
    1220:	43 c0       	rjmp	.+134    	; 0x12a8 <main+0x60a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1222:	fe 01       	movw	r30, r28
    1224:	e7 57       	subi	r30, 0x77	; 119
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	60 81       	ld	r22, Z
    122a:	71 81       	ldd	r23, Z+1	; 0x01
    122c:	82 81       	ldd	r24, Z+2	; 0x02
    122e:	93 81       	ldd	r25, Z+3	; 0x03
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e2       	ldi	r20, 0x20	; 32
    1236:	51 e4       	ldi	r21, 0x41	; 65
    1238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	8e 01       	movw	r16, r28
    1242:	0d 57       	subi	r16, 0x7D	; 125
    1244:	1f 4f       	sbci	r17, 0xFF	; 255
    1246:	bc 01       	movw	r22, r24
    1248:	cd 01       	movw	r24, r26
    124a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	f8 01       	movw	r30, r16
    1254:	91 83       	std	Z+1, r25	; 0x01
    1256:	80 83       	st	Z, r24
    1258:	1f c0       	rjmp	.+62     	; 0x1298 <main+0x5fa>
    125a:	fe 01       	movw	r30, r28
    125c:	ef 57       	subi	r30, 0x7F	; 127
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	89 e1       	ldi	r24, 0x19	; 25
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	91 83       	std	Z+1, r25	; 0x01
    1266:	80 83       	st	Z, r24
    1268:	fe 01       	movw	r30, r28
    126a:	ef 57       	subi	r30, 0x7F	; 127
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	80 81       	ld	r24, Z
    1270:	91 81       	ldd	r25, Z+1	; 0x01
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	f1 f7       	brne	.-4      	; 0x1272 <main+0x5d4>
    1276:	fe 01       	movw	r30, r28
    1278:	ef 57       	subi	r30, 0x7F	; 127
    127a:	ff 4f       	sbci	r31, 0xFF	; 255
    127c:	91 83       	std	Z+1, r25	; 0x01
    127e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1280:	de 01       	movw	r26, r28
    1282:	ad 57       	subi	r26, 0x7D	; 125
    1284:	bf 4f       	sbci	r27, 0xFF	; 255
    1286:	fe 01       	movw	r30, r28
    1288:	ed 57       	subi	r30, 0x7D	; 125
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	80 81       	ld	r24, Z
    128e:	91 81       	ldd	r25, Z+1	; 0x01
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	11 96       	adiw	r26, 0x01	; 1
    1294:	9c 93       	st	X, r25
    1296:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1298:	fe 01       	movw	r30, r28
    129a:	ed 57       	subi	r30, 0x7D	; 125
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	80 81       	ld	r24, Z
    12a0:	91 81       	ldd	r25, Z+1	; 0x01
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	d1 f6       	brne	.-76     	; 0x125a <main+0x5bc>
    12a6:	27 c0       	rjmp	.+78     	; 0x12f6 <main+0x658>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a8:	8e 01       	movw	r16, r28
    12aa:	0d 57       	subi	r16, 0x7D	; 125
    12ac:	1f 4f       	sbci	r17, 0xFF	; 255
    12ae:	fe 01       	movw	r30, r28
    12b0:	eb 57       	subi	r30, 0x7B	; 123
    12b2:	ff 4f       	sbci	r31, 0xFF	; 255
    12b4:	60 81       	ld	r22, Z
    12b6:	71 81       	ldd	r23, Z+1	; 0x01
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
    12ba:	93 81       	ldd	r25, Z+3	; 0x03
    12bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	f8 01       	movw	r30, r16
    12c6:	91 83       	std	Z+1, r25	; 0x01
    12c8:	80 83       	st	Z, r24
    12ca:	de 01       	movw	r26, r28
    12cc:	a1 58       	subi	r26, 0x81	; 129
    12ce:	bf 4f       	sbci	r27, 0xFF	; 255
    12d0:	fe 01       	movw	r30, r28
    12d2:	ed 57       	subi	r30, 0x7D	; 125
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	80 81       	ld	r24, Z
    12d8:	91 81       	ldd	r25, Z+1	; 0x01
    12da:	8d 93       	st	X+, r24
    12dc:	9c 93       	st	X, r25
    12de:	fe 01       	movw	r30, r28
    12e0:	e1 58       	subi	r30, 0x81	; 129
    12e2:	ff 4f       	sbci	r31, 0xFF	; 255
    12e4:	80 81       	ld	r24, Z
    12e6:	91 81       	ldd	r25, Z+1	; 0x01
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	f1 f7       	brne	.-4      	; 0x12e8 <main+0x64a>
    12ec:	fe 01       	movw	r30, r28
    12ee:	e1 58       	subi	r30, 0x81	; 129
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	80 83       	st	Z, r24
		PORTC &= ~(1 << LEDOUT); _delay_ms(LEDOUTPAUSE);
    12f6:	a5 e3       	ldi	r26, 0x35	; 53
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e5 e3       	ldi	r30, 0x35	; 53
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	8f 7d       	andi	r24, 0xDF	; 223
    1302:	8c 93       	st	X, r24
    1304:	fe 01       	movw	r30, r28
    1306:	e5 58       	subi	r30, 0x85	; 133
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	a6 e9       	ldi	r26, 0x96	; 150
    1310:	b3 e4       	ldi	r27, 0x43	; 67
    1312:	80 83       	st	Z, r24
    1314:	91 83       	std	Z+1, r25	; 0x01
    1316:	a2 83       	std	Z+2, r26	; 0x02
    1318:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131a:	8e 01       	movw	r16, r28
    131c:	09 58       	subi	r16, 0x89	; 137
    131e:	1f 4f       	sbci	r17, 0xFF	; 255
    1320:	fe 01       	movw	r30, r28
    1322:	e5 58       	subi	r30, 0x85	; 133
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	60 81       	ld	r22, Z
    1328:	71 81       	ldd	r23, Z+1	; 0x01
    132a:	82 81       	ldd	r24, Z+2	; 0x02
    132c:	93 81       	ldd	r25, Z+3	; 0x03
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	4a e7       	ldi	r20, 0x7A	; 122
    1334:	53 e4       	ldi	r21, 0x43	; 67
    1336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	f8 01       	movw	r30, r16
    1340:	80 83       	st	Z, r24
    1342:	91 83       	std	Z+1, r25	; 0x01
    1344:	a2 83       	std	Z+2, r26	; 0x02
    1346:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1348:	fe 01       	movw	r30, r28
    134a:	e9 58       	subi	r30, 0x89	; 137
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	60 81       	ld	r22, Z
    1350:	71 81       	ldd	r23, Z+1	; 0x01
    1352:	82 81       	ldd	r24, Z+2	; 0x02
    1354:	93 81       	ldd	r25, Z+3	; 0x03
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e8       	ldi	r20, 0x80	; 128
    135c:	5f e3       	ldi	r21, 0x3F	; 63
    135e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1362:	88 23       	and	r24, r24
    1364:	44 f4       	brge	.+16     	; 0x1376 <main+0x6d8>
		__ticks = 1;
    1366:	fe 01       	movw	r30, r28
    1368:	eb 58       	subi	r30, 0x8B	; 139
    136a:	ff 4f       	sbci	r31, 0xFF	; 255
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	91 83       	std	Z+1, r25	; 0x01
    1372:	80 83       	st	Z, r24
    1374:	64 c0       	rjmp	.+200    	; 0x143e <main+0x7a0>
	else if (__tmp > 65535)
    1376:	fe 01       	movw	r30, r28
    1378:	e9 58       	subi	r30, 0x89	; 137
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	60 81       	ld	r22, Z
    137e:	71 81       	ldd	r23, Z+1	; 0x01
    1380:	82 81       	ldd	r24, Z+2	; 0x02
    1382:	93 81       	ldd	r25, Z+3	; 0x03
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	3f ef       	ldi	r19, 0xFF	; 255
    1388:	4f e7       	ldi	r20, 0x7F	; 127
    138a:	57 e4       	ldi	r21, 0x47	; 71
    138c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1390:	18 16       	cp	r1, r24
    1392:	0c f0       	brlt	.+2      	; 0x1396 <main+0x6f8>
    1394:	43 c0       	rjmp	.+134    	; 0x141c <main+0x77e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1396:	fe 01       	movw	r30, r28
    1398:	e5 58       	subi	r30, 0x85	; 133
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	60 81       	ld	r22, Z
    139e:	71 81       	ldd	r23, Z+1	; 0x01
    13a0:	82 81       	ldd	r24, Z+2	; 0x02
    13a2:	93 81       	ldd	r25, Z+3	; 0x03
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	40 e2       	ldi	r20, 0x20	; 32
    13aa:	51 e4       	ldi	r21, 0x41	; 65
    13ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	8e 01       	movw	r16, r28
    13b6:	0b 58       	subi	r16, 0x8B	; 139
    13b8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ba:	bc 01       	movw	r22, r24
    13bc:	cd 01       	movw	r24, r26
    13be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	f8 01       	movw	r30, r16
    13c8:	91 83       	std	Z+1, r25	; 0x01
    13ca:	80 83       	st	Z, r24
    13cc:	1f c0       	rjmp	.+62     	; 0x140c <main+0x76e>
    13ce:	fe 01       	movw	r30, r28
    13d0:	ed 58       	subi	r30, 0x8D	; 141
    13d2:	ff 4f       	sbci	r31, 0xFF	; 255
    13d4:	89 e1       	ldi	r24, 0x19	; 25
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	91 83       	std	Z+1, r25	; 0x01
    13da:	80 83       	st	Z, r24
    13dc:	fe 01       	movw	r30, r28
    13de:	ed 58       	subi	r30, 0x8D	; 141
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	80 81       	ld	r24, Z
    13e4:	91 81       	ldd	r25, Z+1	; 0x01
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	f1 f7       	brne	.-4      	; 0x13e6 <main+0x748>
    13ea:	fe 01       	movw	r30, r28
    13ec:	ed 58       	subi	r30, 0x8D	; 141
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	91 83       	std	Z+1, r25	; 0x01
    13f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f4:	de 01       	movw	r26, r28
    13f6:	ab 58       	subi	r26, 0x8B	; 139
    13f8:	bf 4f       	sbci	r27, 0xFF	; 255
    13fa:	fe 01       	movw	r30, r28
    13fc:	eb 58       	subi	r30, 0x8B	; 139
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	80 81       	ld	r24, Z
    1402:	91 81       	ldd	r25, Z+1	; 0x01
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	11 96       	adiw	r26, 0x01	; 1
    1408:	9c 93       	st	X, r25
    140a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140c:	fe 01       	movw	r30, r28
    140e:	eb 58       	subi	r30, 0x8B	; 139
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	80 81       	ld	r24, Z
    1414:	91 81       	ldd	r25, Z+1	; 0x01
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	d1 f6       	brne	.-76     	; 0x13ce <main+0x730>
    141a:	27 c0       	rjmp	.+78     	; 0x146a <main+0x7cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141c:	8e 01       	movw	r16, r28
    141e:	0b 58       	subi	r16, 0x8B	; 139
    1420:	1f 4f       	sbci	r17, 0xFF	; 255
    1422:	fe 01       	movw	r30, r28
    1424:	e9 58       	subi	r30, 0x89	; 137
    1426:	ff 4f       	sbci	r31, 0xFF	; 255
    1428:	60 81       	ld	r22, Z
    142a:	71 81       	ldd	r23, Z+1	; 0x01
    142c:	82 81       	ldd	r24, Z+2	; 0x02
    142e:	93 81       	ldd	r25, Z+3	; 0x03
    1430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	f8 01       	movw	r30, r16
    143a:	91 83       	std	Z+1, r25	; 0x01
    143c:	80 83       	st	Z, r24
    143e:	de 01       	movw	r26, r28
    1440:	af 58       	subi	r26, 0x8F	; 143
    1442:	bf 4f       	sbci	r27, 0xFF	; 255
    1444:	fe 01       	movw	r30, r28
    1446:	eb 58       	subi	r30, 0x8B	; 139
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	80 81       	ld	r24, Z
    144c:	91 81       	ldd	r25, Z+1	; 0x01
    144e:	8d 93       	st	X+, r24
    1450:	9c 93       	st	X, r25
    1452:	fe 01       	movw	r30, r28
    1454:	ef 58       	subi	r30, 0x8F	; 143
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	80 81       	ld	r24, Z
    145a:	91 81       	ldd	r25, Z+1	; 0x01
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <main+0x7be>
    1460:	fe 01       	movw	r30, r28
    1462:	ef 58       	subi	r30, 0x8F	; 143
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	91 83       	std	Z+1, r25	; 0x01
    1468:	80 83       	st	Z, r24
		PORTC |= (1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
    146a:	a5 e3       	ldi	r26, 0x35	; 53
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e5 e3       	ldi	r30, 0x35	; 53
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 62       	ori	r24, 0x20	; 32
    1476:	8c 93       	st	X, r24
    1478:	fe 01       	movw	r30, r28
    147a:	e3 59       	subi	r30, 0x93	; 147
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a6 e9       	ldi	r26, 0x96	; 150
    1484:	b3 e4       	ldi	r27, 0x43	; 67
    1486:	80 83       	st	Z, r24
    1488:	91 83       	std	Z+1, r25	; 0x01
    148a:	a2 83       	std	Z+2, r26	; 0x02
    148c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148e:	8e 01       	movw	r16, r28
    1490:	07 59       	subi	r16, 0x97	; 151
    1492:	1f 4f       	sbci	r17, 0xFF	; 255
    1494:	fe 01       	movw	r30, r28
    1496:	e3 59       	subi	r30, 0x93	; 147
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	60 81       	ld	r22, Z
    149c:	71 81       	ldd	r23, Z+1	; 0x01
    149e:	82 81       	ldd	r24, Z+2	; 0x02
    14a0:	93 81       	ldd	r25, Z+3	; 0x03
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	4a e7       	ldi	r20, 0x7A	; 122
    14a8:	53 e4       	ldi	r21, 0x43	; 67
    14aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	f8 01       	movw	r30, r16
    14b4:	80 83       	st	Z, r24
    14b6:	91 83       	std	Z+1, r25	; 0x01
    14b8:	a2 83       	std	Z+2, r26	; 0x02
    14ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14bc:	fe 01       	movw	r30, r28
    14be:	e7 59       	subi	r30, 0x97	; 151
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	60 81       	ld	r22, Z
    14c4:	71 81       	ldd	r23, Z+1	; 0x01
    14c6:	82 81       	ldd	r24, Z+2	; 0x02
    14c8:	93 81       	ldd	r25, Z+3	; 0x03
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e8       	ldi	r20, 0x80	; 128
    14d0:	5f e3       	ldi	r21, 0x3F	; 63
    14d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14d6:	88 23       	and	r24, r24
    14d8:	44 f4       	brge	.+16     	; 0x14ea <main+0x84c>
		__ticks = 1;
    14da:	fe 01       	movw	r30, r28
    14dc:	e9 59       	subi	r30, 0x99	; 153
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	91 83       	std	Z+1, r25	; 0x01
    14e6:	80 83       	st	Z, r24
    14e8:	64 c0       	rjmp	.+200    	; 0x15b2 <main+0x914>
	else if (__tmp > 65535)
    14ea:	fe 01       	movw	r30, r28
    14ec:	e7 59       	subi	r30, 0x97	; 151
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	60 81       	ld	r22, Z
    14f2:	71 81       	ldd	r23, Z+1	; 0x01
    14f4:	82 81       	ldd	r24, Z+2	; 0x02
    14f6:	93 81       	ldd	r25, Z+3	; 0x03
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	3f ef       	ldi	r19, 0xFF	; 255
    14fc:	4f e7       	ldi	r20, 0x7F	; 127
    14fe:	57 e4       	ldi	r21, 0x47	; 71
    1500:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1504:	18 16       	cp	r1, r24
    1506:	0c f0       	brlt	.+2      	; 0x150a <main+0x86c>
    1508:	43 c0       	rjmp	.+134    	; 0x1590 <main+0x8f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150a:	fe 01       	movw	r30, r28
    150c:	e3 59       	subi	r30, 0x93	; 147
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	60 81       	ld	r22, Z
    1512:	71 81       	ldd	r23, Z+1	; 0x01
    1514:	82 81       	ldd	r24, Z+2	; 0x02
    1516:	93 81       	ldd	r25, Z+3	; 0x03
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 e2       	ldi	r20, 0x20	; 32
    151e:	51 e4       	ldi	r21, 0x41	; 65
    1520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	8e 01       	movw	r16, r28
    152a:	09 59       	subi	r16, 0x99	; 153
    152c:	1f 4f       	sbci	r17, 0xFF	; 255
    152e:	bc 01       	movw	r22, r24
    1530:	cd 01       	movw	r24, r26
    1532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	f8 01       	movw	r30, r16
    153c:	91 83       	std	Z+1, r25	; 0x01
    153e:	80 83       	st	Z, r24
    1540:	1f c0       	rjmp	.+62     	; 0x1580 <main+0x8e2>
    1542:	fe 01       	movw	r30, r28
    1544:	eb 59       	subi	r30, 0x9B	; 155
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	89 e1       	ldi	r24, 0x19	; 25
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	91 83       	std	Z+1, r25	; 0x01
    154e:	80 83       	st	Z, r24
    1550:	fe 01       	movw	r30, r28
    1552:	eb 59       	subi	r30, 0x9B	; 155
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	80 81       	ld	r24, Z
    1558:	91 81       	ldd	r25, Z+1	; 0x01
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <main+0x8bc>
    155e:	fe 01       	movw	r30, r28
    1560:	eb 59       	subi	r30, 0x9B	; 155
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	91 83       	std	Z+1, r25	; 0x01
    1566:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1568:	de 01       	movw	r26, r28
    156a:	a9 59       	subi	r26, 0x99	; 153
    156c:	bf 4f       	sbci	r27, 0xFF	; 255
    156e:	fe 01       	movw	r30, r28
    1570:	e9 59       	subi	r30, 0x99	; 153
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	80 81       	ld	r24, Z
    1576:	91 81       	ldd	r25, Z+1	; 0x01
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	11 96       	adiw	r26, 0x01	; 1
    157c:	9c 93       	st	X, r25
    157e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1580:	fe 01       	movw	r30, r28
    1582:	e9 59       	subi	r30, 0x99	; 153
    1584:	ff 4f       	sbci	r31, 0xFF	; 255
    1586:	80 81       	ld	r24, Z
    1588:	91 81       	ldd	r25, Z+1	; 0x01
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	d1 f6       	brne	.-76     	; 0x1542 <main+0x8a4>
    158e:	27 c0       	rjmp	.+78     	; 0x15de <main+0x940>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1590:	8e 01       	movw	r16, r28
    1592:	09 59       	subi	r16, 0x99	; 153
    1594:	1f 4f       	sbci	r17, 0xFF	; 255
    1596:	fe 01       	movw	r30, r28
    1598:	e7 59       	subi	r30, 0x97	; 151
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	60 81       	ld	r22, Z
    159e:	71 81       	ldd	r23, Z+1	; 0x01
    15a0:	82 81       	ldd	r24, Z+2	; 0x02
    15a2:	93 81       	ldd	r25, Z+3	; 0x03
    15a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	f8 01       	movw	r30, r16
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	80 83       	st	Z, r24
    15b2:	de 01       	movw	r26, r28
    15b4:	ad 59       	subi	r26, 0x9D	; 157
    15b6:	bf 4f       	sbci	r27, 0xFF	; 255
    15b8:	fe 01       	movw	r30, r28
    15ba:	e9 59       	subi	r30, 0x99	; 153
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	80 81       	ld	r24, Z
    15c0:	91 81       	ldd	r25, Z+1	; 0x01
    15c2:	8d 93       	st	X+, r24
    15c4:	9c 93       	st	X, r25
    15c6:	fe 01       	movw	r30, r28
    15c8:	ed 59       	subi	r30, 0x9D	; 157
    15ca:	ff 4f       	sbci	r31, 0xFF	; 255
    15cc:	80 81       	ld	r24, Z
    15ce:	91 81       	ldd	r25, Z+1	; 0x01
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <main+0x932>
    15d4:	fe 01       	movw	r30, r28
    15d6:	ed 59       	subi	r30, 0x9D	; 157
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	80 83       	st	Z, r24
		PORTC &= ~(1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
    15de:	a5 e3       	ldi	r26, 0x35	; 53
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e5 e3       	ldi	r30, 0x35	; 53
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	8f 7d       	andi	r24, 0xDF	; 223
    15ea:	8c 93       	st	X, r24
    15ec:	fe 01       	movw	r30, r28
    15ee:	e1 5a       	subi	r30, 0xA1	; 161
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	a6 e9       	ldi	r26, 0x96	; 150
    15f8:	b3 e4       	ldi	r27, 0x43	; 67
    15fa:	80 83       	st	Z, r24
    15fc:	91 83       	std	Z+1, r25	; 0x01
    15fe:	a2 83       	std	Z+2, r26	; 0x02
    1600:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1602:	8e 01       	movw	r16, r28
    1604:	05 5a       	subi	r16, 0xA5	; 165
    1606:	1f 4f       	sbci	r17, 0xFF	; 255
    1608:	fe 01       	movw	r30, r28
    160a:	e1 5a       	subi	r30, 0xA1	; 161
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	60 81       	ld	r22, Z
    1610:	71 81       	ldd	r23, Z+1	; 0x01
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	93 81       	ldd	r25, Z+3	; 0x03
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	4a e7       	ldi	r20, 0x7A	; 122
    161c:	53 e4       	ldi	r21, 0x43	; 67
    161e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	f8 01       	movw	r30, r16
    1628:	80 83       	st	Z, r24
    162a:	91 83       	std	Z+1, r25	; 0x01
    162c:	a2 83       	std	Z+2, r26	; 0x02
    162e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1630:	fe 01       	movw	r30, r28
    1632:	e5 5a       	subi	r30, 0xA5	; 165
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e8       	ldi	r20, 0x80	; 128
    1644:	5f e3       	ldi	r21, 0x3F	; 63
    1646:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    164a:	88 23       	and	r24, r24
    164c:	44 f4       	brge	.+16     	; 0x165e <main+0x9c0>
		__ticks = 1;
    164e:	fe 01       	movw	r30, r28
    1650:	e7 5a       	subi	r30, 0xA7	; 167
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	80 83       	st	Z, r24
    165c:	64 c0       	rjmp	.+200    	; 0x1726 <main+0xa88>
	else if (__tmp > 65535)
    165e:	fe 01       	movw	r30, r28
    1660:	e5 5a       	subi	r30, 0xA5	; 165
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	60 81       	ld	r22, Z
    1666:	71 81       	ldd	r23, Z+1	; 0x01
    1668:	82 81       	ldd	r24, Z+2	; 0x02
    166a:	93 81       	ldd	r25, Z+3	; 0x03
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	3f ef       	ldi	r19, 0xFF	; 255
    1670:	4f e7       	ldi	r20, 0x7F	; 127
    1672:	57 e4       	ldi	r21, 0x47	; 71
    1674:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1678:	18 16       	cp	r1, r24
    167a:	0c f0       	brlt	.+2      	; 0x167e <main+0x9e0>
    167c:	43 c0       	rjmp	.+134    	; 0x1704 <main+0xa66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167e:	fe 01       	movw	r30, r28
    1680:	e1 5a       	subi	r30, 0xA1	; 161
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	60 81       	ld	r22, Z
    1686:	71 81       	ldd	r23, Z+1	; 0x01
    1688:	82 81       	ldd	r24, Z+2	; 0x02
    168a:	93 81       	ldd	r25, Z+3	; 0x03
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	40 e2       	ldi	r20, 0x20	; 32
    1692:	51 e4       	ldi	r21, 0x41	; 65
    1694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	8e 01       	movw	r16, r28
    169e:	07 5a       	subi	r16, 0xA7	; 167
    16a0:	1f 4f       	sbci	r17, 0xFF	; 255
    16a2:	bc 01       	movw	r22, r24
    16a4:	cd 01       	movw	r24, r26
    16a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	f8 01       	movw	r30, r16
    16b0:	91 83       	std	Z+1, r25	; 0x01
    16b2:	80 83       	st	Z, r24
    16b4:	1f c0       	rjmp	.+62     	; 0x16f4 <main+0xa56>
    16b6:	fe 01       	movw	r30, r28
    16b8:	e9 5a       	subi	r30, 0xA9	; 169
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	89 e1       	ldi	r24, 0x19	; 25
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	91 83       	std	Z+1, r25	; 0x01
    16c2:	80 83       	st	Z, r24
    16c4:	fe 01       	movw	r30, r28
    16c6:	e9 5a       	subi	r30, 0xA9	; 169
    16c8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ca:	80 81       	ld	r24, Z
    16cc:	91 81       	ldd	r25, Z+1	; 0x01
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <main+0xa30>
    16d2:	fe 01       	movw	r30, r28
    16d4:	e9 5a       	subi	r30, 0xA9	; 169
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	91 83       	std	Z+1, r25	; 0x01
    16da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16dc:	de 01       	movw	r26, r28
    16de:	a7 5a       	subi	r26, 0xA7	; 167
    16e0:	bf 4f       	sbci	r27, 0xFF	; 255
    16e2:	fe 01       	movw	r30, r28
    16e4:	e7 5a       	subi	r30, 0xA7	; 167
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	80 81       	ld	r24, Z
    16ea:	91 81       	ldd	r25, Z+1	; 0x01
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	11 96       	adiw	r26, 0x01	; 1
    16f0:	9c 93       	st	X, r25
    16f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f4:	fe 01       	movw	r30, r28
    16f6:	e7 5a       	subi	r30, 0xA7	; 167
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	d1 f6       	brne	.-76     	; 0x16b6 <main+0xa18>
    1702:	28 c0       	rjmp	.+80     	; 0x1754 <main+0xab6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1704:	8e 01       	movw	r16, r28
    1706:	07 5a       	subi	r16, 0xA7	; 167
    1708:	1f 4f       	sbci	r17, 0xFF	; 255
    170a:	fe 01       	movw	r30, r28
    170c:	e5 5a       	subi	r30, 0xA5	; 165
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	60 81       	ld	r22, Z
    1712:	71 81       	ldd	r23, Z+1	; 0x01
    1714:	82 81       	ldd	r24, Z+2	; 0x02
    1716:	93 81       	ldd	r25, Z+3	; 0x03
    1718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	f8 01       	movw	r30, r16
    1722:	91 83       	std	Z+1, r25	; 0x01
    1724:	80 83       	st	Z, r24
    1726:	de 01       	movw	r26, r28
    1728:	ab 5a       	subi	r26, 0xAB	; 171
    172a:	bf 4f       	sbci	r27, 0xFF	; 255
    172c:	fe 01       	movw	r30, r28
    172e:	e7 5a       	subi	r30, 0xA7	; 167
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	80 81       	ld	r24, Z
    1734:	91 81       	ldd	r25, Z+1	; 0x01
    1736:	11 96       	adiw	r26, 0x01	; 1
    1738:	9c 93       	st	X, r25
    173a:	8e 93       	st	-X, r24
    173c:	fe 01       	movw	r30, r28
    173e:	eb 5a       	subi	r30, 0xAB	; 171
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	80 81       	ld	r24, Z
    1744:	91 81       	ldd	r25, Z+1	; 0x01
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <main+0xaa8>
    174a:	fe 01       	movw	r30, r28
    174c:	eb 5a       	subi	r30, 0xAB	; 171
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	91 83       	std	Z+1, r25	; 0x01
    1752:	80 83       	st	Z, r24
	}

	for(int i=0; i<buffersize; i++)
    1754:	fe 01       	movw	r30, r28
    1756:	e9 54       	subi	r30, 0x49	; 73
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	11 82       	std	Z+1, r1	; 0x01
    175c:	10 82       	st	Z, r1
    175e:	28 c0       	rjmp	.+80     	; 0x17b0 <main+0xb12>
		if(txrxrole == 1)
    1760:	80 91 72 00 	lds	r24, 0x0072
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	79 f4       	brne	.+30     	; 0x1786 <main+0xae8>
			buffer[i] = i+10;
    1768:	fe 01       	movw	r30, r28
    176a:	e9 54       	subi	r30, 0x49	; 73
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	20 81       	ld	r18, Z
    1770:	31 81       	ldd	r19, Z+1	; 0x01
    1772:	fe 01       	movw	r30, r28
    1774:	e9 54       	subi	r30, 0x49	; 73
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 81       	ld	r24, Z
    177a:	86 5f       	subi	r24, 0xF6	; 246
    177c:	f9 01       	movw	r30, r18
    177e:	ed 58       	subi	r30, 0x8D	; 141
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	80 83       	st	Z, r24
    1784:	09 c0       	rjmp	.+18     	; 0x1798 <main+0xafa>
		else
			buffer[i] = 0;
    1786:	fe 01       	movw	r30, r28
    1788:	e9 54       	subi	r30, 0x49	; 73
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	80 81       	ld	r24, Z
    178e:	91 81       	ldd	r25, Z+1	; 0x01
    1790:	fc 01       	movw	r30, r24
    1792:	ed 58       	subi	r30, 0x8D	; 141
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	10 82       	st	Z, r1
		PORTC &= ~(1 << LEDOUT); _delay_ms(LEDOUTPAUSE);
		PORTC |= (1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
		PORTC &= ~(1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
	}

	for(int i=0; i<buffersize; i++)
    1798:	de 01       	movw	r26, r28
    179a:	a9 54       	subi	r26, 0x49	; 73
    179c:	bf 4f       	sbci	r27, 0xFF	; 255
    179e:	fe 01       	movw	r30, r28
    17a0:	e9 54       	subi	r30, 0x49	; 73
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	80 81       	ld	r24, Z
    17a6:	91 81       	ldd	r25, Z+1	; 0x01
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	11 96       	adiw	r26, 0x01	; 1
    17ac:	9c 93       	st	X, r25
    17ae:	8e 93       	st	-X, r24
    17b0:	fe 01       	movw	r30, r28
    17b2:	e9 54       	subi	r30, 0x49	; 73
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	80 81       	ld	r24, Z
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
    17ba:	80 31       	cpi	r24, 0x10	; 16
    17bc:	91 05       	cpc	r25, r1
    17be:	84 f2       	brlt	.-96     	; 0x1760 <main+0xac2>
			buffer[i] = i+10;
		else
			buffer[i] = 0;

	while(1) {
		if(txrxrole == ROLETX)
    17c0:	80 91 72 00 	lds	r24, 0x0072
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	09 f0       	breq	.+2      	; 0x17ca <main+0xb2c>
    17c8:	54 c1       	rjmp	.+680    	; 0x1a72 <main+0xdd4>
		{
			if ((PINC & (1<<BUTTONSEND)) != 0)
    17ca:	e3 e3       	ldi	r30, 0x33	; 51
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	82 70       	andi	r24, 0x02	; 2
    17d6:	90 70       	andi	r25, 0x00	; 0
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	91 f3       	breq	.-28     	; 0x17c0 <main+0xb22>
			{
				mirf_write(buffer);
    17dc:	83 e7       	ldi	r24, 0x73	; 115
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 7f 11 	call	0x22fe	; 0x22fe <mirf_write>

				PORTC |= (1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
    17e4:	a5 e3       	ldi	r26, 0x35	; 53
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e5 e3       	ldi	r30, 0x35	; 53
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	80 62       	ori	r24, 0x20	; 32
    17f0:	8c 93       	st	X, r24
    17f2:	fe 01       	movw	r30, r28
    17f4:	ef 5a       	subi	r30, 0xAF	; 175
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a6 e9       	ldi	r26, 0x96	; 150
    17fe:	b3 e4       	ldi	r27, 0x43	; 67
    1800:	80 83       	st	Z, r24
    1802:	91 83       	std	Z+1, r25	; 0x01
    1804:	a2 83       	std	Z+2, r26	; 0x02
    1806:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1808:	8e 01       	movw	r16, r28
    180a:	03 5b       	subi	r16, 0xB3	; 179
    180c:	1f 4f       	sbci	r17, 0xFF	; 255
    180e:	fe 01       	movw	r30, r28
    1810:	ef 5a       	subi	r30, 0xAF	; 175
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	60 81       	ld	r22, Z
    1816:	71 81       	ldd	r23, Z+1	; 0x01
    1818:	82 81       	ldd	r24, Z+2	; 0x02
    181a:	93 81       	ldd	r25, Z+3	; 0x03
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	4a e7       	ldi	r20, 0x7A	; 122
    1822:	53 e4       	ldi	r21, 0x43	; 67
    1824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	f8 01       	movw	r30, r16
    182e:	80 83       	st	Z, r24
    1830:	91 83       	std	Z+1, r25	; 0x01
    1832:	a2 83       	std	Z+2, r26	; 0x02
    1834:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1836:	fe 01       	movw	r30, r28
    1838:	e3 5b       	subi	r30, 0xB3	; 179
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	60 81       	ld	r22, Z
    183e:	71 81       	ldd	r23, Z+1	; 0x01
    1840:	82 81       	ldd	r24, Z+2	; 0x02
    1842:	93 81       	ldd	r25, Z+3	; 0x03
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e8       	ldi	r20, 0x80	; 128
    184a:	5f e3       	ldi	r21, 0x3F	; 63
    184c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1850:	88 23       	and	r24, r24
    1852:	44 f4       	brge	.+16     	; 0x1864 <main+0xbc6>
		__ticks = 1;
    1854:	fe 01       	movw	r30, r28
    1856:	e5 5b       	subi	r30, 0xB5	; 181
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	91 83       	std	Z+1, r25	; 0x01
    1860:	80 83       	st	Z, r24
    1862:	64 c0       	rjmp	.+200    	; 0x192c <main+0xc8e>
	else if (__tmp > 65535)
    1864:	fe 01       	movw	r30, r28
    1866:	e3 5b       	subi	r30, 0xB3	; 179
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	60 81       	ld	r22, Z
    186c:	71 81       	ldd	r23, Z+1	; 0x01
    186e:	82 81       	ldd	r24, Z+2	; 0x02
    1870:	93 81       	ldd	r25, Z+3	; 0x03
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	3f ef       	ldi	r19, 0xFF	; 255
    1876:	4f e7       	ldi	r20, 0x7F	; 127
    1878:	57 e4       	ldi	r21, 0x47	; 71
    187a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    187e:	18 16       	cp	r1, r24
    1880:	0c f0       	brlt	.+2      	; 0x1884 <main+0xbe6>
    1882:	43 c0       	rjmp	.+134    	; 0x190a <main+0xc6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1884:	fe 01       	movw	r30, r28
    1886:	ef 5a       	subi	r30, 0xAF	; 175
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e2       	ldi	r20, 0x20	; 32
    1898:	51 e4       	ldi	r21, 0x41	; 65
    189a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	8e 01       	movw	r16, r28
    18a4:	05 5b       	subi	r16, 0xB5	; 181
    18a6:	1f 4f       	sbci	r17, 0xFF	; 255
    18a8:	bc 01       	movw	r22, r24
    18aa:	cd 01       	movw	r24, r26
    18ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	f8 01       	movw	r30, r16
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
    18ba:	1f c0       	rjmp	.+62     	; 0x18fa <main+0xc5c>
    18bc:	fe 01       	movw	r30, r28
    18be:	e7 5b       	subi	r30, 0xB7	; 183
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	89 e1       	ldi	r24, 0x19	; 25
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	80 83       	st	Z, r24
    18ca:	fe 01       	movw	r30, r28
    18cc:	e7 5b       	subi	r30, 0xB7	; 183
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	80 81       	ld	r24, Z
    18d2:	91 81       	ldd	r25, Z+1	; 0x01
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <main+0xc36>
    18d8:	fe 01       	movw	r30, r28
    18da:	e7 5b       	subi	r30, 0xB7	; 183
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e2:	de 01       	movw	r26, r28
    18e4:	a5 5b       	subi	r26, 0xB5	; 181
    18e6:	bf 4f       	sbci	r27, 0xFF	; 255
    18e8:	fe 01       	movw	r30, r28
    18ea:	e5 5b       	subi	r30, 0xB5	; 181
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	80 81       	ld	r24, Z
    18f0:	91 81       	ldd	r25, Z+1	; 0x01
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	11 96       	adiw	r26, 0x01	; 1
    18f6:	9c 93       	st	X, r25
    18f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fa:	fe 01       	movw	r30, r28
    18fc:	e5 5b       	subi	r30, 0xB5	; 181
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 81       	ld	r24, Z
    1902:	91 81       	ldd	r25, Z+1	; 0x01
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	d1 f6       	brne	.-76     	; 0x18bc <main+0xc1e>
    1908:	27 c0       	rjmp	.+78     	; 0x1958 <main+0xcba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190a:	8e 01       	movw	r16, r28
    190c:	05 5b       	subi	r16, 0xB5	; 181
    190e:	1f 4f       	sbci	r17, 0xFF	; 255
    1910:	fe 01       	movw	r30, r28
    1912:	e3 5b       	subi	r30, 0xB3	; 179
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	f8 01       	movw	r30, r16
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	80 83       	st	Z, r24
    192c:	de 01       	movw	r26, r28
    192e:	a9 5b       	subi	r26, 0xB9	; 185
    1930:	bf 4f       	sbci	r27, 0xFF	; 255
    1932:	fe 01       	movw	r30, r28
    1934:	e5 5b       	subi	r30, 0xB5	; 181
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	80 81       	ld	r24, Z
    193a:	91 81       	ldd	r25, Z+1	; 0x01
    193c:	8d 93       	st	X+, r24
    193e:	9c 93       	st	X, r25
    1940:	fe 01       	movw	r30, r28
    1942:	e9 5b       	subi	r30, 0xB9	; 185
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	80 81       	ld	r24, Z
    1948:	91 81       	ldd	r25, Z+1	; 0x01
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	f1 f7       	brne	.-4      	; 0x194a <main+0xcac>
    194e:	fe 01       	movw	r30, r28
    1950:	e9 5b       	subi	r30, 0xB9	; 185
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	80 83       	st	Z, r24
				PORTC &= ~(1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
    1958:	a5 e3       	ldi	r26, 0x35	; 53
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e5 e3       	ldi	r30, 0x35	; 53
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	8f 7d       	andi	r24, 0xDF	; 223
    1964:	8c 93       	st	X, r24
    1966:	fe 01       	movw	r30, r28
    1968:	ed 5b       	subi	r30, 0xBD	; 189
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	a6 e9       	ldi	r26, 0x96	; 150
    1972:	b3 e4       	ldi	r27, 0x43	; 67
    1974:	80 83       	st	Z, r24
    1976:	91 83       	std	Z+1, r25	; 0x01
    1978:	a2 83       	std	Z+2, r26	; 0x02
    197a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197c:	8e 01       	movw	r16, r28
    197e:	01 5c       	subi	r16, 0xC1	; 193
    1980:	1f 4f       	sbci	r17, 0xFF	; 255
    1982:	fe 01       	movw	r30, r28
    1984:	ed 5b       	subi	r30, 0xBD	; 189
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	60 81       	ld	r22, Z
    198a:	71 81       	ldd	r23, Z+1	; 0x01
    198c:	82 81       	ldd	r24, Z+2	; 0x02
    198e:	93 81       	ldd	r25, Z+3	; 0x03
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	4a e7       	ldi	r20, 0x7A	; 122
    1996:	53 e4       	ldi	r21, 0x43	; 67
    1998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	f8 01       	movw	r30, r16
    19a2:	80 83       	st	Z, r24
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	a2 83       	std	Z+2, r26	; 0x02
    19a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19aa:	fe 01       	movw	r30, r28
    19ac:	ff 96       	adiw	r30, 0x3f	; 63
    19ae:	60 81       	ld	r22, Z
    19b0:	71 81       	ldd	r23, Z+1	; 0x01
    19b2:	82 81       	ldd	r24, Z+2	; 0x02
    19b4:	93 81       	ldd	r25, Z+3	; 0x03
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e8       	ldi	r20, 0x80	; 128
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c2:	88 23       	and	r24, r24
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <main+0xd32>
		__ticks = 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	9e af       	std	Y+62, r25	; 0x3e
    19cc:	8d af       	std	Y+61, r24	; 0x3d
    19ce:	46 c0       	rjmp	.+140    	; 0x1a5c <main+0xdbe>
	else if (__tmp > 65535)
    19d0:	fe 01       	movw	r30, r28
    19d2:	ff 96       	adiw	r30, 0x3f	; 63
    19d4:	60 81       	ld	r22, Z
    19d6:	71 81       	ldd	r23, Z+1	; 0x01
    19d8:	82 81       	ldd	r24, Z+2	; 0x02
    19da:	93 81       	ldd	r25, Z+3	; 0x03
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	3f ef       	ldi	r19, 0xFF	; 255
    19e0:	4f e7       	ldi	r20, 0x7F	; 127
    19e2:	57 e4       	ldi	r21, 0x47	; 71
    19e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e8:	18 16       	cp	r1, r24
    19ea:	64 f5       	brge	.+88     	; 0x1a44 <main+0xda6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ec:	fe 01       	movw	r30, r28
    19ee:	ed 5b       	subi	r30, 0xBD	; 189
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	60 81       	ld	r22, Z
    19f4:	71 81       	ldd	r23, Z+1	; 0x01
    19f6:	82 81       	ldd	r24, Z+2	; 0x02
    19f8:	93 81       	ldd	r25, Z+3	; 0x03
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e2       	ldi	r20, 0x20	; 32
    1a00:	51 e4       	ldi	r21, 0x41	; 65
    1a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	bc 01       	movw	r22, r24
    1a0c:	cd 01       	movw	r24, r26
    1a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	9e af       	std	Y+62, r25	; 0x3e
    1a18:	8d af       	std	Y+61, r24	; 0x3d
    1a1a:	0f c0       	rjmp	.+30     	; 0x1a3a <main+0xd9c>
    1a1c:	89 e1       	ldi	r24, 0x19	; 25
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	9c af       	std	Y+60, r25	; 0x3c
    1a22:	8b af       	std	Y+59, r24	; 0x3b
    1a24:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a26:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <main+0xd8a>
    1a2c:	9c af       	std	Y+60, r25	; 0x3c
    1a2e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a30:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a32:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	9e af       	std	Y+62, r25	; 0x3e
    1a38:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	69 f7       	brne	.-38     	; 0x1a1c <main+0xd7e>
    1a42:	be ce       	rjmp	.-644    	; 0x17c0 <main+0xb22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a44:	fe 01       	movw	r30, r28
    1a46:	ff 96       	adiw	r30, 0x3f	; 63
    1a48:	60 81       	ld	r22, Z
    1a4a:	71 81       	ldd	r23, Z+1	; 0x01
    1a4c:	82 81       	ldd	r24, Z+2	; 0x02
    1a4e:	93 81       	ldd	r25, Z+3	; 0x03
    1a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	9e af       	std	Y+62, r25	; 0x3e
    1a5a:	8d af       	std	Y+61, r24	; 0x3d
    1a5c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a5e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a60:	9a af       	std	Y+58, r25	; 0x3a
    1a62:	89 af       	std	Y+57, r24	; 0x39
    1a64:	89 ad       	ldd	r24, Y+57	; 0x39
    1a66:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <main+0xdca>
    1a6c:	9a af       	std	Y+58, r25	; 0x3a
    1a6e:	89 af       	std	Y+57, r24	; 0x39
    1a70:	a7 ce       	rjmp	.-690    	; 0x17c0 <main+0xb22>
			}
		}
		else if(txrxrole == ROLERX)
    1a72:	80 91 72 00 	lds	r24, 0x0072
    1a76:	88 23       	and	r24, r24
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <main+0xdde>
    1a7a:	a2 ce       	rjmp	.-700    	; 0x17c0 <main+0xb22>
		{
			if(mirf_read_ready())
    1a7c:	0e 94 2e 11 	call	0x225c	; 0x225c <mirf_read_ready>
    1a80:	88 23       	and	r24, r24
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <main+0xde8>
    1a84:	9d ce       	rjmp	.-710    	; 0x17c0 <main+0xb22>
			{
		//		uart_putc(mirf_get_status());
				mirf_read(buffer);
    1a86:	83 e7       	ldi	r24, 0x73	; 115
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 3c 11 	call	0x2278	; 0x2278 <mirf_read>
//				for(int i=0; i<buffersize; i++)
//					uart_putc(buffer[i]);

				PORTC |= (1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
    1a8e:	a5 e3       	ldi	r26, 0x35	; 53
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e5 e3       	ldi	r30, 0x35	; 53
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	80 62       	ori	r24, 0x20	; 32
    1a9a:	8c 93       	st	X, r24
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a6 e9       	ldi	r26, 0x96	; 150
    1aa2:	b3 e4       	ldi	r27, 0x43	; 67
    1aa4:	8d ab       	std	Y+53, r24	; 0x35
    1aa6:	9e ab       	std	Y+54, r25	; 0x36
    1aa8:	af ab       	std	Y+55, r26	; 0x37
    1aaa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aac:	6d a9       	ldd	r22, Y+53	; 0x35
    1aae:	7e a9       	ldd	r23, Y+54	; 0x36
    1ab0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ab2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	4a e7       	ldi	r20, 0x7A	; 122
    1aba:	53 e4       	ldi	r21, 0x43	; 67
    1abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	89 ab       	std	Y+49, r24	; 0x31
    1ac6:	9a ab       	std	Y+50, r25	; 0x32
    1ac8:	ab ab       	std	Y+51, r26	; 0x33
    1aca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1acc:	69 a9       	ldd	r22, Y+49	; 0x31
    1ace:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e8       	ldi	r20, 0x80	; 128
    1ada:	5f e3       	ldi	r21, 0x3F	; 63
    1adc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ae0:	88 23       	and	r24, r24
    1ae2:	2c f4       	brge	.+10     	; 0x1aee <main+0xe50>
		__ticks = 1;
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	98 ab       	std	Y+48, r25	; 0x30
    1aea:	8f a7       	std	Y+47, r24	; 0x2f
    1aec:	3f c0       	rjmp	.+126    	; 0x1b6c <main+0xece>
	else if (__tmp > 65535)
    1aee:	69 a9       	ldd	r22, Y+49	; 0x31
    1af0:	7a a9       	ldd	r23, Y+50	; 0x32
    1af2:	8b a9       	ldd	r24, Y+51	; 0x33
    1af4:	9c a9       	ldd	r25, Y+52	; 0x34
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	3f ef       	ldi	r19, 0xFF	; 255
    1afa:	4f e7       	ldi	r20, 0x7F	; 127
    1afc:	57 e4       	ldi	r21, 0x47	; 71
    1afe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b02:	18 16       	cp	r1, r24
    1b04:	4c f5       	brge	.+82     	; 0x1b58 <main+0xeba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b06:	6d a9       	ldd	r22, Y+53	; 0x35
    1b08:	7e a9       	ldd	r23, Y+54	; 0x36
    1b0a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b0c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e2       	ldi	r20, 0x20	; 32
    1b14:	51 e4       	ldi	r21, 0x41	; 65
    1b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	bc 01       	movw	r22, r24
    1b20:	cd 01       	movw	r24, r26
    1b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	98 ab       	std	Y+48, r25	; 0x30
    1b2c:	8f a7       	std	Y+47, r24	; 0x2f
    1b2e:	0f c0       	rjmp	.+30     	; 0x1b4e <main+0xeb0>
    1b30:	89 e1       	ldi	r24, 0x19	; 25
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	9e a7       	std	Y+46, r25	; 0x2e
    1b36:	8d a7       	std	Y+45, r24	; 0x2d
    1b38:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b3a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <main+0xe9e>
    1b40:	9e a7       	std	Y+46, r25	; 0x2e
    1b42:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b46:	98 a9       	ldd	r25, Y+48	; 0x30
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	98 ab       	std	Y+48, r25	; 0x30
    1b4c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b50:	98 a9       	ldd	r25, Y+48	; 0x30
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	69 f7       	brne	.-38     	; 0x1b30 <main+0xe92>
    1b56:	14 c0       	rjmp	.+40     	; 0x1b80 <main+0xee2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b58:	69 a9       	ldd	r22, Y+49	; 0x31
    1b5a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	98 ab       	std	Y+48, r25	; 0x30
    1b6a:	8f a7       	std	Y+47, r24	; 0x2f
    1b6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b70:	9c a7       	std	Y+44, r25	; 0x2c
    1b72:	8b a7       	std	Y+43, r24	; 0x2b
    1b74:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b76:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	f1 f7       	brne	.-4      	; 0x1b78 <main+0xeda>
    1b7c:	9c a7       	std	Y+44, r25	; 0x2c
    1b7e:	8b a7       	std	Y+43, r24	; 0x2b
				PORTC &= ~(1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
    1b80:	a5 e3       	ldi	r26, 0x35	; 53
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e5 e3       	ldi	r30, 0x35	; 53
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	8f 7d       	andi	r24, 0xDF	; 223
    1b8c:	8c 93       	st	X, r24
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	a6 e9       	ldi	r26, 0x96	; 150
    1b94:	b3 e4       	ldi	r27, 0x43	; 67
    1b96:	8f a3       	std	Y+39, r24	; 0x27
    1b98:	98 a7       	std	Y+40, r25	; 0x28
    1b9a:	a9 a7       	std	Y+41, r26	; 0x29
    1b9c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9e:	6f a1       	ldd	r22, Y+39	; 0x27
    1ba0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ba2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ba4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	4a e7       	ldi	r20, 0x7A	; 122
    1bac:	53 e4       	ldi	r21, 0x43	; 67
    1bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	8b a3       	std	Y+35, r24	; 0x23
    1bb8:	9c a3       	std	Y+36, r25	; 0x24
    1bba:	ad a3       	std	Y+37, r26	; 0x25
    1bbc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bbe:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc0:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc2:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc4:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e8       	ldi	r20, 0x80	; 128
    1bcc:	5f e3       	ldi	r21, 0x3F	; 63
    1bce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd2:	88 23       	and	r24, r24
    1bd4:	2c f4       	brge	.+10     	; 0x1be0 <main+0xf42>
		__ticks = 1;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	9a a3       	std	Y+34, r25	; 0x22
    1bdc:	89 a3       	std	Y+33, r24	; 0x21
    1bde:	3f c0       	rjmp	.+126    	; 0x1c5e <main+0xfc0>
	else if (__tmp > 65535)
    1be0:	6b a1       	ldd	r22, Y+35	; 0x23
    1be2:	7c a1       	ldd	r23, Y+36	; 0x24
    1be4:	8d a1       	ldd	r24, Y+37	; 0x25
    1be6:	9e a1       	ldd	r25, Y+38	; 0x26
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	3f ef       	ldi	r19, 0xFF	; 255
    1bec:	4f e7       	ldi	r20, 0x7F	; 127
    1bee:	57 e4       	ldi	r21, 0x47	; 71
    1bf0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bf4:	18 16       	cp	r1, r24
    1bf6:	4c f5       	brge	.+82     	; 0x1c4a <main+0xfac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf8:	6f a1       	ldd	r22, Y+39	; 0x27
    1bfa:	78 a5       	ldd	r23, Y+40	; 0x28
    1bfc:	89 a5       	ldd	r24, Y+41	; 0x29
    1bfe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e2       	ldi	r20, 0x20	; 32
    1c06:	51 e4       	ldi	r21, 0x41	; 65
    1c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	bc 01       	movw	r22, r24
    1c12:	cd 01       	movw	r24, r26
    1c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9a a3       	std	Y+34, r25	; 0x22
    1c1e:	89 a3       	std	Y+33, r24	; 0x21
    1c20:	0f c0       	rjmp	.+30     	; 0x1c40 <main+0xfa2>
    1c22:	89 e1       	ldi	r24, 0x19	; 25
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	98 a3       	std	Y+32, r25	; 0x20
    1c28:	8f 8f       	std	Y+31, r24	; 0x1f
    1c2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c2c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <main+0xf90>
    1c32:	98 a3       	std	Y+32, r25	; 0x20
    1c34:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c36:	89 a1       	ldd	r24, Y+33	; 0x21
    1c38:	9a a1       	ldd	r25, Y+34	; 0x22
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	9a a3       	std	Y+34, r25	; 0x22
    1c3e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c40:	89 a1       	ldd	r24, Y+33	; 0x21
    1c42:	9a a1       	ldd	r25, Y+34	; 0x22
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	69 f7       	brne	.-38     	; 0x1c22 <main+0xf84>
    1c48:	14 c0       	rjmp	.+40     	; 0x1c72 <main+0xfd4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c50:	9e a1       	ldd	r25, Y+38	; 0x26
    1c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	9a a3       	std	Y+34, r25	; 0x22
    1c5c:	89 a3       	std	Y+33, r24	; 0x21
    1c5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c60:	9a a1       	ldd	r25, Y+34	; 0x22
    1c62:	9e 8f       	std	Y+30, r25	; 0x1e
    1c64:	8d 8f       	std	Y+29, r24	; 0x1d
    1c66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c68:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <main+0xfcc>
    1c6e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c70:	8d 8f       	std	Y+29, r24	; 0x1d
				PORTC |= (1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
    1c72:	a5 e3       	ldi	r26, 0x35	; 53
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e5 e3       	ldi	r30, 0x35	; 53
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 62       	ori	r24, 0x20	; 32
    1c7e:	8c 93       	st	X, r24
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	a6 e9       	ldi	r26, 0x96	; 150
    1c86:	b3 e4       	ldi	r27, 0x43	; 67
    1c88:	89 8f       	std	Y+25, r24	; 0x19
    1c8a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c8c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c90:	69 8d       	ldd	r22, Y+25	; 0x19
    1c92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	4a e7       	ldi	r20, 0x7A	; 122
    1c9e:	53 e4       	ldi	r21, 0x43	; 67
    1ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	8d 8b       	std	Y+21, r24	; 0x15
    1caa:	9e 8b       	std	Y+22, r25	; 0x16
    1cac:	af 8b       	std	Y+23, r26	; 0x17
    1cae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cb0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 e8       	ldi	r20, 0x80	; 128
    1cbe:	5f e3       	ldi	r21, 0x3F	; 63
    1cc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cc4:	88 23       	and	r24, r24
    1cc6:	2c f4       	brge	.+10     	; 0x1cd2 <main+0x1034>
		__ticks = 1;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	9c 8b       	std	Y+20, r25	; 0x14
    1cce:	8b 8b       	std	Y+19, r24	; 0x13
    1cd0:	3f c0       	rjmp	.+126    	; 0x1d50 <main+0x10b2>
	else if (__tmp > 65535)
    1cd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	3f ef       	ldi	r19, 0xFF	; 255
    1cde:	4f e7       	ldi	r20, 0x7F	; 127
    1ce0:	57 e4       	ldi	r21, 0x47	; 71
    1ce2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ce6:	18 16       	cp	r1, r24
    1ce8:	4c f5       	brge	.+82     	; 0x1d3c <main+0x109e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cea:	69 8d       	ldd	r22, Y+25	; 0x19
    1cec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e2       	ldi	r20, 0x20	; 32
    1cf8:	51 e4       	ldi	r21, 0x41	; 65
    1cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	bc 01       	movw	r22, r24
    1d04:	cd 01       	movw	r24, r26
    1d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	9c 8b       	std	Y+20, r25	; 0x14
    1d10:	8b 8b       	std	Y+19, r24	; 0x13
    1d12:	0f c0       	rjmp	.+30     	; 0x1d32 <main+0x1094>
    1d14:	89 e1       	ldi	r24, 0x19	; 25
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	9a 8b       	std	Y+18, r25	; 0x12
    1d1a:	89 8b       	std	Y+17, r24	; 0x11
    1d1c:	89 89       	ldd	r24, Y+17	; 0x11
    1d1e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <main+0x1082>
    1d24:	9a 8b       	std	Y+18, r25	; 0x12
    1d26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d28:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	9c 8b       	std	Y+20, r25	; 0x14
    1d30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d32:	8b 89       	ldd	r24, Y+19	; 0x13
    1d34:	9c 89       	ldd	r25, Y+20	; 0x14
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	69 f7       	brne	.-38     	; 0x1d14 <main+0x1076>
    1d3a:	14 c0       	rjmp	.+40     	; 0x1d64 <main+0x10c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d40:	8f 89       	ldd	r24, Y+23	; 0x17
    1d42:	98 8d       	ldd	r25, Y+24	; 0x18
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9c 8b       	std	Y+20, r25	; 0x14
    1d4e:	8b 8b       	std	Y+19, r24	; 0x13
    1d50:	8b 89       	ldd	r24, Y+19	; 0x13
    1d52:	9c 89       	ldd	r25, Y+20	; 0x14
    1d54:	98 8b       	std	Y+16, r25	; 0x10
    1d56:	8f 87       	std	Y+15, r24	; 0x0f
    1d58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d5a:	98 89       	ldd	r25, Y+16	; 0x10
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <main+0x10be>
    1d60:	98 8b       	std	Y+16, r25	; 0x10
    1d62:	8f 87       	std	Y+15, r24	; 0x0f
				PORTC &= ~(1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
    1d64:	a5 e3       	ldi	r26, 0x35	; 53
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e5 e3       	ldi	r30, 0x35	; 53
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	8f 7d       	andi	r24, 0xDF	; 223
    1d70:	8c 93       	st	X, r24
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a6 e9       	ldi	r26, 0x96	; 150
    1d78:	b3 e4       	ldi	r27, 0x43	; 67
    1d7a:	8b 87       	std	Y+11, r24	; 0x0b
    1d7c:	9c 87       	std	Y+12, r25	; 0x0c
    1d7e:	ad 87       	std	Y+13, r26	; 0x0d
    1d80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4a e7       	ldi	r20, 0x7A	; 122
    1d90:	53 e4       	ldi	r21, 0x43	; 67
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	8f 83       	std	Y+7, r24	; 0x07
    1d9c:	98 87       	std	Y+8, r25	; 0x08
    1d9e:	a9 87       	std	Y+9, r26	; 0x09
    1da0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1da2:	6f 81       	ldd	r22, Y+7	; 0x07
    1da4:	78 85       	ldd	r23, Y+8	; 0x08
    1da6:	89 85       	ldd	r24, Y+9	; 0x09
    1da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e8       	ldi	r20, 0x80	; 128
    1db0:	5f e3       	ldi	r21, 0x3F	; 63
    1db2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1db6:	88 23       	and	r24, r24
    1db8:	2c f4       	brge	.+10     	; 0x1dc4 <main+0x1126>
		__ticks = 1;
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9e 83       	std	Y+6, r25	; 0x06
    1dc0:	8d 83       	std	Y+5, r24	; 0x05
    1dc2:	3f c0       	rjmp	.+126    	; 0x1e42 <main+0x11a4>
	else if (__tmp > 65535)
    1dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc6:	78 85       	ldd	r23, Y+8	; 0x08
    1dc8:	89 85       	ldd	r24, Y+9	; 0x09
    1dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	3f ef       	ldi	r19, 0xFF	; 255
    1dd0:	4f e7       	ldi	r20, 0x7F	; 127
    1dd2:	57 e4       	ldi	r21, 0x47	; 71
    1dd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dd8:	18 16       	cp	r1, r24
    1dda:	4c f5       	brge	.+82     	; 0x1e2e <main+0x1190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ddc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e2       	ldi	r20, 0x20	; 32
    1dea:	51 e4       	ldi	r21, 0x41	; 65
    1dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	bc 01       	movw	r22, r24
    1df6:	cd 01       	movw	r24, r26
    1df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	9e 83       	std	Y+6, r25	; 0x06
    1e02:	8d 83       	std	Y+5, r24	; 0x05
    1e04:	0f c0       	rjmp	.+30     	; 0x1e24 <main+0x1186>
    1e06:	89 e1       	ldi	r24, 0x19	; 25
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	9c 83       	std	Y+4, r25	; 0x04
    1e0c:	8b 83       	std	Y+3, r24	; 0x03
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	9c 81       	ldd	r25, Y+4	; 0x04
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <main+0x1174>
    1e16:	9c 83       	std	Y+4, r25	; 0x04
    1e18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	9e 83       	std	Y+6, r25	; 0x06
    1e22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	69 f7       	brne	.-38     	; 0x1e06 <main+0x1168>
    1e2c:	c9 cc       	rjmp	.-1646   	; 0x17c0 <main+0xb22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e30:	78 85       	ldd	r23, Y+8	; 0x08
    1e32:	89 85       	ldd	r24, Y+9	; 0x09
    1e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	9e 81       	ldd	r25, Y+6	; 0x06
    1e46:	9a 83       	std	Y+2, r25	; 0x02
    1e48:	89 83       	std	Y+1, r24	; 0x01
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <main+0x11b0>
    1e52:	9a 83       	std	Y+2, r25	; 0x02
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	b4 cc       	rjmp	.-1688   	; 0x17c0 <main+0xb22>

00001e58 <spi_init>:
#include "mirf.h"
#include "nRF24L01.h"

//initialize spi
void spi_init()
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    DDR_SPI &= ~( (1<<SPI_MOSI) | (1<<SPI_MISO) | (1<<SPI_SS) | (1<<SPI_SCK) );
    1e60:	a7 e3       	ldi	r26, 0x37	; 55
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e7 e3       	ldi	r30, 0x37	; 55
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	83 7c       	andi	r24, 0xC3	; 195
    1e6c:	8c 93       	st	X, r24
    DDR_SPI |= ( (1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK) );
    1e6e:	a7 e3       	ldi	r26, 0x37	; 55
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e7 e3       	ldi	r30, 0x37	; 55
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	8c 62       	ori	r24, 0x2C	; 44
    1e7a:	8c 93       	st	X, r24

    SPCR = ((1<<SPE)|               // SPI Enable
    1e7c:	ed e2       	ldi	r30, 0x2D	; 45
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	81 e5       	ldi	r24, 0x51	; 81
    1e82:	80 83       	st	Z, r24
            (1<<MSTR)|              // Master/Slave select
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X); // double spi speed bit
    1e84:	ee e2       	ldi	r30, 0x2E	; 46
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	80 83       	st	Z, r24
}
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	08 95       	ret

00001e92 <spi_writeread>:

//spi write one byte and read it back
uint8_t spi_writeread(uint8_t data)
{
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	0f 92       	push	r0
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    SPDR = data;
    1e9e:	ef e2       	ldi	r30, 0x2F	; 47
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	80 83       	st	Z, r24
    while((SPSR & (1<<SPIF)) == 0);
    1ea6:	ee e2       	ldi	r30, 0x2E	; 46
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	88 23       	and	r24, r24
    1eae:	dc f7       	brge	.-10     	; 0x1ea6 <spi_writeread+0x14>
    return SPDR;
    1eb0:	ef e2       	ldi	r30, 0x2F	; 47
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
}
    1eb6:	0f 90       	pop	r0
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	08 95       	ret

00001ebe <mirf_init>:

//initialize mirf
void mirf_init() 
{
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    DDRB |= ( (1<<CSN) | (1<<CE) );
    1ec6:	a7 e3       	ldi	r26, 0x37	; 55
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e7 e3       	ldi	r30, 0x37	; 55
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	83 60       	ori	r24, 0x03	; 3
    1ed2:	8c 93       	st	X, r24

    mirf_CE_lo;
    1ed4:	a8 e3       	ldi	r26, 0x38	; 56
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e8 e3       	ldi	r30, 0x38	; 56
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	8e 7f       	andi	r24, 0xFE	; 254
    1ee0:	8c 93       	st	X, r24
    mirf_CSN_hi;
    1ee2:	a8 e3       	ldi	r26, 0x38	; 56
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e8 e3       	ldi	r30, 0x38	; 56
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	82 60       	ori	r24, 0x02	; 2
    1eee:	8c 93       	st	X, r24

    spi_init();
    1ef0:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <spi_init>
}
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <mirf_config>:

//config mirf
void mirf_config() 
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    mirf_write_register(RF_CH, mirf_CH); //set RF channel
    1f02:	85 e0       	ldi	r24, 0x05	; 5
    1f04:	62 e0       	ldi	r22, 0x02	; 2
    1f06:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <mirf_write_register>
    mirf_write_register(RX_PW_P0, mirf_PAYLOAD); //length of incoming payload
    1f0a:	81 e1       	ldi	r24, 0x11	; 17
    1f0c:	60 e1       	ldi	r22, 0x10	; 16
    1f0e:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <mirf_write_register>
    mirf_write_register(RX_PW_P1, mirf_PAYLOAD);
    1f12:	82 e1       	ldi	r24, 0x12	; 18
    1f14:	60 e1       	ldi	r22, 0x10	; 16
    1f16:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <mirf_write_register>
    mirf_write_register(RX_PW_P2, mirf_PAYLOAD);
    1f1a:	83 e1       	ldi	r24, 0x13	; 19
    1f1c:	60 e1       	ldi	r22, 0x10	; 16
    1f1e:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <mirf_write_register>
    mirf_write_register(RX_PW_P3, mirf_PAYLOAD);
    1f22:	84 e1       	ldi	r24, 0x14	; 20
    1f24:	60 e1       	ldi	r22, 0x10	; 16
    1f26:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <mirf_write_register>
    mirf_write_register(RX_PW_P4, mirf_PAYLOAD);
    1f2a:	85 e1       	ldi	r24, 0x15	; 21
    1f2c:	60 e1       	ldi	r22, 0x10	; 16
    1f2e:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <mirf_write_register>
    mirf_write_register(RX_PW_P5, mirf_PAYLOAD);
    1f32:	86 e1       	ldi	r24, 0x16	; 22
    1f34:	60 e1       	ldi	r22, 0x10	; 16
    1f36:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <mirf_write_register>
    mirf_write_register(SETUP_RETR, mirf_RETR); // set retries
    1f3a:	84 e0       	ldi	r24, 0x04	; 4
    1f3c:	66 e0       	ldi	r22, 0x06	; 6
    1f3e:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <mirf_write_register>
	#if mirf_ACK == 1  //auto acknowledgement
    	mirf_write_register(EN_AA, 0);
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	60 e0       	ldi	r22, 0x00	; 0
    1f46:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <mirf_write_register>
		#if mirf_ENABLED_P0 == 1
    		mirf_write_register(EN_AA, mirf_read_register(EN_AA) | (1<<ENAA_P0));
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	0e 94 71 10 	call	0x20e2	; 0x20e2 <mirf_read_register>
    1f50:	98 2f       	mov	r25, r24
    1f52:	91 60       	ori	r25, 0x01	; 1
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	69 2f       	mov	r22, r25
    1f58:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <mirf_write_register>
		#endif
	#else
		mirf_write_register(EN_AA, 0); //auto acknowledgement
	#endif

	mirf_write_register(EN_RXADDR, 0);
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	60 e0       	ldi	r22, 0x00	; 0
    1f60:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <mirf_write_register>
	#if mirf_ENABLED_P0 == 1
		mirf_write_register(EN_RXADDR, mirf_read_register(EN_RXADDR) | (1<<ERX_P0));
    1f64:	82 e0       	ldi	r24, 0x02	; 2
    1f66:	0e 94 71 10 	call	0x20e2	; 0x20e2 <mirf_read_register>
    1f6a:	98 2f       	mov	r25, r24
    1f6c:	91 60       	ori	r25, 0x01	; 1
    1f6e:	82 e0       	ldi	r24, 0x02	; 2
    1f70:	69 2f       	mov	r22, r25
    1f72:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <mirf_write_register>
	#endif
	#if mirf_ENABLED_P5 == 1
		mirf_write_register(EN_RXADDR, mirf_read_register(EN_RXADDR) | (1<<ERX_P5));
	#endif

    mirf_setRX; // rx mode
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	6b e0       	ldi	r22, 0x0B	; 11
    1f7a:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <mirf_write_register>
    mirf_CE_hi;
    1f7e:	a8 e3       	ldi	r26, 0x38	; 56
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e8 e3       	ldi	r30, 0x38	; 56
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	81 60       	ori	r24, 0x01	; 1
    1f8a:	8c 93       	st	X, r24
}
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <mirf_set_rxaddr>:

//set rx address
void mirf_set_rxaddr(uint8_t channel, uint8_t *addr)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <mirf_set_rxaddr+0x6>
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <mirf_set_rxaddr+0x8>
    1f9a:	0f 92       	push	r0
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	7b 83       	std	Y+3, r23	; 0x03
    1fa4:	6a 83       	std	Y+2, r22	; 0x02
    mirf_CE_lo;
    1fa6:	a8 e3       	ldi	r26, 0x38	; 56
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	e8 e3       	ldi	r30, 0x38	; 56
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	8e 7f       	andi	r24, 0xFE	; 254
    1fb2:	8c 93       	st	X, r24
    switch(channel)
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	3d 83       	std	Y+5, r19	; 0x05
    1fbc:	2c 83       	std	Y+4, r18	; 0x04
    1fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc2:	82 30       	cpi	r24, 0x02	; 2
    1fc4:	91 05       	cpc	r25, r1
    1fc6:	79 f1       	breq	.+94     	; 0x2026 <mirf_set_rxaddr+0x94>
    1fc8:	2c 81       	ldd	r18, Y+4	; 0x04
    1fca:	3d 81       	ldd	r19, Y+5	; 0x05
    1fcc:	23 30       	cpi	r18, 0x03	; 3
    1fce:	31 05       	cpc	r19, r1
    1fd0:	54 f4       	brge	.+20     	; 0x1fe6 <mirf_set_rxaddr+0x54>
    1fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	b1 f0       	breq	.+44     	; 0x2006 <mirf_set_rxaddr+0x74>
    1fda:	2c 81       	ldd	r18, Y+4	; 0x04
    1fdc:	3d 81       	ldd	r19, Y+5	; 0x05
    1fde:	21 30       	cpi	r18, 0x01	; 1
    1fe0:	31 05       	cpc	r19, r1
    1fe2:	c9 f0       	breq	.+50     	; 0x2016 <mirf_set_rxaddr+0x84>
    1fe4:	3f c0       	rjmp	.+126    	; 0x2064 <mirf_set_rxaddr+0xd2>
    1fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fea:	84 30       	cpi	r24, 0x04	; 4
    1fec:	91 05       	cpc	r25, r1
    1fee:	59 f1       	breq	.+86     	; 0x2046 <mirf_set_rxaddr+0xb4>
    1ff0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff4:	24 30       	cpi	r18, 0x04	; 4
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	f4 f0       	brlt	.+60     	; 0x2036 <mirf_set_rxaddr+0xa4>
    1ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffe:	85 30       	cpi	r24, 0x05	; 5
    2000:	91 05       	cpc	r25, r1
    2002:	49 f1       	breq	.+82     	; 0x2056 <mirf_set_rxaddr+0xc4>
    2004:	2f c0       	rjmp	.+94     	; 0x2064 <mirf_set_rxaddr+0xd2>
    {
    	case 0:
    	    mirf_write_registers(RX_ADDR_P0, addr, 5);
    2006:	2a 81       	ldd	r18, Y+2	; 0x02
    2008:	3b 81       	ldd	r19, Y+3	; 0x03
    200a:	8a e0       	ldi	r24, 0x0A	; 10
    200c:	b9 01       	movw	r22, r18
    200e:	45 e0       	ldi	r20, 0x05	; 5
    2010:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <mirf_write_registers>
    2014:	27 c0       	rjmp	.+78     	; 0x2064 <mirf_set_rxaddr+0xd2>
    		break;
    	case 1:
    		mirf_write_registers(RX_ADDR_P1, addr, 5);
    2016:	2a 81       	ldd	r18, Y+2	; 0x02
    2018:	3b 81       	ldd	r19, Y+3	; 0x03
    201a:	8b e0       	ldi	r24, 0x0B	; 11
    201c:	b9 01       	movw	r22, r18
    201e:	45 e0       	ldi	r20, 0x05	; 5
    2020:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <mirf_write_registers>
    2024:	1f c0       	rjmp	.+62     	; 0x2064 <mirf_set_rxaddr+0xd2>
    	    break;
    	case 2:
    		mirf_write_registers(RX_ADDR_P2, addr, 5);
    2026:	2a 81       	ldd	r18, Y+2	; 0x02
    2028:	3b 81       	ldd	r19, Y+3	; 0x03
    202a:	8c e0       	ldi	r24, 0x0C	; 12
    202c:	b9 01       	movw	r22, r18
    202e:	45 e0       	ldi	r20, 0x05	; 5
    2030:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <mirf_write_registers>
    2034:	17 c0       	rjmp	.+46     	; 0x2064 <mirf_set_rxaddr+0xd2>
    	    break;
    	case 3:
    		mirf_write_registers(RX_ADDR_P3, addr, 5);
    2036:	2a 81       	ldd	r18, Y+2	; 0x02
    2038:	3b 81       	ldd	r19, Y+3	; 0x03
    203a:	8d e0       	ldi	r24, 0x0D	; 13
    203c:	b9 01       	movw	r22, r18
    203e:	45 e0       	ldi	r20, 0x05	; 5
    2040:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <mirf_write_registers>
    2044:	0f c0       	rjmp	.+30     	; 0x2064 <mirf_set_rxaddr+0xd2>
    	    break;
    	case 4:
    		mirf_write_registers(RX_ADDR_P4, addr, 5);
    2046:	2a 81       	ldd	r18, Y+2	; 0x02
    2048:	3b 81       	ldd	r19, Y+3	; 0x03
    204a:	8e e0       	ldi	r24, 0x0E	; 14
    204c:	b9 01       	movw	r22, r18
    204e:	45 e0       	ldi	r20, 0x05	; 5
    2050:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <mirf_write_registers>
    2054:	07 c0       	rjmp	.+14     	; 0x2064 <mirf_set_rxaddr+0xd2>
    	   break;
    	case 5:
    	   mirf_write_registers(RX_ADDR_P5, addr, 5);
    2056:	2a 81       	ldd	r18, Y+2	; 0x02
    2058:	3b 81       	ldd	r19, Y+3	; 0x03
    205a:	8f e0       	ldi	r24, 0x0F	; 15
    205c:	b9 01       	movw	r22, r18
    205e:	45 e0       	ldi	r20, 0x05	; 5
    2060:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <mirf_write_registers>
    	   break;

    }
    mirf_CE_hi;
    2064:	a8 e3       	ldi	r26, 0x38	; 56
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e8 e3       	ldi	r30, 0x38	; 56
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	81 60       	ori	r24, 0x01	; 1
    2070:	8c 93       	st	X, r24
}
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <mirf_set_txaddr>:

//set tx address
void mirf_set_txaddr(uint8_t *addr)
{
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	00 d0       	rcall	.+0      	; 0x2088 <mirf_set_txaddr+0x6>
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	9a 83       	std	Y+2, r25	; 0x02
    208e:	89 83       	std	Y+1, r24	; 0x01
    mirf_write_registers(TX_ADDR, addr, 5);
    2090:	29 81       	ldd	r18, Y+1	; 0x01
    2092:	3a 81       	ldd	r19, Y+2	; 0x02
    2094:	80 e1       	ldi	r24, 0x10	; 16
    2096:	b9 01       	movw	r22, r18
    2098:	45 e0       	ldi	r20, 0x05	; 5
    209a:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <mirf_write_registers>
}
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <mirf_get_status>:

//get status
uint8_t mirf_get_status()
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	0f 92       	push	r0
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
	uint8_t status = 0;
    20b2:	19 82       	std	Y+1, r1	; 0x01
	mirf_CSN_lo;
    20b4:	a8 e3       	ldi	r26, 0x38	; 56
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e8 e3       	ldi	r30, 0x38	; 56
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	8d 7f       	andi	r24, 0xFD	; 253
    20c0:	8c 93       	st	X, r24
	status = spi_writeread(NOP);
    20c2:	8f ef       	ldi	r24, 0xFF	; 255
    20c4:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <spi_writeread>
    20c8:	89 83       	std	Y+1, r24	; 0x01
	mirf_CSN_hi;
    20ca:	a8 e3       	ldi	r26, 0x38	; 56
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	e8 e3       	ldi	r30, 0x38	; 56
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	82 60       	ori	r24, 0x02	; 2
    20d6:	8c 93       	st	X, r24
	return status;
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    20da:	0f 90       	pop	r0
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <mirf_read_register>:

//read one register
uint8_t mirf_read_register(uint8_t reg)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <mirf_read_register+0x6>
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	8a 83       	std	Y+2, r24	; 0x02
	mirf_CSN_lo;
    20ee:	a8 e3       	ldi	r26, 0x38	; 56
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	e8 e3       	ldi	r30, 0x38	; 56
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	8d 7f       	andi	r24, 0xFD	; 253
    20fa:	8c 93       	st	X, r24
	spi_writeread(R_REGISTER | (REGISTER_MASK & reg));
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	8f 71       	andi	r24, 0x1F	; 31
    2100:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <spi_writeread>
    uint8_t result = spi_writeread(NOP);
    2104:	8f ef       	ldi	r24, 0xFF	; 255
    2106:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <spi_writeread>
    210a:	89 83       	std	Y+1, r24	; 0x01
    mirf_CSN_hi;
    210c:	a8 e3       	ldi	r26, 0x38	; 56
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e8 e3       	ldi	r30, 0x38	; 56
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	82 60       	ori	r24, 0x02	; 2
    2118:	8c 93       	st	X, r24
    return result;
    211a:	89 81       	ldd	r24, Y+1	; 0x01
}
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <mirf_read_registers>:

//read many registers
void mirf_read_registers(uint8_t reg, uint8_t *value, uint8_t len)
{
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	00 d0       	rcall	.+0      	; 0x2130 <mirf_read_registers+0xa>
    2130:	00 d0       	rcall	.+0      	; 0x2132 <mirf_read_registers+0xc>
    2132:	0f 92       	push	r0
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
    2138:	8a 83       	std	Y+2, r24	; 0x02
    213a:	7c 83       	std	Y+4, r23	; 0x04
    213c:	6b 83       	std	Y+3, r22	; 0x03
    213e:	4d 83       	std	Y+5, r20	; 0x05
    mirf_CSN_lo;
    2140:	a8 e3       	ldi	r26, 0x38	; 56
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e8 e3       	ldi	r30, 0x38	; 56
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	8d 7f       	andi	r24, 0xFD	; 253
    214c:	8c 93       	st	X, r24
    spi_writeread(R_REGISTER | (REGISTER_MASK & reg));
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	8f 71       	andi	r24, 0x1F	; 31
    2152:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <spi_writeread>
	for (uint8_t i = 0; i < len; i++)
    2156:	19 82       	std	Y+1, r1	; 0x01
    2158:	10 c0       	rjmp	.+32     	; 0x217a <mirf_read_registers+0x54>
		value[i] = spi_writeread(NOP);
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	9c 81       	ldd	r25, Y+4	; 0x04
    2164:	8c 01       	movw	r16, r24
    2166:	02 0f       	add	r16, r18
    2168:	13 1f       	adc	r17, r19
    216a:	8f ef       	ldi	r24, 0xFF	; 255
    216c:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <spi_writeread>
    2170:	f8 01       	movw	r30, r16
    2172:	80 83       	st	Z, r24
//read many registers
void mirf_read_registers(uint8_t reg, uint8_t *value, uint8_t len)
{
    mirf_CSN_lo;
    spi_writeread(R_REGISTER | (REGISTER_MASK & reg));
	for (uint8_t i = 0; i < len; i++)
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	8f 5f       	subi	r24, 0xFF	; 255
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	99 81       	ldd	r25, Y+1	; 0x01
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	98 17       	cp	r25, r24
    2180:	60 f3       	brcs	.-40     	; 0x215a <mirf_read_registers+0x34>
		value[i] = spi_writeread(NOP);
    mirf_CSN_hi;
    2182:	a8 e3       	ldi	r26, 0x38	; 56
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e8 e3       	ldi	r30, 0x38	; 56
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	82 60       	ori	r24, 0x02	; 2
    218e:	8c 93       	st	X, r24
}
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	1f 91       	pop	r17
    21a0:	0f 91       	pop	r16
    21a2:	08 95       	ret

000021a4 <mirf_write_register>:

//write one register
void mirf_write_register(uint8_t reg, uint8_t value)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <mirf_write_register+0x6>
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	6a 83       	std	Y+2, r22	; 0x02
	mirf_CSN_lo;
    21b2:	a8 e3       	ldi	r26, 0x38	; 56
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e8 e3       	ldi	r30, 0x38	; 56
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	8d 7f       	andi	r24, 0xFD	; 253
    21be:	8c 93       	st	X, r24
	spi_writeread(W_REGISTER | (REGISTER_MASK & reg));
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	8f 71       	andi	r24, 0x1F	; 31
    21c4:	80 62       	ori	r24, 0x20	; 32
    21c6:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <spi_writeread>
	spi_writeread(value);
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <spi_writeread>
	mirf_CSN_hi;
    21d0:	a8 e3       	ldi	r26, 0x38	; 56
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e8 e3       	ldi	r30, 0x38	; 56
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	82 60       	ori	r24, 0x02	; 2
    21dc:	8c 93       	st	X, r24
}
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <mirf_write_registers>:

//write many registers
void mirf_write_registers(uint8_t reg, uint8_t *value, uint8_t len)
{
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <mirf_write_registers+0x6>
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <mirf_write_registers+0x8>
    21f0:	0f 92       	push	r0
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	8a 83       	std	Y+2, r24	; 0x02
    21f8:	7c 83       	std	Y+4, r23	; 0x04
    21fa:	6b 83       	std	Y+3, r22	; 0x03
    21fc:	4d 83       	std	Y+5, r20	; 0x05
    mirf_CSN_lo;
    21fe:	a8 e3       	ldi	r26, 0x38	; 56
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e8 e3       	ldi	r30, 0x38	; 56
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	8d 7f       	andi	r24, 0xFD	; 253
    220a:	8c 93       	st	X, r24
    spi_writeread(W_REGISTER | (REGISTER_MASK & reg));
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	8f 71       	andi	r24, 0x1F	; 31
    2210:	80 62       	ori	r24, 0x20	; 32
    2212:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <spi_writeread>
	for (uint8_t i = 0; i < len; i++)
    2216:	19 82       	std	Y+1, r1	; 0x01
    2218:	0e c0       	rjmp	.+28     	; 0x2236 <mirf_write_registers+0x4e>
		 spi_writeread(value[i]);
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	9c 81       	ldd	r25, Y+4	; 0x04
    2224:	fc 01       	movw	r30, r24
    2226:	e2 0f       	add	r30, r18
    2228:	f3 1f       	adc	r31, r19
    222a:	80 81       	ld	r24, Z
    222c:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <spi_writeread>
//write many registers
void mirf_write_registers(uint8_t reg, uint8_t *value, uint8_t len)
{
    mirf_CSN_lo;
    spi_writeread(W_REGISTER | (REGISTER_MASK & reg));
	for (uint8_t i = 0; i < len; i++)
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	8f 5f       	subi	r24, 0xFF	; 255
    2234:	89 83       	std	Y+1, r24	; 0x01
    2236:	99 81       	ldd	r25, Y+1	; 0x01
    2238:	8d 81       	ldd	r24, Y+5	; 0x05
    223a:	98 17       	cp	r25, r24
    223c:	70 f3       	brcs	.-36     	; 0x221a <mirf_write_registers+0x32>
		 spi_writeread(value[i]);
    mirf_CSN_hi;
    223e:	a8 e3       	ldi	r26, 0x38	; 56
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e8 e3       	ldi	r30, 0x38	; 56
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	82 60       	ori	r24, 0x02	; 2
    224a:	8c 93       	st	X, r24
}
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <mirf_read_ready>:

//check if there is rx data
uint8_t mirf_read_ready()
{
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	0f 92       	push	r0
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    uint8_t status = mirf_get_status();
    2266:	0e 94 54 10 	call	0x20a8	; 0x20a8 <mirf_get_status>
    226a:	89 83       	std	Y+1, r24	; 0x01
    return status & (1<<RX_DR);
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	80 74       	andi	r24, 0x40	; 64
}
    2270:	0f 90       	pop	r0
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <mirf_read>:

//read data
void mirf_read(uint8_t *data)
{
    2278:	0f 93       	push	r16
    227a:	1f 93       	push	r17
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	00 d0       	rcall	.+0      	; 0x2282 <mirf_read+0xa>
    2282:	0f 92       	push	r0
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	9b 83       	std	Y+3, r25	; 0x03
    228a:	8a 83       	std	Y+2, r24	; 0x02
	//read rx register
    mirf_CSN_lo;
    228c:	a8 e3       	ldi	r26, 0x38	; 56
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	e8 e3       	ldi	r30, 0x38	; 56
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	8d 7f       	andi	r24, 0xFD	; 253
    2298:	8c 93       	st	X, r24
    spi_writeread( R_RX_PAYLOAD );
    229a:	81 e6       	ldi	r24, 0x61	; 97
    229c:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <spi_writeread>
    for (uint8_t i = 0; i < mirf_PAYLOAD; i++)
    22a0:	19 82       	std	Y+1, r1	; 0x01
    22a2:	10 c0       	rjmp	.+32     	; 0x22c4 <mirf_read+0x4c>
    	data[i] = spi_writeread(NOP);
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	9b 81       	ldd	r25, Y+3	; 0x03
    22ae:	8c 01       	movw	r16, r24
    22b0:	02 0f       	add	r16, r18
    22b2:	13 1f       	adc	r17, r19
    22b4:	8f ef       	ldi	r24, 0xFF	; 255
    22b6:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <spi_writeread>
    22ba:	f8 01       	movw	r30, r16
    22bc:	80 83       	st	Z, r24
void mirf_read(uint8_t *data)
{
	//read rx register
    mirf_CSN_lo;
    spi_writeread( R_RX_PAYLOAD );
    for (uint8_t i = 0; i < mirf_PAYLOAD; i++)
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	8f 5f       	subi	r24, 0xFF	; 255
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	80 31       	cpi	r24, 0x10	; 16
    22c8:	68 f3       	brcs	.-38     	; 0x22a4 <mirf_read+0x2c>
    	data[i] = spi_writeread(NOP);
    mirf_CSN_hi;
    22ca:	a8 e3       	ldi	r26, 0x38	; 56
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	e8 e3       	ldi	r30, 0x38	; 56
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	82 60       	ori	r24, 0x02	; 2
    22d6:	8c 93       	st	X, r24
    //reset register
    mirf_write_register(STATUS, (1<<RX_DR));
    22d8:	87 e0       	ldi	r24, 0x07	; 7
    22da:	60 e4       	ldi	r22, 0x40	; 64
    22dc:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <mirf_write_register>
}
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	08 95       	ret

000022f0 <mirf_printstatus>:

void mirf_printstatus()
{
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62

}
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <mirf_write>:

//write data
void mirf_write(uint8_t *data)
{
    22fe:	0f 93       	push	r16
    2300:	1f 93       	push	r17
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	cc 54       	subi	r28, 0x4C	; 76
    230c:	d0 40       	sbci	r29, 0x00	; 0
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	de bf       	out	0x3e, r29	; 62
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	cd bf       	out	0x3d, r28	; 61
    2318:	fe 01       	movw	r30, r28
    231a:	e5 5b       	subi	r30, 0xB5	; 181
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	80 83       	st	Z, r24
	//set tx mode
	mirf_CE_lo;
    2322:	a8 e3       	ldi	r26, 0x38	; 56
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e8 e3       	ldi	r30, 0x38	; 56
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	8e 7f       	andi	r24, 0xFE	; 254
    232e:	8c 93       	st	X, r24
	mirf_setTX;
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	6a e0       	ldi	r22, 0x0A	; 10
    2334:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <mirf_write_register>
    2338:	fe 01       	movw	r30, r28
    233a:	eb 5b       	subi	r30, 0xBB	; 187
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	a2 e0       	ldi	r26, 0x02	; 2
    2344:	b3 e4       	ldi	r27, 0x43	; 67
    2346:	80 83       	st	Z, r24
    2348:	91 83       	std	Z+1, r25	; 0x01
    234a:	a2 83       	std	Z+2, r26	; 0x02
    234c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    234e:	8e 01       	movw	r16, r28
    2350:	0f 5b       	subi	r16, 0xBF	; 191
    2352:	1f 4f       	sbci	r17, 0xFF	; 255
    2354:	fe 01       	movw	r30, r28
    2356:	eb 5b       	subi	r30, 0xBB	; 187
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	60 81       	ld	r22, Z
    235c:	71 81       	ldd	r23, Z+1	; 0x01
    235e:	82 81       	ldd	r24, Z+2	; 0x02
    2360:	93 81       	ldd	r25, Z+3	; 0x03
    2362:	2b ea       	ldi	r18, 0xAB	; 171
    2364:	3a ea       	ldi	r19, 0xAA	; 170
    2366:	4a ea       	ldi	r20, 0xAA	; 170
    2368:	5e e3       	ldi	r21, 0x3E	; 62
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	f8 01       	movw	r30, r16
    2374:	80 83       	st	Z, r24
    2376:	91 83       	std	Z+1, r25	; 0x01
    2378:	a2 83       	std	Z+2, r26	; 0x02
    237a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    237c:	fe 01       	movw	r30, r28
    237e:	ef 5b       	subi	r30, 0xBF	; 191
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	60 81       	ld	r22, Z
    2384:	71 81       	ldd	r23, Z+1	; 0x01
    2386:	82 81       	ldd	r24, Z+2	; 0x02
    2388:	93 81       	ldd	r25, Z+3	; 0x03
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e8       	ldi	r20, 0x80	; 128
    2390:	5f e3       	ldi	r21, 0x3F	; 63
    2392:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2396:	88 23       	and	r24, r24
    2398:	34 f4       	brge	.+12     	; 0x23a6 <mirf_write+0xa8>
		__ticks = 1;
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	fe 01       	movw	r30, r28
    239e:	e0 5c       	subi	r30, 0xC0	; 192
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	80 83       	st	Z, r24
    23a4:	9d c0       	rjmp	.+314    	; 0x24e0 <mirf_write+0x1e2>
	else if (__tmp > 255)
    23a6:	fe 01       	movw	r30, r28
    23a8:	ef 5b       	subi	r30, 0xBF	; 191
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	60 81       	ld	r22, Z
    23ae:	71 81       	ldd	r23, Z+1	; 0x01
    23b0:	82 81       	ldd	r24, Z+2	; 0x02
    23b2:	93 81       	ldd	r25, Z+3	; 0x03
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	4f e7       	ldi	r20, 0x7F	; 127
    23ba:	53 e4       	ldi	r21, 0x43	; 67
    23bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23c0:	18 16       	cp	r1, r24
    23c2:	0c f0       	brlt	.+2      	; 0x23c6 <mirf_write+0xc8>
    23c4:	7e c0       	rjmp	.+252    	; 0x24c2 <mirf_write+0x1c4>
	{
		_delay_ms(__us / 1000.0);
    23c6:	fe 01       	movw	r30, r28
    23c8:	eb 5b       	subi	r30, 0xBB	; 187
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	60 81       	ld	r22, Z
    23ce:	71 81       	ldd	r23, Z+1	; 0x01
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	4a e7       	ldi	r20, 0x7A	; 122
    23da:	54 e4       	ldi	r21, 0x44	; 68
    23dc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	8c af       	std	Y+60, r24	; 0x3c
    23e6:	9d af       	std	Y+61, r25	; 0x3d
    23e8:	ae af       	std	Y+62, r26	; 0x3e
    23ea:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ec:	6c ad       	ldd	r22, Y+60	; 0x3c
    23ee:	7d ad       	ldd	r23, Y+61	; 0x3d
    23f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    23f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	4a e7       	ldi	r20, 0x7A	; 122
    23fa:	53 e4       	ldi	r21, 0x43	; 67
    23fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	88 af       	std	Y+56, r24	; 0x38
    2406:	99 af       	std	Y+57, r25	; 0x39
    2408:	aa af       	std	Y+58, r26	; 0x3a
    240a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    240c:	68 ad       	ldd	r22, Y+56	; 0x38
    240e:	79 ad       	ldd	r23, Y+57	; 0x39
    2410:	8a ad       	ldd	r24, Y+58	; 0x3a
    2412:	9b ad       	ldd	r25, Y+59	; 0x3b
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e8       	ldi	r20, 0x80	; 128
    241a:	5f e3       	ldi	r21, 0x3F	; 63
    241c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2420:	88 23       	and	r24, r24
    2422:	2c f4       	brge	.+10     	; 0x242e <mirf_write+0x130>
		__ticks = 1;
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	9f ab       	std	Y+55, r25	; 0x37
    242a:	8e ab       	std	Y+54, r24	; 0x36
    242c:	3f c0       	rjmp	.+126    	; 0x24ac <mirf_write+0x1ae>
	else if (__tmp > 65535)
    242e:	68 ad       	ldd	r22, Y+56	; 0x38
    2430:	79 ad       	ldd	r23, Y+57	; 0x39
    2432:	8a ad       	ldd	r24, Y+58	; 0x3a
    2434:	9b ad       	ldd	r25, Y+59	; 0x3b
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	3f ef       	ldi	r19, 0xFF	; 255
    243a:	4f e7       	ldi	r20, 0x7F	; 127
    243c:	57 e4       	ldi	r21, 0x47	; 71
    243e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2442:	18 16       	cp	r1, r24
    2444:	4c f5       	brge	.+82     	; 0x2498 <mirf_write+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2446:	6c ad       	ldd	r22, Y+60	; 0x3c
    2448:	7d ad       	ldd	r23, Y+61	; 0x3d
    244a:	8e ad       	ldd	r24, Y+62	; 0x3e
    244c:	9f ad       	ldd	r25, Y+63	; 0x3f
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e2       	ldi	r20, 0x20	; 32
    2454:	51 e4       	ldi	r21, 0x41	; 65
    2456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	bc 01       	movw	r22, r24
    2460:	cd 01       	movw	r24, r26
    2462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	9f ab       	std	Y+55, r25	; 0x37
    246c:	8e ab       	std	Y+54, r24	; 0x36
    246e:	0f c0       	rjmp	.+30     	; 0x248e <mirf_write+0x190>
    2470:	89 e1       	ldi	r24, 0x19	; 25
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	9d ab       	std	Y+53, r25	; 0x35
    2476:	8c ab       	std	Y+52, r24	; 0x34
    2478:	8c a9       	ldd	r24, Y+52	; 0x34
    247a:	9d a9       	ldd	r25, Y+53	; 0x35
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <mirf_write+0x17e>
    2480:	9d ab       	std	Y+53, r25	; 0x35
    2482:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2484:	8e a9       	ldd	r24, Y+54	; 0x36
    2486:	9f a9       	ldd	r25, Y+55	; 0x37
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	9f ab       	std	Y+55, r25	; 0x37
    248c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248e:	8e a9       	ldd	r24, Y+54	; 0x36
    2490:	9f a9       	ldd	r25, Y+55	; 0x37
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	69 f7       	brne	.-38     	; 0x2470 <mirf_write+0x172>
    2496:	2d c0       	rjmp	.+90     	; 0x24f2 <mirf_write+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2498:	68 ad       	ldd	r22, Y+56	; 0x38
    249a:	79 ad       	ldd	r23, Y+57	; 0x39
    249c:	8a ad       	ldd	r24, Y+58	; 0x3a
    249e:	9b ad       	ldd	r25, Y+59	; 0x3b
    24a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	9f ab       	std	Y+55, r25	; 0x37
    24aa:	8e ab       	std	Y+54, r24	; 0x36
    24ac:	8e a9       	ldd	r24, Y+54	; 0x36
    24ae:	9f a9       	ldd	r25, Y+55	; 0x37
    24b0:	9b ab       	std	Y+51, r25	; 0x33
    24b2:	8a ab       	std	Y+50, r24	; 0x32
    24b4:	8a a9       	ldd	r24, Y+50	; 0x32
    24b6:	9b a9       	ldd	r25, Y+51	; 0x33
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <mirf_write+0x1ba>
    24bc:	9b ab       	std	Y+51, r25	; 0x33
    24be:	8a ab       	std	Y+50, r24	; 0x32
    24c0:	18 c0       	rjmp	.+48     	; 0x24f2 <mirf_write+0x1f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24c2:	fe 01       	movw	r30, r28
    24c4:	ef 5b       	subi	r30, 0xBF	; 191
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	60 81       	ld	r22, Z
    24ca:	71 81       	ldd	r23, Z+1	; 0x01
    24cc:	82 81       	ldd	r24, Z+2	; 0x02
    24ce:	93 81       	ldd	r25, Z+3	; 0x03
    24d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	fe 01       	movw	r30, r28
    24da:	e0 5c       	subi	r30, 0xC0	; 192
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	80 83       	st	Z, r24
    24e0:	fe 01       	movw	r30, r28
    24e2:	e0 5c       	subi	r30, 0xC0	; 192
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	80 81       	ld	r24, Z
    24e8:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24ea:	89 a9       	ldd	r24, Y+49	; 0x31
    24ec:	8a 95       	dec	r24
    24ee:	f1 f7       	brne	.-4      	; 0x24ec <mirf_write+0x1ee>
    24f0:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(130);

	//flush tx fifo
	mirf_CSN_lo;
    24f2:	a8 e3       	ldi	r26, 0x38	; 56
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e8 e3       	ldi	r30, 0x38	; 56
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	8d 7f       	andi	r24, 0xFD	; 253
    24fe:	8c 93       	st	X, r24
	spi_writeread(FLUSH_TX);
    2500:	81 ee       	ldi	r24, 0xE1	; 225
    2502:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <spi_writeread>
	mirf_CSN_hi;
    2506:	a8 e3       	ldi	r26, 0x38	; 56
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	e8 e3       	ldi	r30, 0x38	; 56
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	82 60       	ori	r24, 0x02	; 2
    2512:	8c 93       	st	X, r24

	//write data
	mirf_CSN_lo;
    2514:	a8 e3       	ldi	r26, 0x38	; 56
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e8 e3       	ldi	r30, 0x38	; 56
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	8d 7f       	andi	r24, 0xFD	; 253
    2520:	8c 93       	st	X, r24
	spi_writeread( W_TX_PAYLOAD );
    2522:	80 ea       	ldi	r24, 0xA0	; 160
    2524:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <spi_writeread>
	for (uint8_t i = 0; i < mirf_PAYLOAD; i++)
    2528:	fe 01       	movw	r30, r28
    252a:	e7 5b       	subi	r30, 0xB7	; 183
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	10 82       	st	Z, r1
    2530:	1a c0       	rjmp	.+52     	; 0x2566 <mirf_write+0x268>
		spi_writeread(data[i]);
    2532:	fe 01       	movw	r30, r28
    2534:	e7 5b       	subi	r30, 0xB7	; 183
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	80 81       	ld	r24, Z
    253a:	28 2f       	mov	r18, r24
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	fe 01       	movw	r30, r28
    2540:	e5 5b       	subi	r30, 0xB5	; 181
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	80 81       	ld	r24, Z
    2546:	91 81       	ldd	r25, Z+1	; 0x01
    2548:	fc 01       	movw	r30, r24
    254a:	e2 0f       	add	r30, r18
    254c:	f3 1f       	adc	r31, r19
    254e:	80 81       	ld	r24, Z
    2550:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <spi_writeread>
	mirf_CSN_hi;

	//write data
	mirf_CSN_lo;
	spi_writeread( W_TX_PAYLOAD );
	for (uint8_t i = 0; i < mirf_PAYLOAD; i++)
    2554:	de 01       	movw	r26, r28
    2556:	a7 5b       	subi	r26, 0xB7	; 183
    2558:	bf 4f       	sbci	r27, 0xFF	; 255
    255a:	fe 01       	movw	r30, r28
    255c:	e7 5b       	subi	r30, 0xB7	; 183
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	80 81       	ld	r24, Z
    2562:	8f 5f       	subi	r24, 0xFF	; 255
    2564:	8c 93       	st	X, r24
    2566:	fe 01       	movw	r30, r28
    2568:	e7 5b       	subi	r30, 0xB7	; 183
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	80 81       	ld	r24, Z
    256e:	80 31       	cpi	r24, 0x10	; 16
    2570:	00 f3       	brcs	.-64     	; 0x2532 <mirf_write+0x234>
		spi_writeread(data[i]);
	mirf_CSN_hi;
    2572:	a8 e3       	ldi	r26, 0x38	; 56
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	e8 e3       	ldi	r30, 0x38	; 56
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	82 60       	ori	r24, 0x02	; 2
    257e:	8c 93       	st	X, r24

	//start transmission
	mirf_CE_hi;
    2580:	a8 e3       	ldi	r26, 0x38	; 56
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	e8 e3       	ldi	r30, 0x38	; 56
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	81 60       	ori	r24, 0x01	; 1
    258c:	8c 93       	st	X, r24
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	a0 e2       	ldi	r26, 0x20	; 32
    2594:	b1 e4       	ldi	r27, 0x41	; 65
    2596:	8d a7       	std	Y+45, r24	; 0x2d
    2598:	9e a7       	std	Y+46, r25	; 0x2e
    259a:	af a7       	std	Y+47, r26	; 0x2f
    259c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    259e:	6d a5       	ldd	r22, Y+45	; 0x2d
    25a0:	7e a5       	ldd	r23, Y+46	; 0x2e
    25a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a4:	98 a9       	ldd	r25, Y+48	; 0x30
    25a6:	2b ea       	ldi	r18, 0xAB	; 171
    25a8:	3a ea       	ldi	r19, 0xAA	; 170
    25aa:	4a ea       	ldi	r20, 0xAA	; 170
    25ac:	5e e3       	ldi	r21, 0x3E	; 62
    25ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	89 a7       	std	Y+41, r24	; 0x29
    25b8:	9a a7       	std	Y+42, r25	; 0x2a
    25ba:	ab a7       	std	Y+43, r26	; 0x2b
    25bc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    25be:	69 a5       	ldd	r22, Y+41	; 0x29
    25c0:	7a a5       	ldd	r23, Y+42	; 0x2a
    25c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    25c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	40 e8       	ldi	r20, 0x80	; 128
    25cc:	5f e3       	ldi	r21, 0x3F	; 63
    25ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d2:	88 23       	and	r24, r24
    25d4:	1c f4       	brge	.+6      	; 0x25dc <mirf_write+0x2de>
		__ticks = 1;
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	88 a7       	std	Y+40, r24	; 0x28
    25da:	91 c0       	rjmp	.+290    	; 0x26fe <mirf_write+0x400>
	else if (__tmp > 255)
    25dc:	69 a5       	ldd	r22, Y+41	; 0x29
    25de:	7a a5       	ldd	r23, Y+42	; 0x2a
    25e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    25e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	4f e7       	ldi	r20, 0x7F	; 127
    25ea:	53 e4       	ldi	r21, 0x43	; 67
    25ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25f0:	18 16       	cp	r1, r24
    25f2:	0c f0       	brlt	.+2      	; 0x25f6 <mirf_write+0x2f8>
    25f4:	7b c0       	rjmp	.+246    	; 0x26ec <mirf_write+0x3ee>
	{
		_delay_ms(__us / 1000.0);
    25f6:	6d a5       	ldd	r22, Y+45	; 0x2d
    25f8:	7e a5       	ldd	r23, Y+46	; 0x2e
    25fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    25fc:	98 a9       	ldd	r25, Y+48	; 0x30
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	4a e7       	ldi	r20, 0x7A	; 122
    2604:	54 e4       	ldi	r21, 0x44	; 68
    2606:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	8c a3       	std	Y+36, r24	; 0x24
    2610:	9d a3       	std	Y+37, r25	; 0x25
    2612:	ae a3       	std	Y+38, r26	; 0x26
    2614:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2616:	6c a1       	ldd	r22, Y+36	; 0x24
    2618:	7d a1       	ldd	r23, Y+37	; 0x25
    261a:	8e a1       	ldd	r24, Y+38	; 0x26
    261c:	9f a1       	ldd	r25, Y+39	; 0x27
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	4a e7       	ldi	r20, 0x7A	; 122
    2624:	53 e4       	ldi	r21, 0x43	; 67
    2626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	88 a3       	std	Y+32, r24	; 0x20
    2630:	99 a3       	std	Y+33, r25	; 0x21
    2632:	aa a3       	std	Y+34, r26	; 0x22
    2634:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2636:	68 a1       	ldd	r22, Y+32	; 0x20
    2638:	79 a1       	ldd	r23, Y+33	; 0x21
    263a:	8a a1       	ldd	r24, Y+34	; 0x22
    263c:	9b a1       	ldd	r25, Y+35	; 0x23
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e8       	ldi	r20, 0x80	; 128
    2644:	5f e3       	ldi	r21, 0x3F	; 63
    2646:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    264a:	88 23       	and	r24, r24
    264c:	2c f4       	brge	.+10     	; 0x2658 <mirf_write+0x35a>
		__ticks = 1;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	9f 8f       	std	Y+31, r25	; 0x1f
    2654:	8e 8f       	std	Y+30, r24	; 0x1e
    2656:	3f c0       	rjmp	.+126    	; 0x26d6 <mirf_write+0x3d8>
	else if (__tmp > 65535)
    2658:	68 a1       	ldd	r22, Y+32	; 0x20
    265a:	79 a1       	ldd	r23, Y+33	; 0x21
    265c:	8a a1       	ldd	r24, Y+34	; 0x22
    265e:	9b a1       	ldd	r25, Y+35	; 0x23
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	3f ef       	ldi	r19, 0xFF	; 255
    2664:	4f e7       	ldi	r20, 0x7F	; 127
    2666:	57 e4       	ldi	r21, 0x47	; 71
    2668:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    266c:	18 16       	cp	r1, r24
    266e:	4c f5       	brge	.+82     	; 0x26c2 <mirf_write+0x3c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2670:	6c a1       	ldd	r22, Y+36	; 0x24
    2672:	7d a1       	ldd	r23, Y+37	; 0x25
    2674:	8e a1       	ldd	r24, Y+38	; 0x26
    2676:	9f a1       	ldd	r25, Y+39	; 0x27
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e2       	ldi	r20, 0x20	; 32
    267e:	51 e4       	ldi	r21, 0x41	; 65
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	bc 01       	movw	r22, r24
    268a:	cd 01       	movw	r24, r26
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9f 8f       	std	Y+31, r25	; 0x1f
    2696:	8e 8f       	std	Y+30, r24	; 0x1e
    2698:	0f c0       	rjmp	.+30     	; 0x26b8 <mirf_write+0x3ba>
    269a:	89 e1       	ldi	r24, 0x19	; 25
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9d 8f       	std	Y+29, r25	; 0x1d
    26a0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26a4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	f1 f7       	brne	.-4      	; 0x26a6 <mirf_write+0x3a8>
    26aa:	9d 8f       	std	Y+29, r25	; 0x1d
    26ac:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26b0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	9f 8f       	std	Y+31, r25	; 0x1f
    26b6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26ba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	69 f7       	brne	.-38     	; 0x269a <mirf_write+0x39c>
    26c0:	24 c0       	rjmp	.+72     	; 0x270a <mirf_write+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c2:	68 a1       	ldd	r22, Y+32	; 0x20
    26c4:	79 a1       	ldd	r23, Y+33	; 0x21
    26c6:	8a a1       	ldd	r24, Y+34	; 0x22
    26c8:	9b a1       	ldd	r25, Y+35	; 0x23
    26ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	9f 8f       	std	Y+31, r25	; 0x1f
    26d4:	8e 8f       	std	Y+30, r24	; 0x1e
    26d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26d8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26da:	9b 8f       	std	Y+27, r25	; 0x1b
    26dc:	8a 8f       	std	Y+26, r24	; 0x1a
    26de:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <mirf_write+0x3e4>
    26e6:	9b 8f       	std	Y+27, r25	; 0x1b
    26e8:	8a 8f       	std	Y+26, r24	; 0x1a
    26ea:	0f c0       	rjmp	.+30     	; 0x270a <mirf_write+0x40c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26ec:	69 a5       	ldd	r22, Y+41	; 0x29
    26ee:	7a a5       	ldd	r23, Y+42	; 0x2a
    26f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    26f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	88 a7       	std	Y+40, r24	; 0x28
    26fe:	88 a5       	ldd	r24, Y+40	; 0x28
    2700:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2702:	89 8d       	ldd	r24, Y+25	; 0x19
    2704:	8a 95       	dec	r24
    2706:	f1 f7       	brne	.-4      	; 0x2704 <mirf_write+0x406>
    2708:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	mirf_CE_lo;
    270a:	a8 e3       	ldi	r26, 0x38	; 56
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e8 e3       	ldi	r30, 0x38	; 56
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	8e 7f       	andi	r24, 0xFE	; 254
    2716:	8c 93       	st	X, r24

	//wait for the transmission to stop
	uint8_t breaked = 0;
    2718:	fe 01       	movw	r30, r28
    271a:	e6 5b       	subi	r30, 0xB6	; 182
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	10 82       	st	Z, r1
	do
	{
		//stop if max_retries reached
		if((mirf_read_register(OBSERVE_TX) & 0b1111) == mirf_RETR)
    2720:	88 e0       	ldi	r24, 0x08	; 8
    2722:	0e 94 71 10 	call	0x20e2	; 0x20e2 <mirf_read_register>
    2726:	88 2f       	mov	r24, r24
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	8f 70       	andi	r24, 0x0F	; 15
    272c:	90 70       	andi	r25, 0x00	; 0
    272e:	86 30       	cpi	r24, 0x06	; 6
    2730:	91 05       	cpc	r25, r1
    2732:	31 f4       	brne	.+12     	; 0x2740 <mirf_write+0x442>
		{
			breaked = 1;
    2734:	fe 01       	movw	r30, r28
    2736:	e6 5b       	subi	r30, 0xB6	; 182
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	80 83       	st	Z, r24
    273e:	c7 c0       	rjmp	.+398    	; 0x28ce <mirf_write+0x5d0>
			break;
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	a0 e2       	ldi	r26, 0x20	; 32
    2746:	b1 e4       	ldi	r27, 0x41	; 65
    2748:	8d 8b       	std	Y+21, r24	; 0x15
    274a:	9e 8b       	std	Y+22, r25	; 0x16
    274c:	af 8b       	std	Y+23, r26	; 0x17
    274e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2750:	6d 89       	ldd	r22, Y+21	; 0x15
    2752:	7e 89       	ldd	r23, Y+22	; 0x16
    2754:	8f 89       	ldd	r24, Y+23	; 0x17
    2756:	98 8d       	ldd	r25, Y+24	; 0x18
    2758:	2b ea       	ldi	r18, 0xAB	; 171
    275a:	3a ea       	ldi	r19, 0xAA	; 170
    275c:	4a ea       	ldi	r20, 0xAA	; 170
    275e:	5e e3       	ldi	r21, 0x3E	; 62
    2760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	89 8b       	std	Y+17, r24	; 0x11
    276a:	9a 8b       	std	Y+18, r25	; 0x12
    276c:	ab 8b       	std	Y+19, r26	; 0x13
    276e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2770:	69 89       	ldd	r22, Y+17	; 0x11
    2772:	7a 89       	ldd	r23, Y+18	; 0x12
    2774:	8b 89       	ldd	r24, Y+19	; 0x13
    2776:	9c 89       	ldd	r25, Y+20	; 0x14
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e8       	ldi	r20, 0x80	; 128
    277e:	5f e3       	ldi	r21, 0x3F	; 63
    2780:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2784:	88 23       	and	r24, r24
    2786:	1c f4       	brge	.+6      	; 0x278e <mirf_write+0x490>
		__ticks = 1;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	88 8b       	std	Y+16, r24	; 0x10
    278c:	91 c0       	rjmp	.+290    	; 0x28b0 <mirf_write+0x5b2>
	else if (__tmp > 255)
    278e:	69 89       	ldd	r22, Y+17	; 0x11
    2790:	7a 89       	ldd	r23, Y+18	; 0x12
    2792:	8b 89       	ldd	r24, Y+19	; 0x13
    2794:	9c 89       	ldd	r25, Y+20	; 0x14
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	4f e7       	ldi	r20, 0x7F	; 127
    279c:	53 e4       	ldi	r21, 0x43	; 67
    279e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27a2:	18 16       	cp	r1, r24
    27a4:	0c f0       	brlt	.+2      	; 0x27a8 <mirf_write+0x4aa>
    27a6:	7b c0       	rjmp	.+246    	; 0x289e <mirf_write+0x5a0>
	{
		_delay_ms(__us / 1000.0);
    27a8:	6d 89       	ldd	r22, Y+21	; 0x15
    27aa:	7e 89       	ldd	r23, Y+22	; 0x16
    27ac:	8f 89       	ldd	r24, Y+23	; 0x17
    27ae:	98 8d       	ldd	r25, Y+24	; 0x18
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	4a e7       	ldi	r20, 0x7A	; 122
    27b6:	54 e4       	ldi	r21, 0x44	; 68
    27b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	8c 87       	std	Y+12, r24	; 0x0c
    27c2:	9d 87       	std	Y+13, r25	; 0x0d
    27c4:	ae 87       	std	Y+14, r26	; 0x0e
    27c6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    27ca:	7d 85       	ldd	r23, Y+13	; 0x0d
    27cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	4a e7       	ldi	r20, 0x7A	; 122
    27d6:	53 e4       	ldi	r21, 0x43	; 67
    27d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	88 87       	std	Y+8, r24	; 0x08
    27e2:	99 87       	std	Y+9, r25	; 0x09
    27e4:	aa 87       	std	Y+10, r26	; 0x0a
    27e6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27e8:	68 85       	ldd	r22, Y+8	; 0x08
    27ea:	79 85       	ldd	r23, Y+9	; 0x09
    27ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    27ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e8       	ldi	r20, 0x80	; 128
    27f6:	5f e3       	ldi	r21, 0x3F	; 63
    27f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27fc:	88 23       	and	r24, r24
    27fe:	2c f4       	brge	.+10     	; 0x280a <mirf_write+0x50c>
		__ticks = 1;
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9f 83       	std	Y+7, r25	; 0x07
    2806:	8e 83       	std	Y+6, r24	; 0x06
    2808:	3f c0       	rjmp	.+126    	; 0x2888 <mirf_write+0x58a>
	else if (__tmp > 65535)
    280a:	68 85       	ldd	r22, Y+8	; 0x08
    280c:	79 85       	ldd	r23, Y+9	; 0x09
    280e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2810:	9b 85       	ldd	r25, Y+11	; 0x0b
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	3f ef       	ldi	r19, 0xFF	; 255
    2816:	4f e7       	ldi	r20, 0x7F	; 127
    2818:	57 e4       	ldi	r21, 0x47	; 71
    281a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    281e:	18 16       	cp	r1, r24
    2820:	4c f5       	brge	.+82     	; 0x2874 <mirf_write+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2822:	6c 85       	ldd	r22, Y+12	; 0x0c
    2824:	7d 85       	ldd	r23, Y+13	; 0x0d
    2826:	8e 85       	ldd	r24, Y+14	; 0x0e
    2828:	9f 85       	ldd	r25, Y+15	; 0x0f
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e2       	ldi	r20, 0x20	; 32
    2830:	51 e4       	ldi	r21, 0x41	; 65
    2832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	bc 01       	movw	r22, r24
    283c:	cd 01       	movw	r24, r26
    283e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	9f 83       	std	Y+7, r25	; 0x07
    2848:	8e 83       	std	Y+6, r24	; 0x06
    284a:	0f c0       	rjmp	.+30     	; 0x286a <mirf_write+0x56c>
    284c:	89 e1       	ldi	r24, 0x19	; 25
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	9d 83       	std	Y+5, r25	; 0x05
    2852:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2854:	8c 81       	ldd	r24, Y+4	; 0x04
    2856:	9d 81       	ldd	r25, Y+5	; 0x05
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	f1 f7       	brne	.-4      	; 0x2858 <mirf_write+0x55a>
    285c:	9d 83       	std	Y+5, r25	; 0x05
    285e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2860:	8e 81       	ldd	r24, Y+6	; 0x06
    2862:	9f 81       	ldd	r25, Y+7	; 0x07
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	9f 83       	std	Y+7, r25	; 0x07
    2868:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286a:	8e 81       	ldd	r24, Y+6	; 0x06
    286c:	9f 81       	ldd	r25, Y+7	; 0x07
    286e:	00 97       	sbiw	r24, 0x00	; 0
    2870:	69 f7       	brne	.-38     	; 0x284c <mirf_write+0x54e>
    2872:	24 c0       	rjmp	.+72     	; 0x28bc <mirf_write+0x5be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2874:	68 85       	ldd	r22, Y+8	; 0x08
    2876:	79 85       	ldd	r23, Y+9	; 0x09
    2878:	8a 85       	ldd	r24, Y+10	; 0x0a
    287a:	9b 85       	ldd	r25, Y+11	; 0x0b
    287c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	9f 83       	std	Y+7, r25	; 0x07
    2886:	8e 83       	std	Y+6, r24	; 0x06
    2888:	8e 81       	ldd	r24, Y+6	; 0x06
    288a:	9f 81       	ldd	r25, Y+7	; 0x07
    288c:	9b 83       	std	Y+3, r25	; 0x03
    288e:	8a 83       	std	Y+2, r24	; 0x02
    2890:	8a 81       	ldd	r24, Y+2	; 0x02
    2892:	9b 81       	ldd	r25, Y+3	; 0x03
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	f1 f7       	brne	.-4      	; 0x2894 <mirf_write+0x596>
    2898:	9b 83       	std	Y+3, r25	; 0x03
    289a:	8a 83       	std	Y+2, r24	; 0x02
    289c:	0f c0       	rjmp	.+30     	; 0x28bc <mirf_write+0x5be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    289e:	69 89       	ldd	r22, Y+17	; 0x11
    28a0:	7a 89       	ldd	r23, Y+18	; 0x12
    28a2:	8b 89       	ldd	r24, Y+19	; 0x13
    28a4:	9c 89       	ldd	r25, Y+20	; 0x14
    28a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	88 8b       	std	Y+16, r24	; 0x10
    28b0:	88 89       	ldd	r24, Y+16	; 0x10
    28b2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	8a 95       	dec	r24
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <mirf_write+0x5b8>
    28ba:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_us(10);
	}
	while( !(mirf_get_status() & _BV(TX_DS)) );
    28bc:	0e 94 54 10 	call	0x20a8	; 0x20a8 <mirf_get_status>
    28c0:	88 2f       	mov	r24, r24
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	80 72       	andi	r24, 0x20	; 32
    28c6:	90 70       	andi	r25, 0x00	; 0
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	09 f4       	brne	.+2      	; 0x28ce <mirf_write+0x5d0>
    28cc:	29 cf       	rjmp	.-430    	; 0x2720 <mirf_write+0x422>

	//reset OBSERVE_TX
	if(breaked == 1)
    28ce:	fe 01       	movw	r30, r28
    28d0:	e6 5b       	subi	r30, 0xB6	; 182
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	80 81       	ld	r24, Z
    28d6:	81 30       	cpi	r24, 0x01	; 1
    28d8:	21 f4       	brne	.+8      	; 0x28e2 <mirf_write+0x5e4>
		mirf_write_register(RF_CH, mirf_CH);
    28da:	85 e0       	ldi	r24, 0x05	; 5
    28dc:	62 e0       	ldi	r22, 0x02	; 2
    28de:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <mirf_write_register>

	//reset registers
	mirf_write_register(STATUS, (1<<TX_DS)|(1<<MAX_RT));
    28e2:	87 e0       	ldi	r24, 0x07	; 7
    28e4:	60 e3       	ldi	r22, 0x30	; 48
    28e6:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <mirf_write_register>

	//set rx mode
	mirf_setRX;
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	6b e0       	ldi	r22, 0x0B	; 11
    28ee:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <mirf_write_register>
	mirf_CE_hi;
    28f2:	a8 e3       	ldi	r26, 0x38	; 56
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	e8 e3       	ldi	r30, 0x38	; 56
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	81 60       	ori	r24, 0x01	; 1
    28fe:	8c 93       	st	X, r24
}
    2900:	c4 5b       	subi	r28, 0xB4	; 180
    2902:	df 4f       	sbci	r29, 0xFF	; 255
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	de bf       	out	0x3e, r29	; 62
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	cd bf       	out	0x3d, r28	; 61
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	1f 91       	pop	r17
    2914:	0f 91       	pop	r16
    2916:	08 95       	ret

00002918 <__prologue_saves__>:
    2918:	2f 92       	push	r2
    291a:	3f 92       	push	r3
    291c:	4f 92       	push	r4
    291e:	5f 92       	push	r5
    2920:	6f 92       	push	r6
    2922:	7f 92       	push	r7
    2924:	8f 92       	push	r8
    2926:	9f 92       	push	r9
    2928:	af 92       	push	r10
    292a:	bf 92       	push	r11
    292c:	cf 92       	push	r12
    292e:	df 92       	push	r13
    2930:	ef 92       	push	r14
    2932:	ff 92       	push	r15
    2934:	0f 93       	push	r16
    2936:	1f 93       	push	r17
    2938:	cf 93       	push	r28
    293a:	df 93       	push	r29
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	ca 1b       	sub	r28, r26
    2942:	db 0b       	sbc	r29, r27
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
    294e:	09 94       	ijmp

00002950 <__epilogue_restores__>:
    2950:	2a 88       	ldd	r2, Y+18	; 0x12
    2952:	39 88       	ldd	r3, Y+17	; 0x11
    2954:	48 88       	ldd	r4, Y+16	; 0x10
    2956:	5f 84       	ldd	r5, Y+15	; 0x0f
    2958:	6e 84       	ldd	r6, Y+14	; 0x0e
    295a:	7d 84       	ldd	r7, Y+13	; 0x0d
    295c:	8c 84       	ldd	r8, Y+12	; 0x0c
    295e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2960:	aa 84       	ldd	r10, Y+10	; 0x0a
    2962:	b9 84       	ldd	r11, Y+9	; 0x09
    2964:	c8 84       	ldd	r12, Y+8	; 0x08
    2966:	df 80       	ldd	r13, Y+7	; 0x07
    2968:	ee 80       	ldd	r14, Y+6	; 0x06
    296a:	fd 80       	ldd	r15, Y+5	; 0x05
    296c:	0c 81       	ldd	r16, Y+4	; 0x04
    296e:	1b 81       	ldd	r17, Y+3	; 0x03
    2970:	aa 81       	ldd	r26, Y+2	; 0x02
    2972:	b9 81       	ldd	r27, Y+1	; 0x01
    2974:	ce 0f       	add	r28, r30
    2976:	d1 1d       	adc	r29, r1
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	f8 94       	cli
    297c:	de bf       	out	0x3e, r29	; 62
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	cd bf       	out	0x3d, r28	; 61
    2982:	ed 01       	movw	r28, r26
    2984:	08 95       	ret

00002986 <_exit>:
    2986:	f8 94       	cli

00002988 <__stop_program>:
    2988:	ff cf       	rjmp	.-2      	; 0x2988 <__stop_program>
