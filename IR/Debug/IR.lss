
IR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00000cda  00000d6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080017a  0080017a  00000e88  2**0
                  ALLOC
  3 .stab         00001140  00000000  00000000  00000e88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bd8  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  00002ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000080  00000000  00000000  00002c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006a6  00000000  00000000  00002c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000436  00000000  00000000  00003326  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003e0  00000000  00000000  0000375c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000060  00000000  00000000  00003b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001f4  00000000  00000000  00003b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000027e  00000000  00000000  00003d90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 84 04 	jmp	0x908	; 0x908 <__vector_1>
   8:	0c 94 b1 04 	jmp	0x962	; 0x962 <__vector_2>
   c:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c0 05 	call	0xb80	; 0xb80 <main>
  8a:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__floatsisf>:
  92:	a8 e0       	ldi	r26, 0x08	; 8
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	ef e4       	ldi	r30, 0x4F	; 79
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__prologue_saves__+0x12>
  9e:	9b 01       	movw	r18, r22
  a0:	ac 01       	movw	r20, r24
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	89 83       	std	Y+1, r24	; 0x01
  a6:	da 01       	movw	r26, r20
  a8:	c9 01       	movw	r24, r18
  aa:	88 27       	eor	r24, r24
  ac:	b7 fd       	sbrc	r27, 7
  ae:	83 95       	inc	r24
  b0:	99 27       	eor	r25, r25
  b2:	aa 27       	eor	r26, r26
  b4:	bb 27       	eor	r27, r27
  b6:	b8 2e       	mov	r11, r24
  b8:	21 15       	cp	r18, r1
  ba:	31 05       	cpc	r19, r1
  bc:	41 05       	cpc	r20, r1
  be:	51 05       	cpc	r21, r1
  c0:	19 f4       	brne	.+6      	; 0xc8 <__floatsisf+0x36>
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	89 83       	std	Y+1, r24	; 0x01
  c6:	3a c0       	rjmp	.+116    	; 0x13c <__floatsisf+0xaa>
  c8:	88 23       	and	r24, r24
  ca:	a9 f0       	breq	.+42     	; 0xf6 <__floatsisf+0x64>
  cc:	20 30       	cpi	r18, 0x00	; 0
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	38 07       	cpc	r19, r24
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	48 07       	cpc	r20, r24
  d6:	80 e8       	ldi	r24, 0x80	; 128
  d8:	58 07       	cpc	r21, r24
  da:	29 f4       	brne	.+10     	; 0xe6 <__floatsisf+0x54>
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	9f ec       	ldi	r25, 0xCF	; 207
  e4:	30 c0       	rjmp	.+96     	; 0x146 <__floatsisf+0xb4>
  e6:	ee 24       	eor	r14, r14
  e8:	ff 24       	eor	r15, r15
  ea:	87 01       	movw	r16, r14
  ec:	e2 1a       	sub	r14, r18
  ee:	f3 0a       	sbc	r15, r19
  f0:	04 0b       	sbc	r16, r20
  f2:	15 0b       	sbc	r17, r21
  f4:	02 c0       	rjmp	.+4      	; 0xfa <__floatsisf+0x68>
  f6:	79 01       	movw	r14, r18
  f8:	8a 01       	movw	r16, r20
  fa:	8e e1       	ldi	r24, 0x1E	; 30
  fc:	c8 2e       	mov	r12, r24
  fe:	d1 2c       	mov	r13, r1
 100:	dc 82       	std	Y+4, r13	; 0x04
 102:	cb 82       	std	Y+3, r12	; 0x03
 104:	ed 82       	std	Y+5, r14	; 0x05
 106:	fe 82       	std	Y+6, r15	; 0x06
 108:	0f 83       	std	Y+7, r16	; 0x07
 10a:	18 87       	std	Y+8, r17	; 0x08
 10c:	c8 01       	movw	r24, r16
 10e:	b7 01       	movw	r22, r14
 110:	0e 94 a7 00 	call	0x14e	; 0x14e <__clzsi2>
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	18 16       	cp	r1, r24
 118:	19 06       	cpc	r1, r25
 11a:	84 f4       	brge	.+32     	; 0x13c <__floatsisf+0xaa>
 11c:	08 2e       	mov	r0, r24
 11e:	04 c0       	rjmp	.+8      	; 0x128 <__floatsisf+0x96>
 120:	ee 0c       	add	r14, r14
 122:	ff 1c       	adc	r15, r15
 124:	00 1f       	adc	r16, r16
 126:	11 1f       	adc	r17, r17
 128:	0a 94       	dec	r0
 12a:	d2 f7       	brpl	.-12     	; 0x120 <__floatsisf+0x8e>
 12c:	ed 82       	std	Y+5, r14	; 0x05
 12e:	fe 82       	std	Y+6, r15	; 0x06
 130:	0f 83       	std	Y+7, r16	; 0x07
 132:	18 87       	std	Y+8, r17	; 0x08
 134:	c8 1a       	sub	r12, r24
 136:	d9 0a       	sbc	r13, r25
 138:	dc 82       	std	Y+4, r13	; 0x04
 13a:	cb 82       	std	Y+3, r12	; 0x03
 13c:	ba 82       	std	Y+2, r11	; 0x02
 13e:	ce 01       	movw	r24, r28
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__pack_f>
 146:	28 96       	adiw	r28, 0x08	; 8
 148:	e9 e0       	ldi	r30, 0x09	; 9
 14a:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__epilogue_restores__+0x12>

0000014e <__clzsi2>:
 14e:	ef 92       	push	r14
 150:	ff 92       	push	r15
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	7b 01       	movw	r14, r22
 158:	8c 01       	movw	r16, r24
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	e8 16       	cp	r14, r24
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	f8 06       	cpc	r15, r24
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	08 07       	cpc	r16, r24
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	18 07       	cpc	r17, r24
 16a:	88 f4       	brcc	.+34     	; 0x18e <__clzsi2+0x40>
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	e8 16       	cp	r14, r24
 170:	f1 04       	cpc	r15, r1
 172:	01 05       	cpc	r16, r1
 174:	11 05       	cpc	r17, r1
 176:	31 f0       	breq	.+12     	; 0x184 <__clzsi2+0x36>
 178:	28 f0       	brcs	.+10     	; 0x184 <__clzsi2+0x36>
 17a:	88 e0       	ldi	r24, 0x08	; 8
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	a0 e0       	ldi	r26, 0x00	; 0
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	17 c0       	rjmp	.+46     	; 0x1b2 <__clzsi2+0x64>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	a0 e0       	ldi	r26, 0x00	; 0
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	12 c0       	rjmp	.+36     	; 0x1b2 <__clzsi2+0x64>
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	e8 16       	cp	r14, r24
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	f8 06       	cpc	r15, r24
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 07       	cpc	r16, r24
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	18 07       	cpc	r17, r24
 19e:	28 f0       	brcs	.+10     	; 0x1aa <__clzsi2+0x5c>
 1a0:	88 e1       	ldi	r24, 0x18	; 24
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	a0 e0       	ldi	r26, 0x00	; 0
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__clzsi2+0x64>
 1aa:	80 e1       	ldi	r24, 0x10	; 16
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	a0 e0       	ldi	r26, 0x00	; 0
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	20 e2       	ldi	r18, 0x20	; 32
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	40 e0       	ldi	r20, 0x00	; 0
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	28 1b       	sub	r18, r24
 1bc:	39 0b       	sbc	r19, r25
 1be:	4a 0b       	sbc	r20, r26
 1c0:	5b 0b       	sbc	r21, r27
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <__clzsi2+0x7e>
 1c4:	16 95       	lsr	r17
 1c6:	07 95       	ror	r16
 1c8:	f7 94       	ror	r15
 1ca:	e7 94       	ror	r14
 1cc:	8a 95       	dec	r24
 1ce:	d2 f7       	brpl	.-12     	; 0x1c4 <__clzsi2+0x76>
 1d0:	f7 01       	movw	r30, r14
 1d2:	e0 5a       	subi	r30, 0xA0	; 160
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	80 81       	ld	r24, Z
 1d8:	28 1b       	sub	r18, r24
 1da:	31 09       	sbc	r19, r1
 1dc:	41 09       	sbc	r20, r1
 1de:	51 09       	sbc	r21, r1
 1e0:	c9 01       	movw	r24, r18
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	ff 90       	pop	r15
 1e8:	ef 90       	pop	r14
 1ea:	08 95       	ret

000001ec <__pack_f>:
 1ec:	df 92       	push	r13
 1ee:	ef 92       	push	r14
 1f0:	ff 92       	push	r15
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	fc 01       	movw	r30, r24
 1f8:	e4 80       	ldd	r14, Z+4	; 0x04
 1fa:	f5 80       	ldd	r15, Z+5	; 0x05
 1fc:	06 81       	ldd	r16, Z+6	; 0x06
 1fe:	17 81       	ldd	r17, Z+7	; 0x07
 200:	d1 80       	ldd	r13, Z+1	; 0x01
 202:	80 81       	ld	r24, Z
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	48 f4       	brcc	.+18     	; 0x21a <__pack_f+0x2e>
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	a0 e1       	ldi	r26, 0x10	; 16
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	e8 2a       	or	r14, r24
 212:	f9 2a       	or	r15, r25
 214:	0a 2b       	or	r16, r26
 216:	1b 2b       	or	r17, r27
 218:	a5 c0       	rjmp	.+330    	; 0x364 <__pack_f+0x178>
 21a:	84 30       	cpi	r24, 0x04	; 4
 21c:	09 f4       	brne	.+2      	; 0x220 <__pack_f+0x34>
 21e:	9f c0       	rjmp	.+318    	; 0x35e <__pack_f+0x172>
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	21 f4       	brne	.+8      	; 0x22c <__pack_f+0x40>
 224:	ee 24       	eor	r14, r14
 226:	ff 24       	eor	r15, r15
 228:	87 01       	movw	r16, r14
 22a:	05 c0       	rjmp	.+10     	; 0x236 <__pack_f+0x4a>
 22c:	e1 14       	cp	r14, r1
 22e:	f1 04       	cpc	r15, r1
 230:	01 05       	cpc	r16, r1
 232:	11 05       	cpc	r17, r1
 234:	19 f4       	brne	.+6      	; 0x23c <__pack_f+0x50>
 236:	e0 e0       	ldi	r30, 0x00	; 0
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	96 c0       	rjmp	.+300    	; 0x368 <__pack_f+0x17c>
 23c:	62 81       	ldd	r22, Z+2	; 0x02
 23e:	73 81       	ldd	r23, Z+3	; 0x03
 240:	9f ef       	ldi	r25, 0xFF	; 255
 242:	62 38       	cpi	r22, 0x82	; 130
 244:	79 07       	cpc	r23, r25
 246:	0c f0       	brlt	.+2      	; 0x24a <__pack_f+0x5e>
 248:	5b c0       	rjmp	.+182    	; 0x300 <__pack_f+0x114>
 24a:	22 e8       	ldi	r18, 0x82	; 130
 24c:	3f ef       	ldi	r19, 0xFF	; 255
 24e:	26 1b       	sub	r18, r22
 250:	37 0b       	sbc	r19, r23
 252:	2a 31       	cpi	r18, 0x1A	; 26
 254:	31 05       	cpc	r19, r1
 256:	2c f0       	brlt	.+10     	; 0x262 <__pack_f+0x76>
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	50 e0       	ldi	r21, 0x00	; 0
 260:	2a c0       	rjmp	.+84     	; 0x2b6 <__pack_f+0xca>
 262:	b8 01       	movw	r22, r16
 264:	a7 01       	movw	r20, r14
 266:	02 2e       	mov	r0, r18
 268:	04 c0       	rjmp	.+8      	; 0x272 <__pack_f+0x86>
 26a:	76 95       	lsr	r23
 26c:	67 95       	ror	r22
 26e:	57 95       	ror	r21
 270:	47 95       	ror	r20
 272:	0a 94       	dec	r0
 274:	d2 f7       	brpl	.-12     	; 0x26a <__pack_f+0x7e>
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	a0 e0       	ldi	r26, 0x00	; 0
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	04 c0       	rjmp	.+8      	; 0x288 <__pack_f+0x9c>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	aa 1f       	adc	r26, r26
 286:	bb 1f       	adc	r27, r27
 288:	2a 95       	dec	r18
 28a:	d2 f7       	brpl	.-12     	; 0x280 <__pack_f+0x94>
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	a1 09       	sbc	r26, r1
 290:	b1 09       	sbc	r27, r1
 292:	8e 21       	and	r24, r14
 294:	9f 21       	and	r25, r15
 296:	a0 23       	and	r26, r16
 298:	b1 23       	and	r27, r17
 29a:	00 97       	sbiw	r24, 0x00	; 0
 29c:	a1 05       	cpc	r26, r1
 29e:	b1 05       	cpc	r27, r1
 2a0:	21 f0       	breq	.+8      	; 0x2aa <__pack_f+0xbe>
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	a0 e0       	ldi	r26, 0x00	; 0
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	9a 01       	movw	r18, r20
 2ac:	ab 01       	movw	r20, r22
 2ae:	28 2b       	or	r18, r24
 2b0:	39 2b       	or	r19, r25
 2b2:	4a 2b       	or	r20, r26
 2b4:	5b 2b       	or	r21, r27
 2b6:	da 01       	movw	r26, r20
 2b8:	c9 01       	movw	r24, r18
 2ba:	8f 77       	andi	r24, 0x7F	; 127
 2bc:	90 70       	andi	r25, 0x00	; 0
 2be:	a0 70       	andi	r26, 0x00	; 0
 2c0:	b0 70       	andi	r27, 0x00	; 0
 2c2:	80 34       	cpi	r24, 0x40	; 64
 2c4:	91 05       	cpc	r25, r1
 2c6:	a1 05       	cpc	r26, r1
 2c8:	b1 05       	cpc	r27, r1
 2ca:	39 f4       	brne	.+14     	; 0x2da <__pack_f+0xee>
 2cc:	27 ff       	sbrs	r18, 7
 2ce:	09 c0       	rjmp	.+18     	; 0x2e2 <__pack_f+0xf6>
 2d0:	20 5c       	subi	r18, 0xC0	; 192
 2d2:	3f 4f       	sbci	r19, 0xFF	; 255
 2d4:	4f 4f       	sbci	r20, 0xFF	; 255
 2d6:	5f 4f       	sbci	r21, 0xFF	; 255
 2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <__pack_f+0xf6>
 2da:	21 5c       	subi	r18, 0xC1	; 193
 2dc:	3f 4f       	sbci	r19, 0xFF	; 255
 2de:	4f 4f       	sbci	r20, 0xFF	; 255
 2e0:	5f 4f       	sbci	r21, 0xFF	; 255
 2e2:	e0 e0       	ldi	r30, 0x00	; 0
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	20 30       	cpi	r18, 0x00	; 0
 2e8:	a0 e0       	ldi	r26, 0x00	; 0
 2ea:	3a 07       	cpc	r19, r26
 2ec:	a0 e0       	ldi	r26, 0x00	; 0
 2ee:	4a 07       	cpc	r20, r26
 2f0:	a0 e4       	ldi	r26, 0x40	; 64
 2f2:	5a 07       	cpc	r21, r26
 2f4:	10 f0       	brcs	.+4      	; 0x2fa <__pack_f+0x10e>
 2f6:	e1 e0       	ldi	r30, 0x01	; 1
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	79 01       	movw	r14, r18
 2fc:	8a 01       	movw	r16, r20
 2fe:	27 c0       	rjmp	.+78     	; 0x34e <__pack_f+0x162>
 300:	60 38       	cpi	r22, 0x80	; 128
 302:	71 05       	cpc	r23, r1
 304:	64 f5       	brge	.+88     	; 0x35e <__pack_f+0x172>
 306:	fb 01       	movw	r30, r22
 308:	e1 58       	subi	r30, 0x81	; 129
 30a:	ff 4f       	sbci	r31, 0xFF	; 255
 30c:	d8 01       	movw	r26, r16
 30e:	c7 01       	movw	r24, r14
 310:	8f 77       	andi	r24, 0x7F	; 127
 312:	90 70       	andi	r25, 0x00	; 0
 314:	a0 70       	andi	r26, 0x00	; 0
 316:	b0 70       	andi	r27, 0x00	; 0
 318:	80 34       	cpi	r24, 0x40	; 64
 31a:	91 05       	cpc	r25, r1
 31c:	a1 05       	cpc	r26, r1
 31e:	b1 05       	cpc	r27, r1
 320:	39 f4       	brne	.+14     	; 0x330 <__pack_f+0x144>
 322:	e7 fe       	sbrs	r14, 7
 324:	0d c0       	rjmp	.+26     	; 0x340 <__pack_f+0x154>
 326:	80 e4       	ldi	r24, 0x40	; 64
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	a0 e0       	ldi	r26, 0x00	; 0
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	04 c0       	rjmp	.+8      	; 0x338 <__pack_f+0x14c>
 330:	8f e3       	ldi	r24, 0x3F	; 63
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	a0 e0       	ldi	r26, 0x00	; 0
 336:	b0 e0       	ldi	r27, 0x00	; 0
 338:	e8 0e       	add	r14, r24
 33a:	f9 1e       	adc	r15, r25
 33c:	0a 1f       	adc	r16, r26
 33e:	1b 1f       	adc	r17, r27
 340:	17 ff       	sbrs	r17, 7
 342:	05 c0       	rjmp	.+10     	; 0x34e <__pack_f+0x162>
 344:	16 95       	lsr	r17
 346:	07 95       	ror	r16
 348:	f7 94       	ror	r15
 34a:	e7 94       	ror	r14
 34c:	31 96       	adiw	r30, 0x01	; 1
 34e:	87 e0       	ldi	r24, 0x07	; 7
 350:	16 95       	lsr	r17
 352:	07 95       	ror	r16
 354:	f7 94       	ror	r15
 356:	e7 94       	ror	r14
 358:	8a 95       	dec	r24
 35a:	d1 f7       	brne	.-12     	; 0x350 <__pack_f+0x164>
 35c:	05 c0       	rjmp	.+10     	; 0x368 <__pack_f+0x17c>
 35e:	ee 24       	eor	r14, r14
 360:	ff 24       	eor	r15, r15
 362:	87 01       	movw	r16, r14
 364:	ef ef       	ldi	r30, 0xFF	; 255
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	6e 2f       	mov	r22, r30
 36a:	67 95       	ror	r22
 36c:	66 27       	eor	r22, r22
 36e:	67 95       	ror	r22
 370:	90 2f       	mov	r25, r16
 372:	9f 77       	andi	r25, 0x7F	; 127
 374:	d7 94       	ror	r13
 376:	dd 24       	eor	r13, r13
 378:	d7 94       	ror	r13
 37a:	8e 2f       	mov	r24, r30
 37c:	86 95       	lsr	r24
 37e:	49 2f       	mov	r20, r25
 380:	46 2b       	or	r20, r22
 382:	58 2f       	mov	r21, r24
 384:	5d 29       	or	r21, r13
 386:	b7 01       	movw	r22, r14
 388:	ca 01       	movw	r24, r20
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	ff 90       	pop	r15
 390:	ef 90       	pop	r14
 392:	df 90       	pop	r13
 394:	08 95       	ret

00000396 <DIO_voidInit>:
static  volatile u8 * const DIO_u8Ddrs[]={DIO_u8DDRA ,DIO_u8DDRB, DIO_u8DDRC , DIO_u8DDRD} ;
static  volatile u8 *const DIO_u8Pins[]={DIO_u8PINA ,DIO_u8PINB, DIO_u8PINC , DIO_u8PIND} ;


extern void DIO_voidInit(void)
{
 396:	df 93       	push	r29
 398:	cf 93       	push	r28
 39a:	0f 92       	push	r0
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62

/*Comment!:initializing Ports Directions */
*DIO_u8Ddrs[DIO_u8PORT0]=DIO_u8PORTA_DIR;
 3a0:	e0 91 6a 01 	lds	r30, 0x016A
 3a4:	f0 91 6b 01 	lds	r31, 0x016B
 3a8:	88 e0       	ldi	r24, 0x08	; 8
 3aa:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT1]=DIO_u8PORTB_DIR;
 3ac:	e0 91 6c 01 	lds	r30, 0x016C
 3b0:	f0 91 6d 01 	lds	r31, 0x016D
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT2]=DIO_u8PORTC_DIR;
 3b8:	e0 91 6e 01 	lds	r30, 0x016E
 3bc:	f0 91 6f 01 	lds	r31, 0x016F
 3c0:	8e ef       	ldi	r24, 0xFE	; 254
 3c2:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT3]=DIO_u8PORTD_DIR;
 3c4:	e0 91 70 01 	lds	r30, 0x0170
 3c8:	f0 91 71 01 	lds	r31, 0x0171
 3cc:	8b ef       	ldi	r24, 0xFB	; 251
 3ce:	80 83       	st	Z, r24

/*Comment!:initializing Ports Value  */
*DIO_u8Ports[DIO_u8PORT0] =(DIO_u8PORTA_DIR & DIO_u8PORTA_VAL) | ((~DIO_u8PORTA_DIR)&*DIO_u8Ports[DIO_u8PORT0] );
 3d0:	a0 91 62 01 	lds	r26, 0x0162
 3d4:	b0 91 63 01 	lds	r27, 0x0163
 3d8:	e0 91 62 01 	lds	r30, 0x0162
 3dc:	f0 91 63 01 	lds	r31, 0x0163
 3e0:	80 81       	ld	r24, Z
 3e2:	87 7f       	andi	r24, 0xF7	; 247
 3e4:	8c 93       	st	X, r24
*DIO_u8Ports[DIO_u8PORT1] =(DIO_u8PORTB_DIR & DIO_u8PORTB_VAL)| ((~DIO_u8PORTB_DIR)&*DIO_u8Ports[DIO_u8PORT1] );
 3e6:	e0 91 64 01 	lds	r30, 0x0164
 3ea:	f0 91 65 01 	lds	r31, 0x0165
 3ee:	80 81       	ld	r24, Z
 3f0:	e0 91 64 01 	lds	r30, 0x0164
 3f4:	f0 91 65 01 	lds	r31, 0x0165
 3f8:	10 82       	st	Z, r1
*DIO_u8Ports[DIO_u8PORT2] =(DIO_u8PORTC_DIR & DIO_u8PORTC_VAL)| ((~DIO_u8PORTC_DIR)&*DIO_u8Ports[DIO_u8PORT2] );
 3fa:	a0 91 66 01 	lds	r26, 0x0166
 3fe:	b0 91 67 01 	lds	r27, 0x0167
 402:	e0 91 66 01 	lds	r30, 0x0166
 406:	f0 91 67 01 	lds	r31, 0x0167
 40a:	80 81       	ld	r24, Z
 40c:	81 70       	andi	r24, 0x01	; 1
 40e:	8c 93       	st	X, r24
*DIO_u8Ports[DIO_u8PORT3] =(DIO_u8PORTD_DIR & DIO_u8PORTD_VAL)| ((~DIO_u8PORTD_DIR)&*DIO_u8Ports[DIO_u8PORT3] );
 410:	a0 91 68 01 	lds	r26, 0x0168
 414:	b0 91 69 01 	lds	r27, 0x0169
 418:	e0 91 68 01 	lds	r30, 0x0168
 41c:	f0 91 69 01 	lds	r31, 0x0169
 420:	80 81       	ld	r24, Z
 422:	84 70       	andi	r24, 0x04	; 4
 424:	8c 93       	st	X, r24

}
 426:	0f 90       	pop	r0
 428:	cf 91       	pop	r28
 42a:	df 91       	pop	r29
 42c:	08 95       	ret

0000042e <DIO_u8ReadPinVal>:


extern u8 DIO_u8ReadPinVal(u8 Copy_u8PinIdx,u8* Copy_u8PtrToval)
{
 42e:	df 93       	push	r29
 430:	cf 93       	push	r28
 432:	00 d0       	rcall	.+0      	; 0x434 <DIO_u8ReadPinVal+0x6>
 434:	00 d0       	rcall	.+0      	; 0x436 <DIO_u8ReadPinVal+0x8>
 436:	00 d0       	rcall	.+0      	; 0x438 <DIO_u8ReadPinVal+0xa>
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
 43c:	8c 83       	std	Y+4, r24	; 0x04
 43e:	7e 83       	std	Y+6, r23	; 0x06
 440:	6d 83       	std	Y+5, r22	; 0x05

	 u8 Local_u8CheckPinState=ok ;
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8PinIdx<DIO_u8PINMAXIDX)
 446:	8c 81       	ldd	r24, Y+4	; 0x04
 448:	8f 31       	cpi	r24, 0x1F	; 31
 44a:	80 f5       	brcc	.+96     	; 0x4ac <DIO_u8ReadPinVal+0x7e>
	    {

		u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
 44c:	8c 81       	ldd	r24, Y+4	; 0x04
 44e:	86 95       	lsr	r24
 450:	86 95       	lsr	r24
 452:	86 95       	lsr	r24
 454:	8a 83       	std	Y+2, r24	; 0x02
		u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
 456:	8c 81       	ldd	r24, Y+4	; 0x04
 458:	87 70       	andi	r24, 0x07	; 7
 45a:	89 83       	std	Y+1, r24	; 0x01

		* Copy_u8PtrToval=get_bit(*DIO_u8Pins[local_u8CheckPinPlace],local_u8MapPin);
 45c:	8a 81       	ldd	r24, Y+2	; 0x02
 45e:	88 2f       	mov	r24, r24
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	fc 01       	movw	r30, r24
 468:	ee 58       	subi	r30, 0x8E	; 142
 46a:	fe 4f       	sbci	r31, 0xFE	; 254
 46c:	01 90       	ld	r0, Z+
 46e:	f0 81       	ld	r31, Z
 470:	e0 2d       	mov	r30, r0
 472:	80 81       	ld	r24, Z
 474:	48 2f       	mov	r20, r24
 476:	50 e0       	ldi	r21, 0x00	; 0
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	28 2f       	mov	r18, r24
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_u8ReadPinVal+0x5a>
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	2a 95       	dec	r18
 48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_u8ReadPinVal+0x56>
 48c:	9a 01       	movw	r18, r20
 48e:	28 23       	and	r18, r24
 490:	39 23       	and	r19, r25
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	88 2f       	mov	r24, r24
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	a9 01       	movw	r20, r18
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_u8ReadPinVal+0x72>
 49c:	55 95       	asr	r21
 49e:	47 95       	ror	r20
 4a0:	8a 95       	dec	r24
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_u8ReadPinVal+0x6e>
 4a4:	ca 01       	movw	r24, r20
 4a6:	ed 81       	ldd	r30, Y+5	; 0x05
 4a8:	fe 81       	ldd	r31, Y+6	; 0x06
 4aa:	80 83       	st	Z, r24
    }
    else
    {

    }
return    Local_u8CheckPinState=ok ;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	8b 83       	std	Y+3, r24	; 0x03
 4b0:	8b 81       	ldd	r24, Y+3	; 0x03
}
 4b2:	26 96       	adiw	r28, 0x06	; 6
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	f8 94       	cli
 4b8:	de bf       	out	0x3e, r29	; 62
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	cd bf       	out	0x3d, r28	; 61
 4be:	cf 91       	pop	r28
 4c0:	df 91       	pop	r29
 4c2:	08 95       	ret

000004c4 <DIO_u8WritePinVal>:

extern u8 DIO_u8WritePinVal(u8 Copy_u8PinIdx,u8 Copy_u8Pinval)
{
 4c4:	df 93       	push	r29
 4c6:	cf 93       	push	r28
 4c8:	00 d0       	rcall	.+0      	; 0x4ca <DIO_u8WritePinVal+0x6>
 4ca:	00 d0       	rcall	.+0      	; 0x4cc <DIO_u8WritePinVal+0x8>
 4cc:	00 d0       	rcall	.+0      	; 0x4ce <DIO_u8WritePinVal+0xa>
 4ce:	cd b7       	in	r28, 0x3d	; 61
 4d0:	de b7       	in	r29, 0x3e	; 62
 4d2:	8d 83       	std	Y+5, r24	; 0x05
 4d4:	6e 83       	std	Y+6, r22	; 0x06
	 u8 Local_u8CheckPinState=ok ;
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	8c 83       	std	Y+4, r24	; 0x04

	    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
 4da:	8d 81       	ldd	r24, Y+5	; 0x05
 4dc:	80 32       	cpi	r24, 0x20	; 32
 4de:	10 f0       	brcs	.+4      	; 0x4e4 <DIO_u8WritePinVal+0x20>
	    {
	    	 Local_u8CheckPinState=error ;
 4e0:	1c 82       	std	Y+4, r1	; 0x04
 4e2:	64 c0       	rjmp	.+200    	; 0x5ac <DIO_u8WritePinVal+0xe8>
	    }
	    else
	    {
	    	 u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
 4e4:	8d 81       	ldd	r24, Y+5	; 0x05
 4e6:	86 95       	lsr	r24
 4e8:	86 95       	lsr	r24
 4ea:	86 95       	lsr	r24
 4ec:	8b 83       	std	Y+3, r24	; 0x03
	    		 u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
 4ee:	8d 81       	ldd	r24, Y+5	; 0x05
 4f0:	87 70       	andi	r24, 0x07	; 7
 4f2:	8a 83       	std	Y+2, r24	; 0x02
	    	     u8 local_u8PinDir;
	    	     local_u8PinDir=get_bit(*DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin);
 4f4:	8b 81       	ldd	r24, Y+3	; 0x03
 4f6:	88 2f       	mov	r24, r24
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	fc 01       	movw	r30, r24
 500:	e6 59       	subi	r30, 0x96	; 150
 502:	fe 4f       	sbci	r31, 0xFE	; 254
 504:	01 90       	ld	r0, Z+
 506:	f0 81       	ld	r31, Z
 508:	e0 2d       	mov	r30, r0
 50a:	80 81       	ld	r24, Z
 50c:	48 2f       	mov	r20, r24
 50e:	50 e0       	ldi	r21, 0x00	; 0
 510:	8a 81       	ldd	r24, Y+2	; 0x02
 512:	28 2f       	mov	r18, r24
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_u8WritePinVal+0x5c>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	2a 95       	dec	r18
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_u8WritePinVal+0x58>
 524:	9a 01       	movw	r18, r20
 526:	28 23       	and	r18, r24
 528:	39 23       	and	r19, r25
 52a:	8a 81       	ldd	r24, Y+2	; 0x02
 52c:	88 2f       	mov	r24, r24
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	a9 01       	movw	r20, r18
 532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_u8WritePinVal+0x74>
 534:	55 95       	asr	r21
 536:	47 95       	ror	r20
 538:	8a 95       	dec	r24
 53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_u8WritePinVal+0x70>
 53c:	ca 01       	movw	r24, r20
 53e:	89 83       	std	Y+1, r24	; 0x01
	    	if(local_u8PinDir==1)
 540:	89 81       	ldd	r24, Y+1	; 0x01
 542:	81 30       	cpi	r24, 0x01	; 1
 544:	99 f5       	brne	.+102    	; 0x5ac <DIO_u8WritePinVal+0xe8>
	    	{
	    	assign_bit(*DIO_u8Ports[local_u8CheckPinPlace],local_u8MapPin,Copy_u8Pinval);
 546:	8b 81       	ldd	r24, Y+3	; 0x03
 548:	88 2f       	mov	r24, r24
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	fc 01       	movw	r30, r24
 552:	ee 59       	subi	r30, 0x9E	; 158
 554:	fe 4f       	sbci	r31, 0xFE	; 254
 556:	a0 81       	ld	r26, Z
 558:	b1 81       	ldd	r27, Z+1	; 0x01
 55a:	8a 81       	ldd	r24, Y+2	; 0x02
 55c:	28 2f       	mov	r18, r24
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_u8WritePinVal+0xa6>
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	2a 95       	dec	r18
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_u8WritePinVal+0xa2>
 56e:	28 2f       	mov	r18, r24
 570:	20 95       	com	r18
 572:	8b 81       	ldd	r24, Y+3	; 0x03
 574:	88 2f       	mov	r24, r24
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	fc 01       	movw	r30, r24
 57e:	ee 59       	subi	r30, 0x9E	; 158
 580:	fe 4f       	sbci	r31, 0xFE	; 254
 582:	01 90       	ld	r0, Z+
 584:	f0 81       	ld	r31, Z
 586:	e0 2d       	mov	r30, r0
 588:	80 81       	ld	r24, Z
 58a:	42 2f       	mov	r20, r18
 58c:	48 23       	and	r20, r24
 58e:	8e 81       	ldd	r24, Y+6	; 0x06
 590:	28 2f       	mov	r18, r24
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	8a 81       	ldd	r24, Y+2	; 0x02
 596:	88 2f       	mov	r24, r24
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	b9 01       	movw	r22, r18
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_u8WritePinVal+0xde>
 59e:	66 0f       	add	r22, r22
 5a0:	77 1f       	adc	r23, r23
 5a2:	8a 95       	dec	r24
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_u8WritePinVal+0xda>
 5a6:	cb 01       	movw	r24, r22
 5a8:	84 2b       	or	r24, r20
 5aa:	8c 93       	st	X, r24
	    	{

	    	}
	    }

     return  Local_u8CheckPinState ;
 5ac:	8c 81       	ldd	r24, Y+4	; 0x04
}
 5ae:	26 96       	adiw	r28, 0x06	; 6
 5b0:	0f b6       	in	r0, 0x3f	; 63
 5b2:	f8 94       	cli
 5b4:	de bf       	out	0x3e, r29	; 62
 5b6:	0f be       	out	0x3f, r0	; 63
 5b8:	cd bf       	out	0x3d, r28	; 61
 5ba:	cf 91       	pop	r28
 5bc:	df 91       	pop	r29
 5be:	08 95       	ret

000005c0 <DIO_u8ReadPortVal>:


extern u8 DIO_u8ReadPortVal(u8 Copy_u8PortIdx,u8* Copy_u8PtrToval)
{
 5c0:	df 93       	push	r29
 5c2:	cf 93       	push	r28
 5c4:	00 d0       	rcall	.+0      	; 0x5c6 <DIO_u8ReadPortVal+0x6>
 5c6:	00 d0       	rcall	.+0      	; 0x5c8 <DIO_u8ReadPortVal+0x8>
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
 5cc:	8a 83       	std	Y+2, r24	; 0x02
 5ce:	7c 83       	std	Y+4, r23	; 0x04
 5d0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CheckPortR=ok ;
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
 5d6:	8a 81       	ldd	r24, Y+2	; 0x02
 5d8:	84 30       	cpi	r24, 0x04	; 4
 5da:	80 f4       	brcc	.+32     	; 0x5fc <DIO_u8ReadPortVal+0x3c>
	{

	* Copy_u8PtrToval=*DIO_u8Pins[Copy_u8PortIdx] ;
 5dc:	8a 81       	ldd	r24, Y+2	; 0x02
 5de:	88 2f       	mov	r24, r24
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	fc 01       	movw	r30, r24
 5e8:	ee 58       	subi	r30, 0x8E	; 142
 5ea:	fe 4f       	sbci	r31, 0xFE	; 254
 5ec:	01 90       	ld	r0, Z+
 5ee:	f0 81       	ld	r31, Z
 5f0:	e0 2d       	mov	r30, r0
 5f2:	80 81       	ld	r24, Z
 5f4:	eb 81       	ldd	r30, Y+3	; 0x03
 5f6:	fc 81       	ldd	r31, Y+4	; 0x04
 5f8:	80 83       	st	Z, r24
 5fa:	01 c0       	rjmp	.+2      	; 0x5fe <DIO_u8ReadPortVal+0x3e>
	}
	else
	{
		Local_u8CheckPortR=error ;
 5fc:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8CheckPortR ;
 5fe:	89 81       	ldd	r24, Y+1	; 0x01
}
 600:	0f 90       	pop	r0
 602:	0f 90       	pop	r0
 604:	0f 90       	pop	r0
 606:	0f 90       	pop	r0
 608:	cf 91       	pop	r28
 60a:	df 91       	pop	r29
 60c:	08 95       	ret

0000060e <DIO_u8WritePortVal>:

extern u8 DIO_u8WritePortVal(u8 Copy_u8PortIdx,u8 Copy_u8Portval)
{
 60e:	df 93       	push	r29
 610:	cf 93       	push	r28
 612:	00 d0       	rcall	.+0      	; 0x614 <DIO_u8WritePortVal+0x6>
 614:	00 d0       	rcall	.+0      	; 0x616 <DIO_u8WritePortVal+0x8>
 616:	cd b7       	in	r28, 0x3d	; 61
 618:	de b7       	in	r29, 0x3e	; 62
 61a:	8b 83       	std	Y+3, r24	; 0x03
 61c:	6c 83       	std	Y+4, r22	; 0x04
     	u8 Local_u8CheckPortR=ok ;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	8a 83       	std	Y+2, r24	; 0x02
        u8 local_u8PortDir;
		if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
 622:	8b 81       	ldd	r24, Y+3	; 0x03
 624:	84 30       	cpi	r24, 0x04	; 4
 626:	f0 f4       	brcc	.+60     	; 0x664 <DIO_u8WritePortVal+0x56>
		{
				local_u8PortDir=*DIO_u8Ddrs[Copy_u8PortIdx] ;
 628:	8b 81       	ldd	r24, Y+3	; 0x03
 62a:	88 2f       	mov	r24, r24
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	88 0f       	add	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	fc 01       	movw	r30, r24
 634:	e6 59       	subi	r30, 0x96	; 150
 636:	fe 4f       	sbci	r31, 0xFE	; 254
 638:	01 90       	ld	r0, Z+
 63a:	f0 81       	ld	r31, Z
 63c:	e0 2d       	mov	r30, r0
 63e:	80 81       	ld	r24, Z
 640:	89 83       	std	Y+1, r24	; 0x01
			  if(local_u8PortDir==0xff)
 642:	89 81       	ldd	r24, Y+1	; 0x01
 644:	8f 3f       	cpi	r24, 0xFF	; 255
 646:	79 f4       	brne	.+30     	; 0x666 <DIO_u8WritePortVal+0x58>
			  {
		        *DIO_u8Ports[Copy_u8PortIdx]= Copy_u8Portval;
 648:	8b 81       	ldd	r24, Y+3	; 0x03
 64a:	88 2f       	mov	r24, r24
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	88 0f       	add	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	fc 01       	movw	r30, r24
 654:	ee 59       	subi	r30, 0x9E	; 158
 656:	fe 4f       	sbci	r31, 0xFE	; 254
 658:	01 90       	ld	r0, Z+
 65a:	f0 81       	ld	r31, Z
 65c:	e0 2d       	mov	r30, r0
 65e:	8c 81       	ldd	r24, Y+4	; 0x04
 660:	80 83       	st	Z, r24
 662:	01 c0       	rjmp	.+2      	; 0x666 <DIO_u8WritePortVal+0x58>

			  }
		}
		else
		{
			Local_u8CheckPortR=error ;
 664:	1a 82       	std	Y+2, r1	; 0x02
		}

		return Local_u8CheckPortR ;
 666:	8a 81       	ldd	r24, Y+2	; 0x02
}
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	cf 91       	pop	r28
 672:	df 91       	pop	r29
 674:	08 95       	ret

00000676 <DIO_u8WritePinDir>:

extern u8 DIO_u8WritePinDir(u8 Copy_u8PinIdx,u8 Copy_u8PinDir)
{
 676:	df 93       	push	r29
 678:	cf 93       	push	r28
 67a:	00 d0       	rcall	.+0      	; 0x67c <DIO_u8WritePinDir+0x6>
 67c:	00 d0       	rcall	.+0      	; 0x67e <DIO_u8WritePinDir+0x8>
 67e:	0f 92       	push	r0
 680:	cd b7       	in	r28, 0x3d	; 61
 682:	de b7       	in	r29, 0x3e	; 62
 684:	8c 83       	std	Y+4, r24	; 0x04
 686:	6d 83       	std	Y+5, r22	; 0x05
	     u8 Local_u8CheckPinState=ok ;
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	8b 83       	std	Y+3, r24	; 0x03

		    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
 68c:	8c 81       	ldd	r24, Y+4	; 0x04
 68e:	80 32       	cpi	r24, 0x20	; 32
 690:	10 f0       	brcs	.+4      	; 0x696 <DIO_u8WritePinDir+0x20>
		    {
		    	 Local_u8CheckPinState=error ;
 692:	1b 82       	std	Y+3, r1	; 0x03
 694:	3b c0       	rjmp	.+118    	; 0x70c <DIO_u8WritePinDir+0x96>
		    }
		    else
		    {
		    	u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
 696:	8c 81       	ldd	r24, Y+4	; 0x04
 698:	86 95       	lsr	r24
 69a:	86 95       	lsr	r24
 69c:	86 95       	lsr	r24
 69e:	8a 83       	std	Y+2, r24	; 0x02
		    	u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
 6a0:	8c 81       	ldd	r24, Y+4	; 0x04
 6a2:	87 70       	andi	r24, 0x07	; 7
 6a4:	89 83       	std	Y+1, r24	; 0x01
		    	assign_bit(* DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin,Copy_u8PinDir);
 6a6:	8a 81       	ldd	r24, Y+2	; 0x02
 6a8:	88 2f       	mov	r24, r24
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	fc 01       	movw	r30, r24
 6b2:	e6 59       	subi	r30, 0x96	; 150
 6b4:	fe 4f       	sbci	r31, 0xFE	; 254
 6b6:	a0 81       	ld	r26, Z
 6b8:	b1 81       	ldd	r27, Z+1	; 0x01
 6ba:	89 81       	ldd	r24, Y+1	; 0x01
 6bc:	28 2f       	mov	r18, r24
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <DIO_u8WritePinDir+0x54>
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	2a 95       	dec	r18
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <DIO_u8WritePinDir+0x50>
 6ce:	28 2f       	mov	r18, r24
 6d0:	20 95       	com	r18
 6d2:	8a 81       	ldd	r24, Y+2	; 0x02
 6d4:	88 2f       	mov	r24, r24
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	fc 01       	movw	r30, r24
 6de:	e6 59       	subi	r30, 0x96	; 150
 6e0:	fe 4f       	sbci	r31, 0xFE	; 254
 6e2:	01 90       	ld	r0, Z+
 6e4:	f0 81       	ld	r31, Z
 6e6:	e0 2d       	mov	r30, r0
 6e8:	80 81       	ld	r24, Z
 6ea:	42 2f       	mov	r20, r18
 6ec:	48 23       	and	r20, r24
 6ee:	8d 81       	ldd	r24, Y+5	; 0x05
 6f0:	28 2f       	mov	r18, r24
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	89 81       	ldd	r24, Y+1	; 0x01
 6f6:	88 2f       	mov	r24, r24
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	b9 01       	movw	r22, r18
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_u8WritePinDir+0x8c>
 6fe:	66 0f       	add	r22, r22
 700:	77 1f       	adc	r23, r23
 702:	8a 95       	dec	r24
 704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_u8WritePinDir+0x88>
 706:	cb 01       	movw	r24, r22
 708:	84 2b       	or	r24, r20
 70a:	8c 93       	st	X, r24
		    }

	     return  Local_u8CheckPinState ;
 70c:	8b 81       	ldd	r24, Y+3	; 0x03
}
 70e:	0f 90       	pop	r0
 710:	0f 90       	pop	r0
 712:	0f 90       	pop	r0
 714:	0f 90       	pop	r0
 716:	0f 90       	pop	r0
 718:	cf 91       	pop	r28
 71a:	df 91       	pop	r29
 71c:	08 95       	ret

0000071e <DIO_u8WritePortDir>:

extern u8 DIO_u8WritePortDir(u8 Copy_u8PortIdx,u8 Copy_u8PortDir)
{
 71e:	df 93       	push	r29
 720:	cf 93       	push	r28
 722:	00 d0       	rcall	.+0      	; 0x724 <DIO_u8WritePortDir+0x6>
 724:	0f 92       	push	r0
 726:	cd b7       	in	r28, 0x3d	; 61
 728:	de b7       	in	r29, 0x3e	; 62
 72a:	8a 83       	std	Y+2, r24	; 0x02
 72c:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8CheckPortR=ok ;
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	89 83       	std	Y+1, r24	; 0x01

			if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
 732:	8a 81       	ldd	r24, Y+2	; 0x02
 734:	84 30       	cpi	r24, 0x04	; 4
 736:	70 f4       	brcc	.+28     	; 0x754 <DIO_u8WritePortDir+0x36>
			{

			*DIO_u8Ddrs[Copy_u8PortIdx]= Copy_u8PortDir;
 738:	8a 81       	ldd	r24, Y+2	; 0x02
 73a:	88 2f       	mov	r24, r24
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	88 0f       	add	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	fc 01       	movw	r30, r24
 744:	e6 59       	subi	r30, 0x96	; 150
 746:	fe 4f       	sbci	r31, 0xFE	; 254
 748:	01 90       	ld	r0, Z+
 74a:	f0 81       	ld	r31, Z
 74c:	e0 2d       	mov	r30, r0
 74e:	8b 81       	ldd	r24, Y+3	; 0x03
 750:	80 83       	st	Z, r24
 752:	01 c0       	rjmp	.+2      	; 0x756 <DIO_u8WritePortDir+0x38>
			}
			else
			{
				Local_u8CheckPortR=error ;
 754:	19 82       	std	Y+1, r1	; 0x01
			}

			return Local_u8CheckPortR ;
 756:	89 81       	ldd	r24, Y+1	; 0x01
}
 758:	0f 90       	pop	r0
 75a:	0f 90       	pop	r0
 75c:	0f 90       	pop	r0
 75e:	cf 91       	pop	r28
 760:	df 91       	pop	r29
 762:	08 95       	ret

00000764 <DIO_u8ReadPinDir>:

extern u8 DIO_u8ReadPinDir(u8 Copy_u8PinIdx,u8 * Copy_u8PtrToDir)
{
 764:	df 93       	push	r29
 766:	cf 93       	push	r28
 768:	00 d0       	rcall	.+0      	; 0x76a <DIO_u8ReadPinDir+0x6>
 76a:	00 d0       	rcall	.+0      	; 0x76c <DIO_u8ReadPinDir+0x8>
 76c:	00 d0       	rcall	.+0      	; 0x76e <DIO_u8ReadPinDir+0xa>
 76e:	cd b7       	in	r28, 0x3d	; 61
 770:	de b7       	in	r29, 0x3e	; 62
 772:	8c 83       	std	Y+4, r24	; 0x04
 774:	7e 83       	std	Y+6, r23	; 0x06
 776:	6d 83       	std	Y+5, r22	; 0x05
	 u8 Local_u8CheckPinState=ok ;
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	8b 83       	std	Y+3, r24	; 0x03


	    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
 77c:	8c 81       	ldd	r24, Y+4	; 0x04
 77e:	80 32       	cpi	r24, 0x20	; 32
 780:	10 f0       	brcs	.+4      	; 0x786 <DIO_u8ReadPinDir+0x22>
	    {
	    	 Local_u8CheckPinState=error ;
 782:	1b 82       	std	Y+3, r1	; 0x03
 784:	30 c0       	rjmp	.+96     	; 0x7e6 <DIO_u8ReadPinDir+0x82>
	    }
	    else
	    {
	    	u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS;
 786:	8c 81       	ldd	r24, Y+4	; 0x04
 788:	86 95       	lsr	r24
 78a:	86 95       	lsr	r24
 78c:	86 95       	lsr	r24
 78e:	8a 83       	std	Y+2, r24	; 0x02
	    		 u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
 790:	8c 81       	ldd	r24, Y+4	; 0x04
 792:	87 70       	andi	r24, 0x07	; 7
 794:	89 83       	std	Y+1, r24	; 0x01
	    	* Copy_u8PtrToDir=get_bit(*DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin);
 796:	8a 81       	ldd	r24, Y+2	; 0x02
 798:	88 2f       	mov	r24, r24
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	fc 01       	movw	r30, r24
 7a2:	e6 59       	subi	r30, 0x96	; 150
 7a4:	fe 4f       	sbci	r31, 0xFE	; 254
 7a6:	01 90       	ld	r0, Z+
 7a8:	f0 81       	ld	r31, Z
 7aa:	e0 2d       	mov	r30, r0
 7ac:	80 81       	ld	r24, Z
 7ae:	48 2f       	mov	r20, r24
 7b0:	50 e0       	ldi	r21, 0x00	; 0
 7b2:	89 81       	ldd	r24, Y+1	; 0x01
 7b4:	28 2f       	mov	r18, r24
 7b6:	30 e0       	ldi	r19, 0x00	; 0
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <DIO_u8ReadPinDir+0x5e>
 7be:	88 0f       	add	r24, r24
 7c0:	99 1f       	adc	r25, r25
 7c2:	2a 95       	dec	r18
 7c4:	e2 f7       	brpl	.-8      	; 0x7be <DIO_u8ReadPinDir+0x5a>
 7c6:	9a 01       	movw	r18, r20
 7c8:	28 23       	and	r18, r24
 7ca:	39 23       	and	r19, r25
 7cc:	89 81       	ldd	r24, Y+1	; 0x01
 7ce:	88 2f       	mov	r24, r24
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	a9 01       	movw	r20, r18
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <DIO_u8ReadPinDir+0x76>
 7d6:	55 95       	asr	r21
 7d8:	47 95       	ror	r20
 7da:	8a 95       	dec	r24
 7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <DIO_u8ReadPinDir+0x72>
 7de:	ca 01       	movw	r24, r20
 7e0:	ed 81       	ldd	r30, Y+5	; 0x05
 7e2:	fe 81       	ldd	r31, Y+6	; 0x06
 7e4:	80 83       	st	Z, r24
	    }
	return  Local_u8CheckPinState ;
 7e6:	8b 81       	ldd	r24, Y+3	; 0x03
}
 7e8:	26 96       	adiw	r28, 0x06	; 6
 7ea:	0f b6       	in	r0, 0x3f	; 63
 7ec:	f8 94       	cli
 7ee:	de bf       	out	0x3e, r29	; 62
 7f0:	0f be       	out	0x3f, r0	; 63
 7f2:	cd bf       	out	0x3d, r28	; 61
 7f4:	cf 91       	pop	r28
 7f6:	df 91       	pop	r29
 7f8:	08 95       	ret

000007fa <DIO_u8ReadPortDir>:

extern u8 DIO_u8ReadPortDir(u8 Copy_u8PortIdx,u8 *Copy_u8PtrToDir)
{
 7fa:	df 93       	push	r29
 7fc:	cf 93       	push	r28
 7fe:	00 d0       	rcall	.+0      	; 0x800 <DIO_u8ReadPortDir+0x6>
 800:	00 d0       	rcall	.+0      	; 0x802 <DIO_u8ReadPortDir+0x8>
 802:	cd b7       	in	r28, 0x3d	; 61
 804:	de b7       	in	r29, 0x3e	; 62
 806:	8a 83       	std	Y+2, r24	; 0x02
 808:	7c 83       	std	Y+4, r23	; 0x04
 80a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CheckPortR=ok ;
 80c:	81 e0       	ldi	r24, 0x01	; 1
 80e:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
 810:	8a 81       	ldd	r24, Y+2	; 0x02
 812:	84 30       	cpi	r24, 0x04	; 4
 814:	80 f4       	brcc	.+32     	; 0x836 <DIO_u8ReadPortDir+0x3c>
		{

		* Copy_u8PtrToDir=*DIO_u8Pins[Copy_u8PortIdx] ;
 816:	8a 81       	ldd	r24, Y+2	; 0x02
 818:	88 2f       	mov	r24, r24
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	88 0f       	add	r24, r24
 81e:	99 1f       	adc	r25, r25
 820:	fc 01       	movw	r30, r24
 822:	ee 58       	subi	r30, 0x8E	; 142
 824:	fe 4f       	sbci	r31, 0xFE	; 254
 826:	01 90       	ld	r0, Z+
 828:	f0 81       	ld	r31, Z
 82a:	e0 2d       	mov	r30, r0
 82c:	80 81       	ld	r24, Z
 82e:	eb 81       	ldd	r30, Y+3	; 0x03
 830:	fc 81       	ldd	r31, Y+4	; 0x04
 832:	80 83       	st	Z, r24
 834:	01 c0       	rjmp	.+2      	; 0x838 <DIO_u8ReadPortDir+0x3e>
		}
		else
		{
			Local_u8CheckPortR=error ;
 836:	19 82       	std	Y+1, r1	; 0x01
		}

		return Local_u8CheckPortR ;
 838:	89 81       	ldd	r24, Y+1	; 0x01
}
 83a:	0f 90       	pop	r0
 83c:	0f 90       	pop	r0
 83e:	0f 90       	pop	r0
 840:	0f 90       	pop	r0
 842:	cf 91       	pop	r28
 844:	df 91       	pop	r29
 846:	08 95       	ret

00000848 <INT_voidInit>:
void (*INT_u16INT_0_PTR)(void) ;
void (*INT_u16INT_1_PTR)(void) ;
void (*INT_u16INT_2_PTR)(void);

void INT_voidInit(void)
{
 848:	df 93       	push	r29
 84a:	cf 93       	push	r28
 84c:	cd b7       	in	r28, 0x3d	; 61
 84e:	de b7       	in	r29, 0x3e	; 62
	MCUCR |= INT_u8MCUCR_INIT ;
 850:	a5 e5       	ldi	r26, 0x55	; 85
 852:	b0 e0       	ldi	r27, 0x00	; 0
 854:	e5 e5       	ldi	r30, 0x55	; 85
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	80 81       	ld	r24, Z
 85a:	8e 60       	ori	r24, 0x0E	; 14
 85c:	8c 93       	st	X, r24
	MCUCSR|=INIT_u8MCUCSR_INIT ;
 85e:	a4 e5       	ldi	r26, 0x54	; 84
 860:	b0 e0       	ldi	r27, 0x00	; 0
 862:	e4 e5       	ldi	r30, 0x54	; 84
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	80 81       	ld	r24, Z
 868:	80 64       	ori	r24, 0x40	; 64
 86a:	8c 93       	st	X, r24
	GICR|= INT_u8GICR_INIT;
 86c:	ab e5       	ldi	r26, 0x5B	; 91
 86e:	b0 e0       	ldi	r27, 0x00	; 0
 870:	eb e5       	ldi	r30, 0x5B	; 91
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	80 81       	ld	r24, Z
 876:	80 64       	ori	r24, 0x40	; 64
 878:	8c 93       	st	X, r24

}
 87a:	cf 91       	pop	r28
 87c:	df 91       	pop	r29
 87e:	08 95       	ret

00000880 <INT_u8ReadIntFlag>:

u8 INT_u8ReadIntFlag(void)
{
 880:	df 93       	push	r29
 882:	cf 93       	push	r28
 884:	0f 92       	push	r0
 886:	cd b7       	in	r28, 0x3d	; 61
 888:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8IntType=8 ;
 88a:	88 e0       	ldi	r24, 0x08	; 8
 88c:	89 83       	std	Y+1, r24	; 0x01

	if(get_bit(GIFR,INTF0))
 88e:	ea e5       	ldi	r30, 0x5A	; 90
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	80 81       	ld	r24, Z
 894:	88 2f       	mov	r24, r24
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	80 74       	andi	r24, 0x40	; 64
 89a:	90 70       	andi	r25, 0x00	; 0
 89c:	08 2e       	mov	r0, r24
 89e:	89 2f       	mov	r24, r25
 8a0:	00 0c       	add	r0, r0
 8a2:	88 1f       	adc	r24, r24
 8a4:	99 0b       	sbc	r25, r25
 8a6:	00 0c       	add	r0, r0
 8a8:	88 1f       	adc	r24, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	00 97       	sbiw	r24, 0x00	; 0
 8ae:	19 f0       	breq	.+6      	; 0x8b6 <INT_u8ReadIntFlag+0x36>
	{
		assign_bit(Local_u8IntType,0,1)  ;
 8b0:	89 81       	ldd	r24, Y+1	; 0x01
 8b2:	81 60       	ori	r24, 0x01	; 1
 8b4:	89 83       	std	Y+1, r24	; 0x01
	}
    if(get_bit(GIFR,INTF1))
 8b6:	ea e5       	ldi	r30, 0x5A	; 90
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	80 81       	ld	r24, Z
 8bc:	88 1f       	adc	r24, r24
 8be:	88 27       	eor	r24, r24
 8c0:	88 1f       	adc	r24, r24
 8c2:	88 2f       	mov	r24, r24
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	90 70       	andi	r25, 0x00	; 0
 8c8:	00 97       	sbiw	r24, 0x00	; 0
 8ca:	19 f0       	breq	.+6      	; 0x8d2 <INT_u8ReadIntFlag+0x52>
	{
		assign_bit(Local_u8IntType,1,1) ;
 8cc:	89 81       	ldd	r24, Y+1	; 0x01
 8ce:	82 60       	ori	r24, 0x02	; 2
 8d0:	89 83       	std	Y+1, r24	; 0x01
	}
    if(get_bit(GIFR,INTF2))
 8d2:	ea e5       	ldi	r30, 0x5A	; 90
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	80 81       	ld	r24, Z
 8d8:	88 2f       	mov	r24, r24
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	80 72       	andi	r24, 0x20	; 32
 8de:	90 70       	andi	r25, 0x00	; 0
 8e0:	95 95       	asr	r25
 8e2:	87 95       	ror	r24
 8e4:	95 95       	asr	r25
 8e6:	87 95       	ror	r24
 8e8:	95 95       	asr	r25
 8ea:	87 95       	ror	r24
 8ec:	95 95       	asr	r25
 8ee:	87 95       	ror	r24
 8f0:	95 95       	asr	r25
 8f2:	87 95       	ror	r24
 8f4:	00 97       	sbiw	r24, 0x00	; 0
 8f6:	19 f0       	breq	.+6      	; 0x8fe <INT_u8ReadIntFlag+0x7e>
	{
    	assign_bit(Local_u8IntType,2,1) ;
 8f8:	89 81       	ldd	r24, Y+1	; 0x01
 8fa:	84 60       	ori	r24, 0x04	; 4
 8fc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8IntType ;
 8fe:	89 81       	ldd	r24, Y+1	; 0x01
}
 900:	0f 90       	pop	r0
 902:	cf 91       	pop	r28
 904:	df 91       	pop	r29
 906:	08 95       	ret

00000908 <__vector_1>:

/// INT 0
ISR(__vector_1)
{
 908:	1f 92       	push	r1
 90a:	0f 92       	push	r0
 90c:	0f b6       	in	r0, 0x3f	; 63
 90e:	0f 92       	push	r0
 910:	11 24       	eor	r1, r1
 912:	2f 93       	push	r18
 914:	3f 93       	push	r19
 916:	4f 93       	push	r20
 918:	5f 93       	push	r21
 91a:	6f 93       	push	r22
 91c:	7f 93       	push	r23
 91e:	8f 93       	push	r24
 920:	9f 93       	push	r25
 922:	af 93       	push	r26
 924:	bf 93       	push	r27
 926:	ef 93       	push	r30
 928:	ff 93       	push	r31
 92a:	df 93       	push	r29
 92c:	cf 93       	push	r28
 92e:	cd b7       	in	r28, 0x3d	; 61
 930:	de b7       	in	r29, 0x3e	; 62

	INT_u16INT_0_PTR();
 932:	e0 91 7c 01 	lds	r30, 0x017C
 936:	f0 91 7d 01 	lds	r31, 0x017D
 93a:	09 95       	icall
}
 93c:	cf 91       	pop	r28
 93e:	df 91       	pop	r29
 940:	ff 91       	pop	r31
 942:	ef 91       	pop	r30
 944:	bf 91       	pop	r27
 946:	af 91       	pop	r26
 948:	9f 91       	pop	r25
 94a:	8f 91       	pop	r24
 94c:	7f 91       	pop	r23
 94e:	6f 91       	pop	r22
 950:	5f 91       	pop	r21
 952:	4f 91       	pop	r20
 954:	3f 91       	pop	r19
 956:	2f 91       	pop	r18
 958:	0f 90       	pop	r0
 95a:	0f be       	out	0x3f, r0	; 63
 95c:	0f 90       	pop	r0
 95e:	1f 90       	pop	r1
 960:	18 95       	reti

00000962 <__vector_2>:
// INT1
ISR(__vector_2)
{
 962:	1f 92       	push	r1
 964:	0f 92       	push	r0
 966:	0f b6       	in	r0, 0x3f	; 63
 968:	0f 92       	push	r0
 96a:	11 24       	eor	r1, r1
 96c:	2f 93       	push	r18
 96e:	3f 93       	push	r19
 970:	4f 93       	push	r20
 972:	5f 93       	push	r21
 974:	6f 93       	push	r22
 976:	7f 93       	push	r23
 978:	8f 93       	push	r24
 97a:	9f 93       	push	r25
 97c:	af 93       	push	r26
 97e:	bf 93       	push	r27
 980:	ef 93       	push	r30
 982:	ff 93       	push	r31
 984:	df 93       	push	r29
 986:	cf 93       	push	r28
 988:	cd b7       	in	r28, 0x3d	; 61
 98a:	de b7       	in	r29, 0x3e	; 62

	INT_u16INT_1_PTR();
 98c:	e0 91 80 01 	lds	r30, 0x0180
 990:	f0 91 81 01 	lds	r31, 0x0181
 994:	09 95       	icall
}
 996:	cf 91       	pop	r28
 998:	df 91       	pop	r29
 99a:	ff 91       	pop	r31
 99c:	ef 91       	pop	r30
 99e:	bf 91       	pop	r27
 9a0:	af 91       	pop	r26
 9a2:	9f 91       	pop	r25
 9a4:	8f 91       	pop	r24
 9a6:	7f 91       	pop	r23
 9a8:	6f 91       	pop	r22
 9aa:	5f 91       	pop	r21
 9ac:	4f 91       	pop	r20
 9ae:	3f 91       	pop	r19
 9b0:	2f 91       	pop	r18
 9b2:	0f 90       	pop	r0
 9b4:	0f be       	out	0x3f, r0	; 63
 9b6:	0f 90       	pop	r0
 9b8:	1f 90       	pop	r1
 9ba:	18 95       	reti

000009bc <__vector_3>:
//INT2
ISR(__vector_3)
{
 9bc:	1f 92       	push	r1
 9be:	0f 92       	push	r0
 9c0:	0f b6       	in	r0, 0x3f	; 63
 9c2:	0f 92       	push	r0
 9c4:	11 24       	eor	r1, r1
 9c6:	2f 93       	push	r18
 9c8:	3f 93       	push	r19
 9ca:	4f 93       	push	r20
 9cc:	5f 93       	push	r21
 9ce:	6f 93       	push	r22
 9d0:	7f 93       	push	r23
 9d2:	8f 93       	push	r24
 9d4:	9f 93       	push	r25
 9d6:	af 93       	push	r26
 9d8:	bf 93       	push	r27
 9da:	ef 93       	push	r30
 9dc:	ff 93       	push	r31
 9de:	df 93       	push	r29
 9e0:	cf 93       	push	r28
 9e2:	cd b7       	in	r28, 0x3d	; 61
 9e4:	de b7       	in	r29, 0x3e	; 62

	INT_u16INT_2_PTR();
 9e6:	e0 91 7e 01 	lds	r30, 0x017E
 9ea:	f0 91 7f 01 	lds	r31, 0x017F
 9ee:	09 95       	icall
}
 9f0:	cf 91       	pop	r28
 9f2:	df 91       	pop	r29
 9f4:	ff 91       	pop	r31
 9f6:	ef 91       	pop	r30
 9f8:	bf 91       	pop	r27
 9fa:	af 91       	pop	r26
 9fc:	9f 91       	pop	r25
 9fe:	8f 91       	pop	r24
 a00:	7f 91       	pop	r23
 a02:	6f 91       	pop	r22
 a04:	5f 91       	pop	r21
 a06:	4f 91       	pop	r20
 a08:	3f 91       	pop	r19
 a0a:	2f 91       	pop	r18
 a0c:	0f 90       	pop	r0
 a0e:	0f be       	out	0x3f, r0	; 63
 a10:	0f 90       	pop	r0
 a12:	1f 90       	pop	r1
 a14:	18 95       	reti

00000a16 <CallBackINT0>:
void CallBackINT0(void (*Copy_PtrToFn)(void))
{
 a16:	df 93       	push	r29
 a18:	cf 93       	push	r28
 a1a:	00 d0       	rcall	.+0      	; 0xa1c <CallBackINT0+0x6>
 a1c:	cd b7       	in	r28, 0x3d	; 61
 a1e:	de b7       	in	r29, 0x3e	; 62
 a20:	9a 83       	std	Y+2, r25	; 0x02
 a22:	89 83       	std	Y+1, r24	; 0x01
	INT_u16INT_0_PTR=Copy_PtrToFn ;
 a24:	89 81       	ldd	r24, Y+1	; 0x01
 a26:	9a 81       	ldd	r25, Y+2	; 0x02
 a28:	90 93 7d 01 	sts	0x017D, r25
 a2c:	80 93 7c 01 	sts	0x017C, r24

}
 a30:	0f 90       	pop	r0
 a32:	0f 90       	pop	r0
 a34:	cf 91       	pop	r28
 a36:	df 91       	pop	r29
 a38:	08 95       	ret

00000a3a <CallBackINT1>:
void CallBackINT1(void (*Copy_PtrToFn)(void))
{
 a3a:	df 93       	push	r29
 a3c:	cf 93       	push	r28
 a3e:	00 d0       	rcall	.+0      	; 0xa40 <CallBackINT1+0x6>
 a40:	cd b7       	in	r28, 0x3d	; 61
 a42:	de b7       	in	r29, 0x3e	; 62
 a44:	9a 83       	std	Y+2, r25	; 0x02
 a46:	89 83       	std	Y+1, r24	; 0x01
	INT_u16INT_1_PTR=Copy_PtrToFn ;
 a48:	89 81       	ldd	r24, Y+1	; 0x01
 a4a:	9a 81       	ldd	r25, Y+2	; 0x02
 a4c:	90 93 81 01 	sts	0x0181, r25
 a50:	80 93 80 01 	sts	0x0180, r24
}
 a54:	0f 90       	pop	r0
 a56:	0f 90       	pop	r0
 a58:	cf 91       	pop	r28
 a5a:	df 91       	pop	r29
 a5c:	08 95       	ret

00000a5e <CallBackINT2>:
void CallBackINT2(void (*Copy_PtrToFn)(void))
{
 a5e:	df 93       	push	r29
 a60:	cf 93       	push	r28
 a62:	00 d0       	rcall	.+0      	; 0xa64 <CallBackINT2+0x6>
 a64:	cd b7       	in	r28, 0x3d	; 61
 a66:	de b7       	in	r29, 0x3e	; 62
 a68:	9a 83       	std	Y+2, r25	; 0x02
 a6a:	89 83       	std	Y+1, r24	; 0x01
	INT_u16INT_2_PTR=Copy_PtrToFn ;
 a6c:	89 81       	ldd	r24, Y+1	; 0x01
 a6e:	9a 81       	ldd	r25, Y+2	; 0x02
 a70:	90 93 7f 01 	sts	0x017F, r25
 a74:	80 93 7e 01 	sts	0x017E, r24
}
 a78:	0f 90       	pop	r0
 a7a:	0f 90       	pop	r0
 a7c:	cf 91       	pop	r28
 a7e:	df 91       	pop	r29
 a80:	08 95       	ret

00000a82 <SEI>:
void SEI(void)
{
 a82:	df 93       	push	r29
 a84:	cf 93       	push	r28
 a86:	cd b7       	in	r28, 0x3d	; 61
 a88:	de b7       	in	r29, 0x3e	; 62
	__asm__("SEI") ;
 a8a:	78 94       	sei
}
 a8c:	cf 91       	pop	r28
 a8e:	df 91       	pop	r29
 a90:	08 95       	ret

00000a92 <CEI>:

void CEI(void)
{
 a92:	df 93       	push	r29
 a94:	cf 93       	push	r28
 a96:	cd b7       	in	r28, 0x3d	; 61
 a98:	de b7       	in	r29, 0x3e	; 62
//	__asm__("CEI") ;
}
 a9a:	cf 91       	pop	r28
 a9c:	df 91       	pop	r29
 a9e:	08 95       	ret

00000aa0 <TIM0_voidInit>:
#include "DIO-utilites.h"

u32 TIM0_OFCOUNT=0 ;
u32 TIM0_u8TIME_OVFLW = ((256*TIM0_u8PRESCLER)/FCPU) ;
void TIM0_voidInit(void)
{
 aa0:	df 93       	push	r29
 aa2:	cf 93       	push	r28
 aa4:	cd b7       	in	r28, 0x3d	; 61
 aa6:	de b7       	in	r29, 0x3e	; 62
	TCCR0|=TIM0_u8TCCR0INIT;
 aa8:	a3 e5       	ldi	r26, 0x53	; 83
 aaa:	b0 e0       	ldi	r27, 0x00	; 0
 aac:	e3 e5       	ldi	r30, 0x53	; 83
 aae:	f0 e0       	ldi	r31, 0x00	; 0
 ab0:	80 81       	ld	r24, Z
 ab2:	83 60       	ori	r24, 0x03	; 3
 ab4:	8c 93       	st	X, r24
}
 ab6:	cf 91       	pop	r28
 ab8:	df 91       	pop	r29
 aba:	08 95       	ret

00000abc <TIM0_u8ReadTimer>:

f32 TIM0_u8ReadTimer(void)
{
 abc:	df 93       	push	r29
 abe:	cf 93       	push	r28
 ac0:	cd b7       	in	r28, 0x3d	; 61
 ac2:	de b7       	in	r29, 0x3e	; 62
	return ((TCNT0*TIM0_u8PRESCLER)/FCPU) ;
 ac4:	e2 e5       	ldi	r30, 0x52	; 82
 ac6:	f0 e0       	ldi	r31, 0x00	; 0
 ac8:	80 81       	ld	r24, Z
 aca:	88 2f       	mov	r24, r24
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	00 24       	eor	r0, r0
 ad0:	96 95       	lsr	r25
 ad2:	87 95       	ror	r24
 ad4:	07 94       	ror	r0
 ad6:	96 95       	lsr	r25
 ad8:	87 95       	ror	r24
 ada:	07 94       	ror	r0
 adc:	98 2f       	mov	r25, r24
 ade:	80 2d       	mov	r24, r0
 ae0:	20 ea       	ldi	r18, 0xA0	; 160
 ae2:	3f e0       	ldi	r19, 0x0F	; 15
 ae4:	b9 01       	movw	r22, r18
 ae6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__divmodhi4>
 aea:	cb 01       	movw	r24, r22
 aec:	aa 27       	eor	r26, r26
 aee:	97 fd       	sbrc	r25, 7
 af0:	a0 95       	com	r26
 af2:	ba 2f       	mov	r27, r26
 af4:	bc 01       	movw	r22, r24
 af6:	cd 01       	movw	r24, r26
 af8:	0e 94 49 00 	call	0x92	; 0x92 <__floatsisf>
 afc:	dc 01       	movw	r26, r24
 afe:	cb 01       	movw	r24, r22
}
 b00:	bc 01       	movw	r22, r24
 b02:	cd 01       	movw	r24, r26
 b04:	cf 91       	pop	r28
 b06:	df 91       	pop	r29
 b08:	08 95       	ret

00000b0a <TIM0_u8ReadOF>:
u32 TIM0_u8ReadOF(void)
{
 b0a:	df 93       	push	r29
 b0c:	cf 93       	push	r28
 b0e:	cd b7       	in	r28, 0x3d	; 61
 b10:	de b7       	in	r29, 0x3e	; 62

   if(get_bit(TIFR,TOV0))
 b12:	e8 e5       	ldi	r30, 0x58	; 88
 b14:	f0 e0       	ldi	r31, 0x00	; 0
 b16:	80 81       	ld	r24, Z
 b18:	88 2f       	mov	r24, r24
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	81 70       	andi	r24, 0x01	; 1
 b1e:	90 70       	andi	r25, 0x00	; 0
 b20:	88 23       	and	r24, r24
 b22:	81 f0       	breq	.+32     	; 0xb44 <TIM0_u8ReadOF+0x3a>
   {
	   set_bit(TIFR,TOV0);
 b24:	a8 e5       	ldi	r26, 0x58	; 88
 b26:	b0 e0       	ldi	r27, 0x00	; 0
 b28:	e8 e5       	ldi	r30, 0x58	; 88
 b2a:	f0 e0       	ldi	r31, 0x00	; 0
 b2c:	80 81       	ld	r24, Z
 b2e:	81 60       	ori	r24, 0x01	; 1
 b30:	8c 93       	st	X, r24
	   TIM0_OFCOUNT++ ;
 b32:	80 91 7a 01 	lds	r24, 0x017A
 b36:	90 91 7b 01 	lds	r25, 0x017B
 b3a:	01 96       	adiw	r24, 0x01	; 1
 b3c:	90 93 7b 01 	sts	0x017B, r25
 b40:	80 93 7a 01 	sts	0x017A, r24
   }

   	//DELAY(100);

return (TIM0_OFCOUNT *TIM0_u8TIME_OVFLW ) ;
 b44:	20 91 7a 01 	lds	r18, 0x017A
 b48:	30 91 7b 01 	lds	r19, 0x017B
 b4c:	80 91 60 01 	lds	r24, 0x0160
 b50:	90 91 61 01 	lds	r25, 0x0161
 b54:	ac 01       	movw	r20, r24
 b56:	24 9f       	mul	r18, r20
 b58:	c0 01       	movw	r24, r0
 b5a:	25 9f       	mul	r18, r21
 b5c:	90 0d       	add	r25, r0
 b5e:	34 9f       	mul	r19, r20
 b60:	90 0d       	add	r25, r0
 b62:	11 24       	eor	r1, r1

}
 b64:	cf 91       	pop	r28
 b66:	df 91       	pop	r29
 b68:	08 95       	ret

00000b6a <TIM0_voiResetTimer>:
void TIM0_voiResetTimer(void)
{
 b6a:	df 93       	push	r29
 b6c:	cf 93       	push	r28
 b6e:	cd b7       	in	r28, 0x3d	; 61
 b70:	de b7       	in	r29, 0x3e	; 62
	TIM0_OFCOUNT=0 ;
 b72:	10 92 7b 01 	sts	0x017B, r1
 b76:	10 92 7a 01 	sts	0x017A, r1
}
 b7a:	cf 91       	pop	r28
 b7c:	df 91       	pop	r29
 b7e:	08 95       	ret

00000b80 <main>:
#include "INT_interface.h"
//u8 flag = 0xff;
//static u32 counter = 0;

void main()
    {
 b80:	df 93       	push	r29
 b82:	cf 93       	push	r28
 b84:	cd b7       	in	r28, 0x3d	; 61
 b86:	de b7       	in	r29, 0x3e	; 62

  //  u32 TimeRead;
    //u8 counter = 0;

    DIO_voidInit();
 b88:	0e 94 cb 01 	call	0x396	; 0x396 <DIO_voidInit>
    INT_voidInit();
 b8c:	0e 94 24 04 	call	0x848	; 0x848 <INT_voidInit>
    TIM0_voidInit();
 b90:	0e 94 50 05 	call	0xaa0	; 0xaa0 <TIM0_voidInit>
    DDRA = 0xff;
 b94:	ea e3       	ldi	r30, 0x3A	; 58
 b96:	f0 e0       	ldi	r31, 0x00	; 0
 b98:	8f ef       	ldi	r24, 0xFF	; 255
 b9a:	80 83       	st	Z, r24
//    DDRD=0xff;
//    DDRC=0;
//    PORTD=0;
    PORTA = 0xff;
 b9c:	eb e3       	ldi	r30, 0x3B	; 59
 b9e:	f0 e0       	ldi	r31, 0x00	; 0
 ba0:	8f ef       	ldi	r24, 0xFF	; 255
 ba2:	80 83       	st	Z, r24

    /*Comment!: set up timer with no prescaler and CTC mode*/

    TCCR1B |= (1 << WGM12) | (1 << CS10);
 ba4:	ae e4       	ldi	r26, 0x4E	; 78
 ba6:	b0 e0       	ldi	r27, 0x00	; 0
 ba8:	ee e4       	ldi	r30, 0x4E	; 78
 baa:	f0 e0       	ldi	r31, 0x00	; 0
 bac:	80 81       	ld	r24, Z
 bae:	89 60       	ori	r24, 0x09	; 9
 bb0:	8c 93       	st	X, r24

    /*Comment!: initialize counter*/
    TCNT1 = 0;
 bb2:	ec e4       	ldi	r30, 0x4C	; 76
 bb4:	f0 e0       	ldi	r31, 0x00	; 0
 bb6:	11 82       	std	Z+1, r1	; 0x01
 bb8:	10 82       	st	Z, r1

    /*Comment!: set compare value*/
    OCR1A = 4000 / 80;
 bba:	ea e4       	ldi	r30, 0x4A	; 74
 bbc:	f0 e0       	ldi	r31, 0x00	; 0
 bbe:	82 e3       	ldi	r24, 0x32	; 50
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	91 83       	std	Z+1, r25	; 0x01
 bc4:	80 83       	st	Z, r24

    /*Comment!: enable compare interrupt*/
    TIMSK |= (1 << OCIE1A);
 bc6:	a9 e5       	ldi	r26, 0x59	; 89
 bc8:	b0 e0       	ldi	r27, 0x00	; 0
 bca:	e9 e5       	ldi	r30, 0x59	; 89
 bcc:	f0 e0       	ldi	r31, 0x00	; 0
 bce:	80 81       	ld	r24, Z
 bd0:	80 61       	ori	r24, 0x10	; 16
 bd2:	8c 93       	st	X, r24

    /*Comment!: enable global interrupt*/
    sei();
 bd4:	78 94       	sei
 bd6:	ff cf       	rjmp	.-2      	; 0xbd6 <main+0x56>

00000bd8 <__vector_7>:

    return;
    }

ISR (TIMER1_COMPA_vect)
    {
 bd8:	1f 92       	push	r1
 bda:	0f 92       	push	r0
 bdc:	0f b6       	in	r0, 0x3f	; 63
 bde:	0f 92       	push	r0
 be0:	11 24       	eor	r1, r1
 be2:	8f 93       	push	r24
 be4:	af 93       	push	r26
 be6:	bf 93       	push	r27
 be8:	ef 93       	push	r30
 bea:	ff 93       	push	r31
 bec:	df 93       	push	r29
 bee:	cf 93       	push	r28
 bf0:	cd b7       	in	r28, 0x3d	; 61
 bf2:	de b7       	in	r29, 0x3e	; 62
    /*Comment!: disable global interrupt*/

//cli();
    /*Comment!: toggle pin*/

	PORTA = ~PORTA;
 bf4:	ab e3       	ldi	r26, 0x3B	; 59
 bf6:	b0 e0       	ldi	r27, 0x00	; 0
 bf8:	eb e3       	ldi	r30, 0x3B	; 59
 bfa:	f0 e0       	ldi	r31, 0x00	; 0
 bfc:	80 81       	ld	r24, Z
 bfe:	80 95       	com	r24
 c00:	8c 93       	st	X, r24



    /*Comment!: enable global interrupt*/
    // sei();
    }
 c02:	cf 91       	pop	r28
 c04:	df 91       	pop	r29
 c06:	ff 91       	pop	r31
 c08:	ef 91       	pop	r30
 c0a:	bf 91       	pop	r27
 c0c:	af 91       	pop	r26
 c0e:	8f 91       	pop	r24
 c10:	0f 90       	pop	r0
 c12:	0f be       	out	0x3f, r0	; 63
 c14:	0f 90       	pop	r0
 c16:	1f 90       	pop	r1
 c18:	18 95       	reti

00000c1a <__divmodhi4>:
 c1a:	97 fb       	bst	r25, 7
 c1c:	09 2e       	mov	r0, r25
 c1e:	07 26       	eor	r0, r23
 c20:	0a d0       	rcall	.+20     	; 0xc36 <__divmodhi4_neg1>
 c22:	77 fd       	sbrc	r23, 7
 c24:	04 d0       	rcall	.+8      	; 0xc2e <__divmodhi4_neg2>
 c26:	0c d0       	rcall	.+24     	; 0xc40 <__udivmodhi4>
 c28:	06 d0       	rcall	.+12     	; 0xc36 <__divmodhi4_neg1>
 c2a:	00 20       	and	r0, r0
 c2c:	1a f4       	brpl	.+6      	; 0xc34 <__divmodhi4_exit>

00000c2e <__divmodhi4_neg2>:
 c2e:	70 95       	com	r23
 c30:	61 95       	neg	r22
 c32:	7f 4f       	sbci	r23, 0xFF	; 255

00000c34 <__divmodhi4_exit>:
 c34:	08 95       	ret

00000c36 <__divmodhi4_neg1>:
 c36:	f6 f7       	brtc	.-4      	; 0xc34 <__divmodhi4_exit>
 c38:	90 95       	com	r25
 c3a:	81 95       	neg	r24
 c3c:	9f 4f       	sbci	r25, 0xFF	; 255
 c3e:	08 95       	ret

00000c40 <__udivmodhi4>:
 c40:	aa 1b       	sub	r26, r26
 c42:	bb 1b       	sub	r27, r27
 c44:	51 e1       	ldi	r21, 0x11	; 17
 c46:	07 c0       	rjmp	.+14     	; 0xc56 <__udivmodhi4_ep>

00000c48 <__udivmodhi4_loop>:
 c48:	aa 1f       	adc	r26, r26
 c4a:	bb 1f       	adc	r27, r27
 c4c:	a6 17       	cp	r26, r22
 c4e:	b7 07       	cpc	r27, r23
 c50:	10 f0       	brcs	.+4      	; 0xc56 <__udivmodhi4_ep>
 c52:	a6 1b       	sub	r26, r22
 c54:	b7 0b       	sbc	r27, r23

00000c56 <__udivmodhi4_ep>:
 c56:	88 1f       	adc	r24, r24
 c58:	99 1f       	adc	r25, r25
 c5a:	5a 95       	dec	r21
 c5c:	a9 f7       	brne	.-22     	; 0xc48 <__udivmodhi4_loop>
 c5e:	80 95       	com	r24
 c60:	90 95       	com	r25
 c62:	bc 01       	movw	r22, r24
 c64:	cd 01       	movw	r24, r26
 c66:	08 95       	ret

00000c68 <__prologue_saves__>:
 c68:	2f 92       	push	r2
 c6a:	3f 92       	push	r3
 c6c:	4f 92       	push	r4
 c6e:	5f 92       	push	r5
 c70:	6f 92       	push	r6
 c72:	7f 92       	push	r7
 c74:	8f 92       	push	r8
 c76:	9f 92       	push	r9
 c78:	af 92       	push	r10
 c7a:	bf 92       	push	r11
 c7c:	cf 92       	push	r12
 c7e:	df 92       	push	r13
 c80:	ef 92       	push	r14
 c82:	ff 92       	push	r15
 c84:	0f 93       	push	r16
 c86:	1f 93       	push	r17
 c88:	cf 93       	push	r28
 c8a:	df 93       	push	r29
 c8c:	cd b7       	in	r28, 0x3d	; 61
 c8e:	de b7       	in	r29, 0x3e	; 62
 c90:	ca 1b       	sub	r28, r26
 c92:	db 0b       	sbc	r29, r27
 c94:	0f b6       	in	r0, 0x3f	; 63
 c96:	f8 94       	cli
 c98:	de bf       	out	0x3e, r29	; 62
 c9a:	0f be       	out	0x3f, r0	; 63
 c9c:	cd bf       	out	0x3d, r28	; 61
 c9e:	09 94       	ijmp

00000ca0 <__epilogue_restores__>:
 ca0:	2a 88       	ldd	r2, Y+18	; 0x12
 ca2:	39 88       	ldd	r3, Y+17	; 0x11
 ca4:	48 88       	ldd	r4, Y+16	; 0x10
 ca6:	5f 84       	ldd	r5, Y+15	; 0x0f
 ca8:	6e 84       	ldd	r6, Y+14	; 0x0e
 caa:	7d 84       	ldd	r7, Y+13	; 0x0d
 cac:	8c 84       	ldd	r8, Y+12	; 0x0c
 cae:	9b 84       	ldd	r9, Y+11	; 0x0b
 cb0:	aa 84       	ldd	r10, Y+10	; 0x0a
 cb2:	b9 84       	ldd	r11, Y+9	; 0x09
 cb4:	c8 84       	ldd	r12, Y+8	; 0x08
 cb6:	df 80       	ldd	r13, Y+7	; 0x07
 cb8:	ee 80       	ldd	r14, Y+6	; 0x06
 cba:	fd 80       	ldd	r15, Y+5	; 0x05
 cbc:	0c 81       	ldd	r16, Y+4	; 0x04
 cbe:	1b 81       	ldd	r17, Y+3	; 0x03
 cc0:	aa 81       	ldd	r26, Y+2	; 0x02
 cc2:	b9 81       	ldd	r27, Y+1	; 0x01
 cc4:	ce 0f       	add	r28, r30
 cc6:	d1 1d       	adc	r29, r1
 cc8:	0f b6       	in	r0, 0x3f	; 63
 cca:	f8 94       	cli
 ccc:	de bf       	out	0x3e, r29	; 62
 cce:	0f be       	out	0x3f, r0	; 63
 cd0:	cd bf       	out	0x3d, r28	; 61
 cd2:	ed 01       	movw	r28, r26
 cd4:	08 95       	ret

00000cd6 <_exit>:
 cd6:	f8 94       	cli

00000cd8 <__stop_program>:
 cd8:	ff cf       	rjmp	.-2      	; 0xcd8 <__stop_program>
