
Timer_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000a92  00000b26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800084  00800084  00000b4a  2**0
                  ALLOC
  3 .stab         000012e4  00000000  00000000  00000b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008f1  00000000  00000000  00001e30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__vector_10>
  2c:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 38       	cpi	r26, 0x8D	; 141
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 31 05 	call	0xa62	; 0xa62 <main>
  8a:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CLC_voidInit>:
#include "DIO-utilites.h"
#include "CLCD_private.h"
const u8  CLC_u8DataArr[8]={CLC_u8D0,CLC_u8D1,CLC_u8D2,CLC_u8D3,CLC_u8D4,CLC_u8D5,CLC_u8D6,CLC_u8D7};
const u8 CHKerr[2]={error,ok};
void CLC_voidInit(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	28 97       	sbiw	r28, 0x08	; 8
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61

	DELAY(20);
  a6:	18 86       	std	Y+8, r1	; 0x08
  a8:	1f 82       	std	Y+7, r1	; 0x07
  aa:	06 c0       	rjmp	.+12     	; 0xb8 <CLC_voidInit+0x26>
  ac:	00 00       	nop
  ae:	8f 81       	ldd	r24, Y+7	; 0x07
  b0:	98 85       	ldd	r25, Y+8	; 0x08
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	98 87       	std	Y+8, r25	; 0x08
  b6:	8f 83       	std	Y+7, r24	; 0x07
  b8:	8f 81       	ldd	r24, Y+7	; 0x07
  ba:	98 85       	ldd	r25, Y+8	; 0x08
  bc:	27 e2       	ldi	r18, 0x27	; 39
  be:	80 31       	cpi	r24, 0x10	; 16
  c0:	92 07       	cpc	r25, r18
  c2:	a0 f3       	brcs	.-24     	; 0xac <CLC_voidInit+0x1a>
	CLCD_u8WriteComand(0b00110000);
  c4:	80 e3       	ldi	r24, 0x30	; 48
  c6:	0e 94 ad 00 	call	0x15a	; 0x15a <CLCD_u8WriteComand>

	DELAY(5);
  ca:	1e 82       	std	Y+6, r1	; 0x06
  cc:	1d 82       	std	Y+5, r1	; 0x05
  ce:	06 c0       	rjmp	.+12     	; 0xdc <CLC_voidInit+0x4a>
  d0:	00 00       	nop
  d2:	8d 81       	ldd	r24, Y+5	; 0x05
  d4:	9e 81       	ldd	r25, Y+6	; 0x06
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	9e 83       	std	Y+6, r25	; 0x06
  da:	8d 83       	std	Y+5, r24	; 0x05
  dc:	8d 81       	ldd	r24, Y+5	; 0x05
  de:	9e 81       	ldd	r25, Y+6	; 0x06
  e0:	29 e0       	ldi	r18, 0x09	; 9
  e2:	84 3c       	cpi	r24, 0xC4	; 196
  e4:	92 07       	cpc	r25, r18
  e6:	a0 f3       	brcs	.-24     	; 0xd0 <CLC_voidInit+0x3e>
	CLCD_u8WriteComand(0b00110000);
  e8:	80 e3       	ldi	r24, 0x30	; 48
  ea:	0e 94 ad 00 	call	0x15a	; 0x15a <CLCD_u8WriteComand>

	DELAY(1);
  ee:	1c 82       	std	Y+4, r1	; 0x04
  f0:	1b 82       	std	Y+3, r1	; 0x03
  f2:	06 c0       	rjmp	.+12     	; 0x100 <CLC_voidInit+0x6e>
  f4:	00 00       	nop
  f6:	8b 81       	ldd	r24, Y+3	; 0x03
  f8:	9c 81       	ldd	r25, Y+4	; 0x04
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	9c 83       	std	Y+4, r25	; 0x04
  fe:	8b 83       	std	Y+3, r24	; 0x03
 100:	8b 81       	ldd	r24, Y+3	; 0x03
 102:	9c 81       	ldd	r25, Y+4	; 0x04
 104:	21 e0       	ldi	r18, 0x01	; 1
 106:	84 3f       	cpi	r24, 0xF4	; 244
 108:	92 07       	cpc	r25, r18
 10a:	a0 f3       	brcs	.-24     	; 0xf4 <CLC_voidInit+0x62>
	CLCD_u8WriteComand(0b00110000);
 10c:	80 e3       	ldi	r24, 0x30	; 48
 10e:	0e 94 ad 00 	call	0x15a	; 0x15a <CLCD_u8WriteComand>


	CLCD_u8WriteComand(0b00111000);
 112:	88 e3       	ldi	r24, 0x38	; 56
 114:	0e 94 ad 00 	call	0x15a	; 0x15a <CLCD_u8WriteComand>


	CLCD_u8WriteComand(0b00000110);
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	0e 94 ad 00 	call	0x15a	; 0x15a <CLCD_u8WriteComand>

	CLCD_u8WriteComand(0b00001100);
 11e:	8c e0       	ldi	r24, 0x0C	; 12
 120:	0e 94 ad 00 	call	0x15a	; 0x15a <CLCD_u8WriteComand>

	DELAY(1);
 124:	1a 82       	std	Y+2, r1	; 0x02
 126:	19 82       	std	Y+1, r1	; 0x01
 128:	06 c0       	rjmp	.+12     	; 0x136 <CLC_voidInit+0xa4>
 12a:	00 00       	nop
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	9a 81       	ldd	r25, Y+2	; 0x02
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	9a 83       	std	Y+2, r25	; 0x02
 134:	89 83       	std	Y+1, r24	; 0x01
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	9a 81       	ldd	r25, Y+2	; 0x02
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	84 3f       	cpi	r24, 0xF4	; 244
 13e:	92 07       	cpc	r25, r18
 140:	a0 f3       	brcs	.-24     	; 0x12a <CLC_voidInit+0x98>

	CLCD_u8WriteComand(CLC_u8FUNCSET);
 142:	8c e3       	ldi	r24, 0x3C	; 60
 144:	0e 94 ad 00 	call	0x15a	; 0x15a <CLCD_u8WriteComand>
}
 148:	28 96       	adiw	r28, 0x08	; 8
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
 154:	cf 91       	pop	r28
 156:	df 91       	pop	r29
 158:	08 95       	ret

0000015a <CLCD_u8WriteComand>:

extern u8 CLCD_u8WriteComand(u8 Copy_u8Command)
{
 15a:	df 93       	push	r29
 15c:	cf 93       	push	r28
 15e:	00 d0       	rcall	.+0      	; 0x160 <CLCD_u8WriteComand+0x6>
 160:	00 d0       	rcall	.+0      	; 0x162 <CLCD_u8WriteComand+0x8>
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	8c 83       	std	Y+4, r24	; 0x04
	u8 local_loopcount ;
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
 168:	1b 82       	std	Y+3, r1	; 0x03
 16a:	29 c0       	rjmp	.+82     	; 0x1be <CLCD_u8WriteComand+0x64>
	{
		DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(Copy_u8Command,local_loopcount));
 16c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e:	88 2f       	mov	r24, r24
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	fc 01       	movw	r30, r24
 174:	ee 59       	subi	r30, 0x9E	; 158
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	60 81       	ld	r22, Z
 17a:	8c 81       	ldd	r24, Y+4	; 0x04
 17c:	48 2f       	mov	r20, r24
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	8b 81       	ldd	r24, Y+3	; 0x03
 182:	28 2f       	mov	r18, r24
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <CLCD_u8WriteComand+0x36>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	2a 95       	dec	r18
 192:	e2 f7       	brpl	.-8      	; 0x18c <CLCD_u8WriteComand+0x32>
 194:	9a 01       	movw	r18, r20
 196:	28 23       	and	r18, r24
 198:	39 23       	and	r19, r25
 19a:	8b 81       	ldd	r24, Y+3	; 0x03
 19c:	88 2f       	mov	r24, r24
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	a9 01       	movw	r20, r18
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <CLCD_u8WriteComand+0x4e>
 1a4:	55 95       	asr	r21
 1a6:	47 95       	ror	r20
 1a8:	8a 95       	dec	r24
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <CLCD_u8WriteComand+0x4a>
 1ac:	ca 01       	movw	r24, r20
 1ae:	98 2f       	mov	r25, r24
 1b0:	86 2f       	mov	r24, r22
 1b2:	69 2f       	mov	r22, r25
 1b4:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>
}

extern u8 CLCD_u8WriteComand(u8 Copy_u8Command)
{
	u8 local_loopcount ;
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
 1b8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	8b 83       	std	Y+3, r24	; 0x03
 1be:	8b 81       	ldd	r24, Y+3	; 0x03
 1c0:	88 30       	cpi	r24, 0x08	; 8
 1c2:	a0 f2       	brcs	.-88     	; 0x16c <CLCD_u8WriteComand+0x12>
	{
		DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(Copy_u8Command,local_loopcount));
	}
	DIO_u8WritePinVal(CLC_u8RS, DIO_u8LOW);
 1c4:	80 e1       	ldi	r24, 0x10	; 16
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8RW, DIO_u8LOW);
 1cc:	81 e1       	ldi	r24, 0x11	; 17
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
 1d4:	82 e1       	ldi	r24, 0x12	; 18
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>
	DELAY(1);
 1dc:	1a 82       	std	Y+2, r1	; 0x02
 1de:	19 82       	std	Y+1, r1	; 0x01
 1e0:	06 c0       	rjmp	.+12     	; 0x1ee <CLCD_u8WriteComand+0x94>
 1e2:	00 00       	nop
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	9a 81       	ldd	r25, Y+2	; 0x02
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	9a 83       	std	Y+2, r25	; 0x02
 1ec:	89 83       	std	Y+1, r24	; 0x01
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	9a 81       	ldd	r25, Y+2	; 0x02
 1f2:	51 e0       	ldi	r21, 0x01	; 1
 1f4:	84 3f       	cpi	r24, 0xF4	; 244
 1f6:	95 07       	cpc	r25, r21
 1f8:	a0 f3       	brcs	.-24     	; 0x1e2 <CLCD_u8WriteComand+0x88>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
 1fa:	82 e1       	ldi	r24, 0x12	; 18
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>

	return 0 ;
 202:	80 e0       	ldi	r24, 0x00	; 0
}
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	cf 91       	pop	r28
 20e:	df 91       	pop	r29
 210:	08 95       	ret

00000212 <CLCD_u8WriteDataChar>:

extern u8 CLCD_u8WriteDataChar(u8 Copy_u8Data)
{
 212:	df 93       	push	r29
 214:	cf 93       	push	r28
 216:	00 d0       	rcall	.+0      	; 0x218 <CLCD_u8WriteDataChar+0x6>
 218:	00 d0       	rcall	.+0      	; 0x21a <CLCD_u8WriteDataChar+0x8>
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
 21e:	8c 83       	std	Y+4, r24	; 0x04
	u8 local_loopcount ;
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
 220:	1b 82       	std	Y+3, r1	; 0x03
 222:	29 c0       	rjmp	.+82     	; 0x276 <CLCD_u8WriteDataChar+0x64>
	{
	DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(Copy_u8Data,local_loopcount));
 224:	8b 81       	ldd	r24, Y+3	; 0x03
 226:	88 2f       	mov	r24, r24
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	fc 01       	movw	r30, r24
 22c:	ee 59       	subi	r30, 0x9E	; 158
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	60 81       	ld	r22, Z
 232:	8c 81       	ldd	r24, Y+4	; 0x04
 234:	48 2f       	mov	r20, r24
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <CLCD_u8WriteDataChar+0x36>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	2a 95       	dec	r18
 24a:	e2 f7       	brpl	.-8      	; 0x244 <CLCD_u8WriteDataChar+0x32>
 24c:	9a 01       	movw	r18, r20
 24e:	28 23       	and	r18, r24
 250:	39 23       	and	r19, r25
 252:	8b 81       	ldd	r24, Y+3	; 0x03
 254:	88 2f       	mov	r24, r24
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	a9 01       	movw	r20, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <CLCD_u8WriteDataChar+0x4e>
 25c:	55 95       	asr	r21
 25e:	47 95       	ror	r20
 260:	8a 95       	dec	r24
 262:	e2 f7       	brpl	.-8      	; 0x25c <CLCD_u8WriteDataChar+0x4a>
 264:	ca 01       	movw	r24, r20
 266:	98 2f       	mov	r25, r24
 268:	86 2f       	mov	r24, r22
 26a:	69 2f       	mov	r22, r25
 26c:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>
}

extern u8 CLCD_u8WriteDataChar(u8 Copy_u8Data)
{
	u8 local_loopcount ;
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
 270:	8b 81       	ldd	r24, Y+3	; 0x03
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	8b 83       	std	Y+3, r24	; 0x03
 276:	8b 81       	ldd	r24, Y+3	; 0x03
 278:	88 30       	cpi	r24, 0x08	; 8
 27a:	a0 f2       	brcs	.-88     	; 0x224 <CLCD_u8WriteDataChar+0x12>
	{
	DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(Copy_u8Data,local_loopcount));
	}
	DIO_u8WritePinVal(CLC_u8RS, DIO_u8HIGH);
 27c:	80 e1       	ldi	r24, 0x10	; 16
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8RW, DIO_u8LOW);
 284:	81 e1       	ldi	r24, 0x11	; 17
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
 28c:	82 e1       	ldi	r24, 0x12	; 18
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>
	DELAY(1);
 294:	1a 82       	std	Y+2, r1	; 0x02
 296:	19 82       	std	Y+1, r1	; 0x01
 298:	06 c0       	rjmp	.+12     	; 0x2a6 <CLCD_u8WriteDataChar+0x94>
 29a:	00 00       	nop
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	9a 81       	ldd	r25, Y+2	; 0x02
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	9a 83       	std	Y+2, r25	; 0x02
 2a4:	89 83       	std	Y+1, r24	; 0x01
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	9a 81       	ldd	r25, Y+2	; 0x02
 2aa:	51 e0       	ldi	r21, 0x01	; 1
 2ac:	84 3f       	cpi	r24, 0xF4	; 244
 2ae:	95 07       	cpc	r25, r21
 2b0:	a0 f3       	brcs	.-24     	; 0x29a <CLCD_u8WriteDataChar+0x88>

	DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
 2b2:	82 e1       	ldi	r24, 0x12	; 18
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>

	return 0 ;
 2ba:	80 e0       	ldi	r24, 0x00	; 0
}
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	cf 91       	pop	r28
 2c6:	df 91       	pop	r29
 2c8:	08 95       	ret

000002ca <CLCD_u8WriteDataStr>:

extern u8 CLCD_u8WriteDataStr(u8 *Copy_u8Data)
{
 2ca:	df 93       	push	r29
 2cc:	cf 93       	push	r28
 2ce:	00 d0       	rcall	.+0      	; 0x2d0 <CLCD_u8WriteDataStr+0x6>
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <CLCD_u8WriteDataStr+0x8>
 2d2:	0f 92       	push	r0
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	9d 83       	std	Y+5, r25	; 0x05
 2da:	8c 83       	std	Y+4, r24	; 0x04
	u8 local_loopcount=0 ;
 2dc:	1b 82       	std	Y+3, r1	; 0x03
 2de:	54 c0       	rjmp	.+168    	; 0x388 <CLCD_u8WriteDataStr+0xbe>
while(*Copy_u8Data)
{
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
 2e0:	1b 82       	std	Y+3, r1	; 0x03
 2e2:	2b c0       	rjmp	.+86     	; 0x33a <CLCD_u8WriteDataStr+0x70>
	{
	DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(*Copy_u8Data,local_loopcount));
 2e4:	8b 81       	ldd	r24, Y+3	; 0x03
 2e6:	88 2f       	mov	r24, r24
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	fc 01       	movw	r30, r24
 2ec:	ee 59       	subi	r30, 0x9E	; 158
 2ee:	ff 4f       	sbci	r31, 0xFF	; 255
 2f0:	60 81       	ld	r22, Z
 2f2:	ec 81       	ldd	r30, Y+4	; 0x04
 2f4:	fd 81       	ldd	r31, Y+5	; 0x05
 2f6:	80 81       	ld	r24, Z
 2f8:	48 2f       	mov	r20, r24
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	8b 81       	ldd	r24, Y+3	; 0x03
 2fe:	28 2f       	mov	r18, r24
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <CLCD_u8WriteDataStr+0x42>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	2a 95       	dec	r18
 30e:	e2 f7       	brpl	.-8      	; 0x308 <CLCD_u8WriteDataStr+0x3e>
 310:	9a 01       	movw	r18, r20
 312:	28 23       	and	r18, r24
 314:	39 23       	and	r19, r25
 316:	8b 81       	ldd	r24, Y+3	; 0x03
 318:	88 2f       	mov	r24, r24
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	a9 01       	movw	r20, r18
 31e:	02 c0       	rjmp	.+4      	; 0x324 <CLCD_u8WriteDataStr+0x5a>
 320:	55 95       	asr	r21
 322:	47 95       	ror	r20
 324:	8a 95       	dec	r24
 326:	e2 f7       	brpl	.-8      	; 0x320 <CLCD_u8WriteDataStr+0x56>
 328:	ca 01       	movw	r24, r20
 32a:	98 2f       	mov	r25, r24
 32c:	86 2f       	mov	r24, r22
 32e:	69 2f       	mov	r22, r25
 330:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>
extern u8 CLCD_u8WriteDataStr(u8 *Copy_u8Data)
{
	u8 local_loopcount=0 ;
while(*Copy_u8Data)
{
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
 334:	8b 81       	ldd	r24, Y+3	; 0x03
 336:	8f 5f       	subi	r24, 0xFF	; 255
 338:	8b 83       	std	Y+3, r24	; 0x03
 33a:	8b 81       	ldd	r24, Y+3	; 0x03
 33c:	88 30       	cpi	r24, 0x08	; 8
 33e:	90 f2       	brcs	.-92     	; 0x2e4 <CLCD_u8WriteDataStr+0x1a>
	{
	DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(*Copy_u8Data,local_loopcount));
	}

	DIO_u8WritePinVal(CLC_u8RS, DIO_u8HIGH);
 340:	80 e1       	ldi	r24, 0x10	; 16
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8RW, DIO_u8LOW);
 348:	81 e1       	ldi	r24, 0x11	; 17
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
 350:	82 e1       	ldi	r24, 0x12	; 18
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>
	DELAY(1);
 358:	1a 82       	std	Y+2, r1	; 0x02
 35a:	19 82       	std	Y+1, r1	; 0x01
 35c:	06 c0       	rjmp	.+12     	; 0x36a <CLCD_u8WriteDataStr+0xa0>
 35e:	00 00       	nop
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	9a 81       	ldd	r25, Y+2	; 0x02
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	9a 83       	std	Y+2, r25	; 0x02
 368:	89 83       	std	Y+1, r24	; 0x01
 36a:	89 81       	ldd	r24, Y+1	; 0x01
 36c:	9a 81       	ldd	r25, Y+2	; 0x02
 36e:	51 e0       	ldi	r21, 0x01	; 1
 370:	84 3f       	cpi	r24, 0xF4	; 244
 372:	95 07       	cpc	r25, r21
 374:	a0 f3       	brcs	.-24     	; 0x35e <CLCD_u8WriteDataStr+0x94>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
 376:	82 e1       	ldi	r24, 0x12	; 18
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>
	Copy_u8Data++ ;
 37e:	8c 81       	ldd	r24, Y+4	; 0x04
 380:	9d 81       	ldd	r25, Y+5	; 0x05
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	9d 83       	std	Y+5, r25	; 0x05
 386:	8c 83       	std	Y+4, r24	; 0x04
}

extern u8 CLCD_u8WriteDataStr(u8 *Copy_u8Data)
{
	u8 local_loopcount=0 ;
while(*Copy_u8Data)
 388:	ec 81       	ldd	r30, Y+4	; 0x04
 38a:	fd 81       	ldd	r31, Y+5	; 0x05
 38c:	80 81       	ld	r24, Z
 38e:	88 23       	and	r24, r24
 390:	09 f0       	breq	.+2      	; 0x394 <CLCD_u8WriteDataStr+0xca>
 392:	a6 cf       	rjmp	.-180    	; 0x2e0 <CLCD_u8WriteDataStr+0x16>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
	DELAY(1);
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
	Copy_u8Data++ ;
	}
	return 0 ;
 394:	80 e0       	ldi	r24, 0x00	; 0
}
 396:	0f 90       	pop	r0
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	cf 91       	pop	r28
 3a2:	df 91       	pop	r29
 3a4:	08 95       	ret

000003a6 <CLCD_u8ReadBF>:
extern u8 CLCD_u8ReadBF(u8 *Copy_u8BF)
{
 3a6:	df 93       	push	r29
 3a8:	cf 93       	push	r28
 3aa:	00 d0       	rcall	.+0      	; 0x3ac <CLCD_u8ReadBF+0x6>
 3ac:	00 d0       	rcall	.+0      	; 0x3ae <CLCD_u8ReadBF+0x8>
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	9c 83       	std	Y+4, r25	; 0x04
 3b4:	8b 83       	std	Y+3, r24	; 0x03
	DIO_u8WritePinVal(CLC_u8RS, DIO_u8LOW);
 3b6:	80 e1       	ldi	r24, 0x10	; 16
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8RW, DIO_u8HIGH);
 3be:	81 e1       	ldi	r24, 0x11	; 17
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>
	//DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
	DIO_u8WritePinDir(CLC_u8D7,DIO_u8LOW);
 3c6:	8f e0       	ldi	r24, 0x0F	; 15
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	0e 94 7d 03 	call	0x6fa	; 0x6fa <DIO_u8WritePinDir>
	DIO_u8ReadPinVal(CLC_u8D7,Copy_u8BF);
 3ce:	2b 81       	ldd	r18, Y+3	; 0x03
 3d0:	3c 81       	ldd	r19, Y+4	; 0x04
 3d2:	8f e0       	ldi	r24, 0x0F	; 15
 3d4:	b9 01       	movw	r22, r18
 3d6:	0e 94 88 02 	call	0x510	; 0x510 <DIO_u8ReadPinVal>
	DELAY(1);
 3da:	1a 82       	std	Y+2, r1	; 0x02
 3dc:	19 82       	std	Y+1, r1	; 0x01
 3de:	06 c0       	rjmp	.+12     	; 0x3ec <CLCD_u8ReadBF+0x46>
 3e0:	00 00       	nop
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	9a 81       	ldd	r25, Y+2	; 0x02
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	9a 83       	std	Y+2, r25	; 0x02
 3ea:	89 83       	std	Y+1, r24	; 0x01
 3ec:	89 81       	ldd	r24, Y+1	; 0x01
 3ee:	9a 81       	ldd	r25, Y+2	; 0x02
 3f0:	21 e0       	ldi	r18, 0x01	; 1
 3f2:	84 3f       	cpi	r24, 0xF4	; 244
 3f4:	92 07       	cpc	r25, r18
 3f6:	a0 f3       	brcs	.-24     	; 0x3e0 <CLCD_u8ReadBF+0x3a>
	//DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
	DIO_u8WritePinDir(CLC_u8D7,DIO_u8HIGH);
 3f8:	8f e0       	ldi	r24, 0x0F	; 15
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	0e 94 7d 03 	call	0x6fa	; 0x6fa <DIO_u8WritePinDir>

	return 0 ;
 400:	80 e0       	ldi	r24, 0x00	; 0
}
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	cf 91       	pop	r28
 40c:	df 91       	pop	r29
 40e:	08 95       	ret

00000410 <CLCD_u8WriteOnCGRam>:

extern u8 CLCD_u8WriteOnCGRam(u8 *Copy_u8Ptrn,u8 Copy_location)
{
 410:	df 93       	push	r29
 412:	cf 93       	push	r28
 414:	00 d0       	rcall	.+0      	; 0x416 <CLCD_u8WriteOnCGRam+0x6>
 416:	00 d0       	rcall	.+0      	; 0x418 <CLCD_u8WriteOnCGRam+0x8>
 418:	00 d0       	rcall	.+0      	; 0x41a <CLCD_u8WriteOnCGRam+0xa>
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	9b 83       	std	Y+3, r25	; 0x03
 420:	8a 83       	std	Y+2, r24	; 0x02
 422:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_loopcount ;
	CLCD_u8WriteComand((0x40+Copy_location*8));
 424:	8c 81       	ldd	r24, Y+4	; 0x04
 426:	88 2f       	mov	r24, r24
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	08 96       	adiw	r24, 0x08	; 8
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	0e 94 ad 00 	call	0x15a	; 0x15a <CLCD_u8WriteComand>
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
 43c:	19 82       	std	Y+1, r1	; 0x01
 43e:	0e c0       	rjmp	.+28     	; 0x45c <CLCD_u8WriteOnCGRam+0x4c>
	{
		CLCD_u8WriteDataChar(Copy_u8Ptrn[local_loopcount]);
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	28 2f       	mov	r18, r24
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	8a 81       	ldd	r24, Y+2	; 0x02
 448:	9b 81       	ldd	r25, Y+3	; 0x03
 44a:	fc 01       	movw	r30, r24
 44c:	e2 0f       	add	r30, r18
 44e:	f3 1f       	adc	r31, r19
 450:	80 81       	ld	r24, Z
 452:	0e 94 09 01 	call	0x212	; 0x212 <CLCD_u8WriteDataChar>

extern u8 CLCD_u8WriteOnCGRam(u8 *Copy_u8Ptrn,u8 Copy_location)
{
	u8 local_loopcount ;
	CLCD_u8WriteComand((0x40+Copy_location*8));
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
 456:	89 81       	ldd	r24, Y+1	; 0x01
 458:	8f 5f       	subi	r24, 0xFF	; 255
 45a:	89 83       	std	Y+1, r24	; 0x01
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	88 30       	cpi	r24, 0x08	; 8
 460:	78 f3       	brcs	.-34     	; 0x440 <CLCD_u8WriteOnCGRam+0x30>
	{
		CLCD_u8WriteDataChar(Copy_u8Ptrn[local_loopcount]);
	}


	return CHKerr[Copy_location<8]  ;
 462:	1e 82       	std	Y+6, r1	; 0x06
 464:	1d 82       	std	Y+5, r1	; 0x05
 466:	8c 81       	ldd	r24, Y+4	; 0x04
 468:	88 30       	cpi	r24, 0x08	; 8
 46a:	20 f4       	brcc	.+8      	; 0x474 <CLCD_u8WriteOnCGRam+0x64>
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	9e 83       	std	Y+6, r25	; 0x06
 472:	8d 83       	std	Y+5, r24	; 0x05
 474:	ed 81       	ldd	r30, Y+5	; 0x05
 476:	fe 81       	ldd	r31, Y+6	; 0x06
 478:	e6 59       	subi	r30, 0x96	; 150
 47a:	ff 4f       	sbci	r31, 0xFF	; 255
 47c:	80 81       	ld	r24, Z
}
 47e:	26 96       	adiw	r28, 0x06	; 6
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	f8 94       	cli
 484:	de bf       	out	0x3e, r29	; 62
 486:	0f be       	out	0x3f, r0	; 63
 488:	cd bf       	out	0x3d, r28	; 61
 48a:	cf 91       	pop	r28
 48c:	df 91       	pop	r29
 48e:	08 95       	ret

00000490 <DIO_voidInit>:
static  u8 * const DIO_u8Ddrs[]={DIO_u8DDRA ,DIO_u8DDRB, DIO_u8DDRC , DIO_u8DDRD} ;
static  u8 *const DIO_u8Pins[]={DIO_u8PORTA ,DIO_u8PORTB, DIO_u8PORTC , DIO_u8PORTD} ;

static  u8 DIO_Check[]={ok,error};
extern void DIO_voidInit(void)
{
 490:	df 93       	push	r29
 492:	cf 93       	push	r28
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62
  /*Comment!:initializing Ports Directions */
*DIO_u8Ddrs[DIO_u8PORT0]=DIO_u8PORTA_DIR;
 498:	e0 91 74 00 	lds	r30, 0x0074
 49c:	f0 91 75 00 	lds	r31, 0x0075
 4a0:	8f e8       	ldi	r24, 0x8F	; 143
 4a2:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT1]=DIO_u8PORTB_DIR;
 4a4:	e0 91 76 00 	lds	r30, 0x0076
 4a8:	f0 91 77 00 	lds	r31, 0x0077
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT2]=DIO_u8PORTC_DIR;
 4b0:	e0 91 78 00 	lds	r30, 0x0078
 4b4:	f0 91 79 00 	lds	r31, 0x0079
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT3]=DIO_u8PORTD_DIR;
 4bc:	e0 91 7a 00 	lds	r30, 0x007A
 4c0:	f0 91 7b 00 	lds	r31, 0x007B
 4c4:	8b e7       	ldi	r24, 0x7B	; 123
 4c6:	80 83       	st	Z, r24
/*Comment!:initializing Ports Value  */
*DIO_u8Ports[DIO_u8PORT0] =(DIO_u8PORTA_DIR & DIO_u8PORTA_VAL) | ((~DIO_u8PORTA_DIR)&*DIO_u8Ports[DIO_u8PORT0] );
 4c8:	a0 91 6c 00 	lds	r26, 0x006C
 4cc:	b0 91 6d 00 	lds	r27, 0x006D
 4d0:	e0 91 6c 00 	lds	r30, 0x006C
 4d4:	f0 91 6d 00 	lds	r31, 0x006D
 4d8:	80 81       	ld	r24, Z
 4da:	80 77       	andi	r24, 0x70	; 112
 4dc:	80 68       	ori	r24, 0x80	; 128
 4de:	8c 93       	st	X, r24
*DIO_u8Ports[DIO_u8PORT1] =(DIO_u8PORTB_DIR & DIO_u8PORTB_VAL)| ((~DIO_u8PORTB_DIR)&*DIO_u8Ports[DIO_u8PORT1] );
 4e0:	e0 91 6e 00 	lds	r30, 0x006E
 4e4:	f0 91 6f 00 	lds	r31, 0x006F
 4e8:	10 82       	st	Z, r1
*DIO_u8Ports[DIO_u8PORT2] =(DIO_u8PORTC_DIR & DIO_u8PORTC_VAL)| ((~DIO_u8PORTC_DIR)&*DIO_u8Ports[DIO_u8PORT2] );
 4ea:	e0 91 70 00 	lds	r30, 0x0070
 4ee:	f0 91 71 00 	lds	r31, 0x0071
 4f2:	10 82       	st	Z, r1
*DIO_u8Ports[DIO_u8PORT3] =(DIO_u8PORTD_DIR & DIO_u8PORTD_VAL)| ((~DIO_u8PORTD_DIR)&*DIO_u8Ports[DIO_u8PORT3] );
 4f4:	a0 91 72 00 	lds	r26, 0x0072
 4f8:	b0 91 73 00 	lds	r27, 0x0073
 4fc:	e0 91 72 00 	lds	r30, 0x0072
 500:	f0 91 73 00 	lds	r31, 0x0073
 504:	80 81       	ld	r24, Z
 506:	84 78       	andi	r24, 0x84	; 132
 508:	8c 93       	st	X, r24

}
 50a:	cf 91       	pop	r28
 50c:	df 91       	pop	r29
 50e:	08 95       	ret

00000510 <DIO_u8ReadPinVal>:


extern u8 DIO_u8ReadPinVal(u8 Copy_u8PinIdx,u8* Copy_u8PtrToval)
{
 510:	df 93       	push	r29
 512:	cf 93       	push	r28
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
 518:	27 97       	sbiw	r28, 0x07	; 7
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	f8 94       	cli
 51e:	de bf       	out	0x3e, r29	; 62
 520:	0f be       	out	0x3f, r0	; 63
 522:	cd bf       	out	0x3d, r28	; 61
 524:	8b 83       	std	Y+3, r24	; 0x03
 526:	7d 83       	std	Y+5, r23	; 0x05
 528:	6c 83       	std	Y+4, r22	; 0x04
	 if(Copy_u8PinIdx<DIO_u8PINMAXIDX)
 52a:	8b 81       	ldd	r24, Y+3	; 0x03
 52c:	8f 31       	cpi	r24, 0x1F	; 31
 52e:	80 f5       	brcc	.+96     	; 0x590 <DIO_u8ReadPinVal+0x80>
	    {
	     //u8 Local_u8CheckPinState=ok ;
		u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
 530:	8b 81       	ldd	r24, Y+3	; 0x03
 532:	86 95       	lsr	r24
 534:	86 95       	lsr	r24
 536:	86 95       	lsr	r24
 538:	8a 83       	std	Y+2, r24	; 0x02
		u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
 53a:	8b 81       	ldd	r24, Y+3	; 0x03
 53c:	87 70       	andi	r24, 0x07	; 7
 53e:	89 83       	std	Y+1, r24	; 0x01

		* Copy_u8PtrToval=get_bit(*DIO_u8Pins[local_u8CheckPinPlace],local_u8MapPin);
 540:	8a 81       	ldd	r24, Y+2	; 0x02
 542:	88 2f       	mov	r24, r24
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	fc 01       	movw	r30, r24
 54c:	e4 58       	subi	r30, 0x84	; 132
 54e:	ff 4f       	sbci	r31, 0xFF	; 255
 550:	01 90       	ld	r0, Z+
 552:	f0 81       	ld	r31, Z
 554:	e0 2d       	mov	r30, r0
 556:	80 81       	ld	r24, Z
 558:	48 2f       	mov	r20, r24
 55a:	50 e0       	ldi	r21, 0x00	; 0
 55c:	89 81       	ldd	r24, Y+1	; 0x01
 55e:	28 2f       	mov	r18, r24
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_u8ReadPinVal+0x5c>
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	2a 95       	dec	r18
 56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_u8ReadPinVal+0x58>
 570:	9a 01       	movw	r18, r20
 572:	28 23       	and	r18, r24
 574:	39 23       	and	r19, r25
 576:	89 81       	ldd	r24, Y+1	; 0x01
 578:	88 2f       	mov	r24, r24
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	a9 01       	movw	r20, r18
 57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_u8ReadPinVal+0x74>
 580:	55 95       	asr	r21
 582:	47 95       	ror	r20
 584:	8a 95       	dec	r24
 586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_u8ReadPinVal+0x70>
 588:	ca 01       	movw	r24, r20
 58a:	ec 81       	ldd	r30, Y+4	; 0x04
 58c:	fd 81       	ldd	r31, Y+5	; 0x05
 58e:	80 83       	st	Z, r24
    }
    else
    {

    }
return  DIO_Check[Copy_u8PinIdx>DIO_u8PINMAXIDX] ;
 590:	1f 82       	std	Y+7, r1	; 0x07
 592:	1e 82       	std	Y+6, r1	; 0x06
 594:	8b 81       	ldd	r24, Y+3	; 0x03
 596:	80 32       	cpi	r24, 0x20	; 32
 598:	20 f0       	brcs	.+8      	; 0x5a2 <DIO_u8ReadPinVal+0x92>
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	9f 83       	std	Y+7, r25	; 0x07
 5a0:	8e 83       	std	Y+6, r24	; 0x06
 5a2:	ee 81       	ldd	r30, Y+6	; 0x06
 5a4:	ff 81       	ldd	r31, Y+7	; 0x07
 5a6:	e0 5a       	subi	r30, 0xA0	; 160
 5a8:	ff 4f       	sbci	r31, 0xFF	; 255
 5aa:	80 81       	ld	r24, Z
}
 5ac:	27 96       	adiw	r28, 0x07	; 7
 5ae:	0f b6       	in	r0, 0x3f	; 63
 5b0:	f8 94       	cli
 5b2:	de bf       	out	0x3e, r29	; 62
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	cd bf       	out	0x3d, r28	; 61
 5b8:	cf 91       	pop	r28
 5ba:	df 91       	pop	r29
 5bc:	08 95       	ret

000005be <DIO_u8WritePinVal>:

extern u8 DIO_u8WritePinVal(u8 Copy_u8PinIdx,u8 Copy_u8Pinval)
{
 5be:	df 93       	push	r29
 5c0:	cf 93       	push	r28
 5c2:	00 d0       	rcall	.+0      	; 0x5c4 <DIO_u8WritePinVal+0x6>
 5c4:	00 d0       	rcall	.+0      	; 0x5c6 <DIO_u8WritePinVal+0x8>
 5c6:	0f 92       	push	r0
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
 5cc:	8c 83       	std	Y+4, r24	; 0x04
 5ce:	6d 83       	std	Y+5, r22	; 0x05
	 u8 Local_u8CheckPinState=ok ;
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	8b 83       	std	Y+3, r24	; 0x03
     u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
 5d4:	8c 81       	ldd	r24, Y+4	; 0x04
 5d6:	86 95       	lsr	r24
 5d8:	86 95       	lsr	r24
 5da:	86 95       	lsr	r24
 5dc:	8a 83       	std	Y+2, r24	; 0x02
	 u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
 5de:	8c 81       	ldd	r24, Y+4	; 0x04
 5e0:	87 70       	andi	r24, 0x07	; 7
 5e2:	89 83       	std	Y+1, r24	; 0x01

	    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
 5e4:	8c 81       	ldd	r24, Y+4	; 0x04
 5e6:	80 32       	cpi	r24, 0x20	; 32
 5e8:	10 f0       	brcs	.+4      	; 0x5ee <DIO_u8WritePinVal+0x30>
	    {
	    	 Local_u8CheckPinState=error ;
 5ea:	1b 82       	std	Y+3, r1	; 0x03
 5ec:	33 c0       	rjmp	.+102    	; 0x654 <DIO_u8WritePinVal+0x96>
	    }
	    else
	    {
	    	assign_bit(*DIO_u8Ports[local_u8CheckPinPlace],local_u8MapPin,Copy_u8Pinval);
 5ee:	8a 81       	ldd	r24, Y+2	; 0x02
 5f0:	88 2f       	mov	r24, r24
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	fc 01       	movw	r30, r24
 5fa:	e4 59       	subi	r30, 0x94	; 148
 5fc:	ff 4f       	sbci	r31, 0xFF	; 255
 5fe:	a0 81       	ld	r26, Z
 600:	b1 81       	ldd	r27, Z+1	; 0x01
 602:	89 81       	ldd	r24, Y+1	; 0x01
 604:	28 2f       	mov	r18, r24
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	02 c0       	rjmp	.+4      	; 0x612 <DIO_u8WritePinVal+0x54>
 60e:	88 0f       	add	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	2a 95       	dec	r18
 614:	e2 f7       	brpl	.-8      	; 0x60e <DIO_u8WritePinVal+0x50>
 616:	28 2f       	mov	r18, r24
 618:	20 95       	com	r18
 61a:	8a 81       	ldd	r24, Y+2	; 0x02
 61c:	88 2f       	mov	r24, r24
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	fc 01       	movw	r30, r24
 626:	e4 59       	subi	r30, 0x94	; 148
 628:	ff 4f       	sbci	r31, 0xFF	; 255
 62a:	01 90       	ld	r0, Z+
 62c:	f0 81       	ld	r31, Z
 62e:	e0 2d       	mov	r30, r0
 630:	80 81       	ld	r24, Z
 632:	42 2f       	mov	r20, r18
 634:	48 23       	and	r20, r24
 636:	8d 81       	ldd	r24, Y+5	; 0x05
 638:	28 2f       	mov	r18, r24
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	89 81       	ldd	r24, Y+1	; 0x01
 63e:	88 2f       	mov	r24, r24
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	b9 01       	movw	r22, r18
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_u8WritePinVal+0x8c>
 646:	66 0f       	add	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	8a 95       	dec	r24
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_u8WritePinVal+0x88>
 64e:	cb 01       	movw	r24, r22
 650:	84 2b       	or	r24, r20
 652:	8c 93       	st	X, r24

	    }

     return  Local_u8CheckPinState ;
 654:	8b 81       	ldd	r24, Y+3	; 0x03
}
 656:	0f 90       	pop	r0
 658:	0f 90       	pop	r0
 65a:	0f 90       	pop	r0
 65c:	0f 90       	pop	r0
 65e:	0f 90       	pop	r0
 660:	cf 91       	pop	r28
 662:	df 91       	pop	r29
 664:	08 95       	ret

00000666 <DIO_u8ReadPortVal>:


extern u8 DIO_u8ReadPortVal(u8 Copy_u8PortIdx,u8* Copy_u8PtrToval)
{
 666:	df 93       	push	r29
 668:	cf 93       	push	r28
 66a:	00 d0       	rcall	.+0      	; 0x66c <DIO_u8ReadPortVal+0x6>
 66c:	00 d0       	rcall	.+0      	; 0x66e <DIO_u8ReadPortVal+0x8>
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
 672:	8a 83       	std	Y+2, r24	; 0x02
 674:	7c 83       	std	Y+4, r23	; 0x04
 676:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CheckPortR=ok ;
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
 67c:	8a 81       	ldd	r24, Y+2	; 0x02
 67e:	84 30       	cpi	r24, 0x04	; 4
 680:	80 f4       	brcc	.+32     	; 0x6a2 <DIO_u8ReadPortVal+0x3c>
	{

	* Copy_u8PtrToval=*DIO_u8Pins[Copy_u8PortIdx] ;
 682:	8a 81       	ldd	r24, Y+2	; 0x02
 684:	88 2f       	mov	r24, r24
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	fc 01       	movw	r30, r24
 68e:	e4 58       	subi	r30, 0x84	; 132
 690:	ff 4f       	sbci	r31, 0xFF	; 255
 692:	01 90       	ld	r0, Z+
 694:	f0 81       	ld	r31, Z
 696:	e0 2d       	mov	r30, r0
 698:	80 81       	ld	r24, Z
 69a:	eb 81       	ldd	r30, Y+3	; 0x03
 69c:	fc 81       	ldd	r31, Y+4	; 0x04
 69e:	80 83       	st	Z, r24
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <DIO_u8ReadPortVal+0x3e>
	}
	else
	{
		Local_u8CheckPortR=error ;
 6a2:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8CheckPortR ;
 6a4:	89 81       	ldd	r24, Y+1	; 0x01
}
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
 6aa:	0f 90       	pop	r0
 6ac:	0f 90       	pop	r0
 6ae:	cf 91       	pop	r28
 6b0:	df 91       	pop	r29
 6b2:	08 95       	ret

000006b4 <DIO_u8WritePortVal>:

extern u8 DIO_u8WritePortVal(u8 Copy_u8PortIdx,u8 Copy_u8Portval)
{
 6b4:	df 93       	push	r29
 6b6:	cf 93       	push	r28
 6b8:	00 d0       	rcall	.+0      	; 0x6ba <DIO_u8WritePortVal+0x6>
 6ba:	0f 92       	push	r0
 6bc:	cd b7       	in	r28, 0x3d	; 61
 6be:	de b7       	in	r29, 0x3e	; 62
 6c0:	8a 83       	std	Y+2, r24	; 0x02
 6c2:	6b 83       	std	Y+3, r22	; 0x03
     	u8 Local_u8CheckPortR=ok ;
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
 6c8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ca:	84 30       	cpi	r24, 0x04	; 4
 6cc:	70 f4       	brcc	.+28     	; 0x6ea <DIO_u8WritePortVal+0x36>
		{

		*DIO_u8Ports[Copy_u8PortIdx]= Copy_u8Portval;
 6ce:	8a 81       	ldd	r24, Y+2	; 0x02
 6d0:	88 2f       	mov	r24, r24
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	fc 01       	movw	r30, r24
 6da:	e4 59       	subi	r30, 0x94	; 148
 6dc:	ff 4f       	sbci	r31, 0xFF	; 255
 6de:	01 90       	ld	r0, Z+
 6e0:	f0 81       	ld	r31, Z
 6e2:	e0 2d       	mov	r30, r0
 6e4:	8b 81       	ldd	r24, Y+3	; 0x03
 6e6:	80 83       	st	Z, r24
 6e8:	01 c0       	rjmp	.+2      	; 0x6ec <DIO_u8WritePortVal+0x38>
		}
		else
		{
			Local_u8CheckPortR=error ;
 6ea:	19 82       	std	Y+1, r1	; 0x01
		}

		return Local_u8CheckPortR ;
 6ec:	89 81       	ldd	r24, Y+1	; 0x01
}
 6ee:	0f 90       	pop	r0
 6f0:	0f 90       	pop	r0
 6f2:	0f 90       	pop	r0
 6f4:	cf 91       	pop	r28
 6f6:	df 91       	pop	r29
 6f8:	08 95       	ret

000006fa <DIO_u8WritePinDir>:

extern u8 DIO_u8WritePinDir(u8 Copy_u8PinIdx,u8 Copy_u8PinDir)
{
 6fa:	df 93       	push	r29
 6fc:	cf 93       	push	r28
 6fe:	00 d0       	rcall	.+0      	; 0x700 <DIO_u8WritePinDir+0x6>
 700:	00 d0       	rcall	.+0      	; 0x702 <DIO_u8WritePinDir+0x8>
 702:	0f 92       	push	r0
 704:	cd b7       	in	r28, 0x3d	; 61
 706:	de b7       	in	r29, 0x3e	; 62
 708:	8c 83       	std	Y+4, r24	; 0x04
 70a:	6d 83       	std	Y+5, r22	; 0x05
	     u8 Local_u8CheckPinState=ok ;
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	8b 83       	std	Y+3, r24	; 0x03
	     u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
 710:	8c 81       	ldd	r24, Y+4	; 0x04
 712:	86 95       	lsr	r24
 714:	86 95       	lsr	r24
 716:	86 95       	lsr	r24
 718:	8a 83       	std	Y+2, r24	; 0x02
		 u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
 71a:	8c 81       	ldd	r24, Y+4	; 0x04
 71c:	87 70       	andi	r24, 0x07	; 7
 71e:	89 83       	std	Y+1, r24	; 0x01

		    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
 720:	8c 81       	ldd	r24, Y+4	; 0x04
 722:	80 32       	cpi	r24, 0x20	; 32
 724:	10 f0       	brcs	.+4      	; 0x72a <DIO_u8WritePinDir+0x30>
		    {
		    	 Local_u8CheckPinState=error ;
 726:	1b 82       	std	Y+3, r1	; 0x03
 728:	33 c0       	rjmp	.+102    	; 0x790 <DIO_u8WritePinDir+0x96>
		    }
		    else
		    {
		    	assign_bit(* DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin,Copy_u8PinDir);
 72a:	8a 81       	ldd	r24, Y+2	; 0x02
 72c:	88 2f       	mov	r24, r24
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	fc 01       	movw	r30, r24
 736:	ec 58       	subi	r30, 0x8C	; 140
 738:	ff 4f       	sbci	r31, 0xFF	; 255
 73a:	a0 81       	ld	r26, Z
 73c:	b1 81       	ldd	r27, Z+1	; 0x01
 73e:	89 81       	ldd	r24, Y+1	; 0x01
 740:	28 2f       	mov	r18, r24
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	02 c0       	rjmp	.+4      	; 0x74e <DIO_u8WritePinDir+0x54>
 74a:	88 0f       	add	r24, r24
 74c:	99 1f       	adc	r25, r25
 74e:	2a 95       	dec	r18
 750:	e2 f7       	brpl	.-8      	; 0x74a <DIO_u8WritePinDir+0x50>
 752:	28 2f       	mov	r18, r24
 754:	20 95       	com	r18
 756:	8a 81       	ldd	r24, Y+2	; 0x02
 758:	88 2f       	mov	r24, r24
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	88 0f       	add	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	fc 01       	movw	r30, r24
 762:	ec 58       	subi	r30, 0x8C	; 140
 764:	ff 4f       	sbci	r31, 0xFF	; 255
 766:	01 90       	ld	r0, Z+
 768:	f0 81       	ld	r31, Z
 76a:	e0 2d       	mov	r30, r0
 76c:	80 81       	ld	r24, Z
 76e:	42 2f       	mov	r20, r18
 770:	48 23       	and	r20, r24
 772:	8d 81       	ldd	r24, Y+5	; 0x05
 774:	28 2f       	mov	r18, r24
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	89 81       	ldd	r24, Y+1	; 0x01
 77a:	88 2f       	mov	r24, r24
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	b9 01       	movw	r22, r18
 780:	02 c0       	rjmp	.+4      	; 0x786 <DIO_u8WritePinDir+0x8c>
 782:	66 0f       	add	r22, r22
 784:	77 1f       	adc	r23, r23
 786:	8a 95       	dec	r24
 788:	e2 f7       	brpl	.-8      	; 0x782 <DIO_u8WritePinDir+0x88>
 78a:	cb 01       	movw	r24, r22
 78c:	84 2b       	or	r24, r20
 78e:	8c 93       	st	X, r24
		    }

	     return  Local_u8CheckPinState ;
 790:	8b 81       	ldd	r24, Y+3	; 0x03
}
 792:	0f 90       	pop	r0
 794:	0f 90       	pop	r0
 796:	0f 90       	pop	r0
 798:	0f 90       	pop	r0
 79a:	0f 90       	pop	r0
 79c:	cf 91       	pop	r28
 79e:	df 91       	pop	r29
 7a0:	08 95       	ret

000007a2 <DIO_u8WritePortDir>:

extern u8 DIO_u8WritePortDir(u8 Copy_u8PortIdx,u8 Copy_u8PortDir)
{
 7a2:	df 93       	push	r29
 7a4:	cf 93       	push	r28
 7a6:	00 d0       	rcall	.+0      	; 0x7a8 <DIO_u8WritePortDir+0x6>
 7a8:	0f 92       	push	r0
 7aa:	cd b7       	in	r28, 0x3d	; 61
 7ac:	de b7       	in	r29, 0x3e	; 62
 7ae:	8a 83       	std	Y+2, r24	; 0x02
 7b0:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8CheckPortR=ok ;
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	89 83       	std	Y+1, r24	; 0x01

			if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
 7b6:	8a 81       	ldd	r24, Y+2	; 0x02
 7b8:	84 30       	cpi	r24, 0x04	; 4
 7ba:	70 f4       	brcc	.+28     	; 0x7d8 <DIO_u8WritePortDir+0x36>
			{

			*DIO_u8Ddrs[Copy_u8PortIdx]= Copy_u8PortDir;
 7bc:	8a 81       	ldd	r24, Y+2	; 0x02
 7be:	88 2f       	mov	r24, r24
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	88 0f       	add	r24, r24
 7c4:	99 1f       	adc	r25, r25
 7c6:	fc 01       	movw	r30, r24
 7c8:	ec 58       	subi	r30, 0x8C	; 140
 7ca:	ff 4f       	sbci	r31, 0xFF	; 255
 7cc:	01 90       	ld	r0, Z+
 7ce:	f0 81       	ld	r31, Z
 7d0:	e0 2d       	mov	r30, r0
 7d2:	8b 81       	ldd	r24, Y+3	; 0x03
 7d4:	80 83       	st	Z, r24
 7d6:	01 c0       	rjmp	.+2      	; 0x7da <DIO_u8WritePortDir+0x38>
			}
			else
			{
				Local_u8CheckPortR=error ;
 7d8:	19 82       	std	Y+1, r1	; 0x01
			}

			return Local_u8CheckPortR ;
 7da:	89 81       	ldd	r24, Y+1	; 0x01
}
 7dc:	0f 90       	pop	r0
 7de:	0f 90       	pop	r0
 7e0:	0f 90       	pop	r0
 7e2:	cf 91       	pop	r28
 7e4:	df 91       	pop	r29
 7e6:	08 95       	ret

000007e8 <DIO_u8ReadPinDir>:

extern u8 DIO_u8ReadPinDir(u8 Copy_u8PinIdx,u8 * Copy_u8PtrToDir)
{
 7e8:	df 93       	push	r29
 7ea:	cf 93       	push	r28
 7ec:	00 d0       	rcall	.+0      	; 0x7ee <DIO_u8ReadPinDir+0x6>
 7ee:	00 d0       	rcall	.+0      	; 0x7f0 <DIO_u8ReadPinDir+0x8>
 7f0:	00 d0       	rcall	.+0      	; 0x7f2 <DIO_u8ReadPinDir+0xa>
 7f2:	cd b7       	in	r28, 0x3d	; 61
 7f4:	de b7       	in	r29, 0x3e	; 62
 7f6:	8c 83       	std	Y+4, r24	; 0x04
 7f8:	7e 83       	std	Y+6, r23	; 0x06
 7fa:	6d 83       	std	Y+5, r22	; 0x05
	 u8 Local_u8CheckPinState=ok ;
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	8b 83       	std	Y+3, r24	; 0x03
	 u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS;
 800:	8c 81       	ldd	r24, Y+4	; 0x04
 802:	86 95       	lsr	r24
 804:	86 95       	lsr	r24
 806:	86 95       	lsr	r24
 808:	8a 83       	std	Y+2, r24	; 0x02
	 u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
 80a:	8c 81       	ldd	r24, Y+4	; 0x04
 80c:	87 70       	andi	r24, 0x07	; 7
 80e:	89 83       	std	Y+1, r24	; 0x01

	    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
 810:	8c 81       	ldd	r24, Y+4	; 0x04
 812:	80 32       	cpi	r24, 0x20	; 32
 814:	10 f0       	brcs	.+4      	; 0x81a <DIO_u8ReadPinDir+0x32>
	    {
	    	 Local_u8CheckPinState=error ;
 816:	1b 82       	std	Y+3, r1	; 0x03
 818:	28 c0       	rjmp	.+80     	; 0x86a <__stack+0xb>
	    }
	    else
	    {
	    	* Copy_u8PtrToDir=get_bit(*DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin);
 81a:	8a 81       	ldd	r24, Y+2	; 0x02
 81c:	88 2f       	mov	r24, r24
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	88 0f       	add	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	fc 01       	movw	r30, r24
 826:	ec 58       	subi	r30, 0x8C	; 140
 828:	ff 4f       	sbci	r31, 0xFF	; 255
 82a:	01 90       	ld	r0, Z+
 82c:	f0 81       	ld	r31, Z
 82e:	e0 2d       	mov	r30, r0
 830:	80 81       	ld	r24, Z
 832:	48 2f       	mov	r20, r24
 834:	50 e0       	ldi	r21, 0x00	; 0
 836:	89 81       	ldd	r24, Y+1	; 0x01
 838:	28 2f       	mov	r18, r24
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	02 c0       	rjmp	.+4      	; 0x846 <DIO_u8ReadPinDir+0x5e>
 842:	88 0f       	add	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	2a 95       	dec	r18
 848:	e2 f7       	brpl	.-8      	; 0x842 <DIO_u8ReadPinDir+0x5a>
 84a:	9a 01       	movw	r18, r20
 84c:	28 23       	and	r18, r24
 84e:	39 23       	and	r19, r25
 850:	89 81       	ldd	r24, Y+1	; 0x01
 852:	88 2f       	mov	r24, r24
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	a9 01       	movw	r20, r18
 858:	02 c0       	rjmp	.+4      	; 0x85e <DIO_u8ReadPinDir+0x76>
 85a:	55 95       	asr	r21
 85c:	47 95       	ror	r20
 85e:	8a 95       	dec	r24
 860:	e2 f7       	brpl	.-8      	; 0x85a <DIO_u8ReadPinDir+0x72>
 862:	ca 01       	movw	r24, r20
 864:	ed 81       	ldd	r30, Y+5	; 0x05
 866:	fe 81       	ldd	r31, Y+6	; 0x06
 868:	80 83       	st	Z, r24
	    }
	return  Local_u8CheckPinState ;
 86a:	8b 81       	ldd	r24, Y+3	; 0x03
}
 86c:	26 96       	adiw	r28, 0x06	; 6
 86e:	0f b6       	in	r0, 0x3f	; 63
 870:	f8 94       	cli
 872:	de bf       	out	0x3e, r29	; 62
 874:	0f be       	out	0x3f, r0	; 63
 876:	cd bf       	out	0x3d, r28	; 61
 878:	cf 91       	pop	r28
 87a:	df 91       	pop	r29
 87c:	08 95       	ret

0000087e <DIO_u8ReadPortDir>:

extern u8 DIO_u8ReadPortDir(u8 Copy_u8PortIdx,u8 *Copy_u8PtrToDir)
{
 87e:	df 93       	push	r29
 880:	cf 93       	push	r28
 882:	00 d0       	rcall	.+0      	; 0x884 <DIO_u8ReadPortDir+0x6>
 884:	00 d0       	rcall	.+0      	; 0x886 <DIO_u8ReadPortDir+0x8>
 886:	cd b7       	in	r28, 0x3d	; 61
 888:	de b7       	in	r29, 0x3e	; 62
 88a:	8a 83       	std	Y+2, r24	; 0x02
 88c:	7c 83       	std	Y+4, r23	; 0x04
 88e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CheckPortR=ok ;
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
 894:	8a 81       	ldd	r24, Y+2	; 0x02
 896:	84 30       	cpi	r24, 0x04	; 4
 898:	80 f4       	brcc	.+32     	; 0x8ba <DIO_u8ReadPortDir+0x3c>
		{

		* Copy_u8PtrToDir=*DIO_u8Pins[Copy_u8PortIdx] ;
 89a:	8a 81       	ldd	r24, Y+2	; 0x02
 89c:	88 2f       	mov	r24, r24
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	88 0f       	add	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	fc 01       	movw	r30, r24
 8a6:	e4 58       	subi	r30, 0x84	; 132
 8a8:	ff 4f       	sbci	r31, 0xFF	; 255
 8aa:	01 90       	ld	r0, Z+
 8ac:	f0 81       	ld	r31, Z
 8ae:	e0 2d       	mov	r30, r0
 8b0:	80 81       	ld	r24, Z
 8b2:	eb 81       	ldd	r30, Y+3	; 0x03
 8b4:	fc 81       	ldd	r31, Y+4	; 0x04
 8b6:	80 83       	st	Z, r24
 8b8:	01 c0       	rjmp	.+2      	; 0x8bc <DIO_u8ReadPortDir+0x3e>
		}
		else
		{
			Local_u8CheckPortR=error ;
 8ba:	19 82       	std	Y+1, r1	; 0x01
		}

		return Local_u8CheckPortR ;
 8bc:	89 81       	ldd	r24, Y+1	; 0x01
}
 8be:	0f 90       	pop	r0
 8c0:	0f 90       	pop	r0
 8c2:	0f 90       	pop	r0
 8c4:	0f 90       	pop	r0
 8c6:	cf 91       	pop	r28
 8c8:	df 91       	pop	r29
 8ca:	08 95       	ret

000008cc <TIM0_voidInit>:
u32 TIM0_CMCOUNT=TIM0_u8LOW;
u32 TIM0_u8TIME_OVFLW ;
u32 TIM0_u8TIME_OCOMP ;
u8 TIM0_u8TimeFlag =TIM0_u8LOW ;
void TIM0_voidInit(void)
{
 8cc:	df 93       	push	r29
 8ce:	cf 93       	push	r28
 8d0:	cd b7       	in	r28, 0x3d	; 61
 8d2:	de b7       	in	r29, 0x3e	; 62
	TCCR0|=TIM0_u8TCCR0INIT;
 8d4:	a3 e5       	ldi	r26, 0x53	; 83
 8d6:	b0 e0       	ldi	r27, 0x00	; 0
 8d8:	e3 e5       	ldi	r30, 0x53	; 83
 8da:	f0 e0       	ldi	r31, 0x00	; 0
 8dc:	80 81       	ld	r24, Z
 8de:	83 63       	ori	r24, 0x33	; 51
 8e0:	8c 93       	st	X, r24
	TIMSK|=TIM0_u8TIMSKINIT;
 8e2:	a9 e5       	ldi	r26, 0x59	; 89
 8e4:	b0 e0       	ldi	r27, 0x00	; 0
 8e6:	e9 e5       	ldi	r30, 0x59	; 89
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	80 81       	ld	r24, Z
 8ec:	83 60       	ori	r24, 0x03	; 3
 8ee:	8c 93       	st	X, r24

	TIM0_u8TIME_OVFLW = ((256*TIM0_u8PRESCLER)/FCPU) ;
 8f0:	84 e0       	ldi	r24, 0x04	; 4
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	90 93 8a 00 	sts	0x008A, r25
 8f8:	80 93 89 00 	sts	0x0089, r24

}
 8fc:	cf 91       	pop	r28
 8fe:	df 91       	pop	r29
 900:	08 95       	ret

00000902 <TIM0_u8SetTime>:


void TIM0_u8SetTime(u32 Copy_u8TimVal)
{
 902:	df 93       	push	r29
 904:	cf 93       	push	r28
 906:	00 d0       	rcall	.+0      	; 0x908 <TIM0_u8SetTime+0x6>
 908:	00 d0       	rcall	.+0      	; 0x90a <TIM0_u8SetTime+0x8>
 90a:	cd b7       	in	r28, 0x3d	; 61
 90c:	de b7       	in	r29, 0x3e	; 62
 90e:	9c 83       	std	Y+4, r25	; 0x04
 910:	8b 83       	std	Y+3, r24	; 0x03

	u32 Local_u8Time;

#if(TIM0_u8WFG==TIM0_u8NRMALMODE)
   Local_u8Time= (TIM0_OFCOUNT *TIM0_u8TIME_OVFLW ) ;
 912:	20 91 84 00 	lds	r18, 0x0084
 916:	30 91 85 00 	lds	r19, 0x0085
 91a:	80 91 89 00 	lds	r24, 0x0089
 91e:	90 91 8a 00 	lds	r25, 0x008A
 922:	ac 01       	movw	r20, r24
 924:	24 9f       	mul	r18, r20
 926:	c0 01       	movw	r24, r0
 928:	25 9f       	mul	r18, r21
 92a:	90 0d       	add	r25, r0
 92c:	34 9f       	mul	r19, r20
 92e:	90 0d       	add	r25, r0
 930:	11 24       	eor	r1, r1
 932:	9a 83       	std	Y+2, r25	; 0x02
 934:	89 83       	std	Y+1, r24	; 0x01

   if(Local_u8Time>Copy_u8TimVal)
 936:	29 81       	ldd	r18, Y+1	; 0x01
 938:	3a 81       	ldd	r19, Y+2	; 0x02
 93a:	8b 81       	ldd	r24, Y+3	; 0x03
 93c:	9c 81       	ldd	r25, Y+4	; 0x04
 93e:	82 17       	cp	r24, r18
 940:	93 07       	cpc	r25, r19
 942:	18 f4       	brcc	.+6      	; 0x94a <TIM0_u8SetTime+0x48>
   {
	   TIM0_u8TimeFlag=TIM0_u8HIGH ;
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	80 93 88 00 	sts	0x0088, r24
     {

     }
#endif
return  ;
}
 94a:	0f 90       	pop	r0
 94c:	0f 90       	pop	r0
 94e:	0f 90       	pop	r0
 950:	0f 90       	pop	r0
 952:	cf 91       	pop	r28
 954:	df 91       	pop	r29
 956:	08 95       	ret

00000958 <TIM0_voiResetTimer>:
void TIM0_voiResetTimer(void)
{
 958:	df 93       	push	r29
 95a:	cf 93       	push	r28
 95c:	cd b7       	in	r28, 0x3d	; 61
 95e:	de b7       	in	r29, 0x3e	; 62
	TIM0_OFCOUNT=0 ;
 960:	10 92 85 00 	sts	0x0085, r1
 964:	10 92 84 00 	sts	0x0084, r1
	TIM0_CMCOUNT=0;
 968:	10 92 87 00 	sts	0x0087, r1
 96c:	10 92 86 00 	sts	0x0086, r1
}
 970:	cf 91       	pop	r28
 972:	df 91       	pop	r29
 974:	08 95       	ret

00000976 <TIM0_voiResetTimFlg>:
void TIM0_voiResetTimFlg(void)
{
 976:	df 93       	push	r29
 978:	cf 93       	push	r28
 97a:	cd b7       	in	r28, 0x3d	; 61
 97c:	de b7       	in	r29, 0x3e	; 62
	TIM0_u8TimeFlag=TIM0_u8LOW ;
 97e:	10 92 88 00 	sts	0x0088, r1
}
 982:	cf 91       	pop	r28
 984:	df 91       	pop	r29
 986:	08 95       	ret

00000988 <TIM0_u8TimerEnabl>:
void TIM0_u8TimerEnabl(void)
{
 988:	df 93       	push	r29
 98a:	cf 93       	push	r28
 98c:	cd b7       	in	r28, 0x3d	; 61
 98e:	de b7       	in	r29, 0x3e	; 62
	TCCR0|=TIM0_u8TCCR0INIT;
 990:	a3 e5       	ldi	r26, 0x53	; 83
 992:	b0 e0       	ldi	r27, 0x00	; 0
 994:	e3 e5       	ldi	r30, 0x53	; 83
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	80 81       	ld	r24, Z
 99a:	83 63       	ori	r24, 0x33	; 51
 99c:	8c 93       	st	X, r24
}
 99e:	cf 91       	pop	r28
 9a0:	df 91       	pop	r29
 9a2:	08 95       	ret

000009a4 <TIM0_u8TimerDisabl>:
void TIM0_u8TimerDisabl(void)
{
 9a4:	df 93       	push	r29
 9a6:	cf 93       	push	r28
 9a8:	cd b7       	in	r28, 0x3d	; 61
 9aa:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &=TIM0_u8STOPTIMER;
 9ac:	a3 e5       	ldi	r26, 0x53	; 83
 9ae:	b0 e0       	ldi	r27, 0x00	; 0
 9b0:	e3 e5       	ldi	r30, 0x53	; 83
 9b2:	f0 e0       	ldi	r31, 0x00	; 0
 9b4:	80 81       	ld	r24, Z
 9b6:	88 7f       	andi	r24, 0xF8	; 248
 9b8:	8c 93       	st	X, r24
}
 9ba:	cf 91       	pop	r28
 9bc:	df 91       	pop	r29
 9be:	08 95       	ret

000009c0 <TIM0_u8GetTimFlg>:

u8 TIM0_u8GetTimFlg(void)
{
 9c0:	df 93       	push	r29
 9c2:	cf 93       	push	r28
 9c4:	cd b7       	in	r28, 0x3d	; 61
 9c6:	de b7       	in	r29, 0x3e	; 62
	return TIM0_u8TimeFlag;
 9c8:	80 91 88 00 	lds	r24, 0x0088
}
 9cc:	cf 91       	pop	r28
 9ce:	df 91       	pop	r29
 9d0:	08 95       	ret

000009d2 <TIM0_voidSetComp>:
void TIM0_voidSetComp(u8 Copy_u8CompVal)
{
 9d2:	df 93       	push	r29
 9d4:	cf 93       	push	r28
 9d6:	0f 92       	push	r0
 9d8:	cd b7       	in	r28, 0x3d	; 61
 9da:	de b7       	in	r29, 0x3e	; 62
 9dc:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8CompVal;
 9de:	ec e5       	ldi	r30, 0x5C	; 92
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	89 81       	ldd	r24, Y+1	; 0x01
 9e4:	80 83       	st	Z, r24
}
 9e6:	0f 90       	pop	r0
 9e8:	cf 91       	pop	r28
 9ea:	df 91       	pop	r29
 9ec:	08 95       	ret

000009ee <__vector_11>:

ISR(__vector_11)
{
 9ee:	1f 92       	push	r1
 9f0:	0f 92       	push	r0
 9f2:	0f b6       	in	r0, 0x3f	; 63
 9f4:	0f 92       	push	r0
 9f6:	11 24       	eor	r1, r1
 9f8:	8f 93       	push	r24
 9fa:	9f 93       	push	r25
 9fc:	df 93       	push	r29
 9fe:	cf 93       	push	r28
 a00:	cd b7       	in	r28, 0x3d	; 61
 a02:	de b7       	in	r29, 0x3e	; 62
	 TIM0_OFCOUNT++ ;
 a04:	80 91 84 00 	lds	r24, 0x0084
 a08:	90 91 85 00 	lds	r25, 0x0085
 a0c:	01 96       	adiw	r24, 0x01	; 1
 a0e:	90 93 85 00 	sts	0x0085, r25
 a12:	80 93 84 00 	sts	0x0084, r24
}
 a16:	cf 91       	pop	r28
 a18:	df 91       	pop	r29
 a1a:	9f 91       	pop	r25
 a1c:	8f 91       	pop	r24
 a1e:	0f 90       	pop	r0
 a20:	0f be       	out	0x3f, r0	; 63
 a22:	0f 90       	pop	r0
 a24:	1f 90       	pop	r1
 a26:	18 95       	reti

00000a28 <__vector_10>:
ISR(__vector_10)
{
 a28:	1f 92       	push	r1
 a2a:	0f 92       	push	r0
 a2c:	0f b6       	in	r0, 0x3f	; 63
 a2e:	0f 92       	push	r0
 a30:	11 24       	eor	r1, r1
 a32:	8f 93       	push	r24
 a34:	9f 93       	push	r25
 a36:	df 93       	push	r29
 a38:	cf 93       	push	r28
 a3a:	cd b7       	in	r28, 0x3d	; 61
 a3c:	de b7       	in	r29, 0x3e	; 62
	 TIM0_CMCOUNT++ ;
 a3e:	80 91 86 00 	lds	r24, 0x0086
 a42:	90 91 87 00 	lds	r25, 0x0087
 a46:	01 96       	adiw	r24, 0x01	; 1
 a48:	90 93 87 00 	sts	0x0087, r25
 a4c:	80 93 86 00 	sts	0x0086, r24
}
 a50:	cf 91       	pop	r28
 a52:	df 91       	pop	r29
 a54:	9f 91       	pop	r25
 a56:	8f 91       	pop	r24
 a58:	0f 90       	pop	r0
 a5a:	0f be       	out	0x3f, r0	; 63
 a5c:	0f 90       	pop	r0
 a5e:	1f 90       	pop	r1
 a60:	18 95       	reti

00000a62 <main>:
#include "TIM0_interface.h"
#include "CLCD_interface.h"
#include "GLOB_INT.h"

void main (void)
{
 a62:	df 93       	push	r29
 a64:	cf 93       	push	r28
 a66:	00 d0       	rcall	.+0      	; 0xa68 <main+0x6>
 a68:	00 d0       	rcall	.+0      	; 0xa6a <main+0x8>
 a6a:	cd b7       	in	r28, 0x3d	; 61
 a6c:	de b7       	in	r29, 0x3e	; 62
	u8 tog=0 ,test ,flag=0 ,x ;
 a6e:	1c 82       	std	Y+4, r1	; 0x04
 a70:	1a 82       	std	Y+2, r1	; 0x02

	DIO_voidInit();
 a72:	0e 94 48 02 	call	0x490	; 0x490 <DIO_voidInit>
	TIM0_voidInit();
 a76:	0e 94 66 04 	call	0x8cc	; 0x8cc <TIM0_voidInit>
	//CLC_voidInit();

   SEI();
 a7a:	78 94       	sei
//		TIM0_voiResetTimer();
//		flag^=1;
//	}
//  DIO_u8WritePinVal(7,1);
//  if(x==1)
	  DIO_u8WritePinVal(28,1);
 a7c:	8c e1       	ldi	r24, 0x1C	; 28
 a7e:	61 e0       	ldi	r22, 0x01	; 1
 a80:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>
	  DIO_u8WritePinVal(28,0);
 a84:	8c e1       	ldi	r24, 0x1C	; 28
 a86:	60 e0       	ldi	r22, 0x00	; 0
 a88:	0e 94 df 02 	call	0x5be	; 0x5be <DIO_u8WritePinVal>
 a8c:	f7 cf       	rjmp	.-18     	; 0xa7c <main+0x1a>

00000a8e <_exit>:
 a8e:	f8 94       	cli

00000a90 <__stop_program>:
 a90:	ff cf       	rjmp	.-2      	; 0xa90 <__stop_program>
