
OHM-VOLTmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016c  00800060  000020b0  00002144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  008001cc  008001cc  000022b0  2**0
                  ALLOC
  3 .stab         00001b90  00000000  00000000  000022b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ba5  00000000  00000000  00003e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000049e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00004b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00004cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  00006c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  00007cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  00008e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  00009172  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009a68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3e       	cpi	r26, 0xED	; 237
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <main>
      8a:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e9       	ldi	r26, 0x98	; 152
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 e9       	ldi	r24, 0x98	; 152
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e9       	ldi	r22, 0x98	; 152
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__fixsfsi+0x80>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__fixsfsi+0x80>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__fixsfsi+0x8a>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__fixsfsi+0x94>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__fixsfsi+0x80>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__fixsfsi+0x8a>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__fixsfsi+0x94>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__fixsfsi+0x9c>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__fixsfsi+0x9c>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__fixsfsi+0x9c>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__fixsfsi+0x9c>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 06 10 	jmp	0x200c	; 0x200c <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e0 56       	subi	r30, 0x60	; 96
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <ADC_voidInit>:
#include "ADC_config.h"
#include "DIO_utilites.h"

static const u8 CHKERR[2]={error,ok};
extern void ADC_voidInit(void)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
	ADC_ADMUX = ADC_ADMUX_VAL;
     d76:	e7 e2       	ldi	r30, 0x27	; 39
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	10 82       	st	Z, r1
	ADC_ADCSRA= ADC_ADCSRA_VAL ;
     d7c:	e6 e2       	ldi	r30, 0x26	; 38
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	87 e0       	ldi	r24, 0x07	; 7
     d82:	80 83       	st	Z, r24
	ADC_ADCH=ADC_ADCH_VAL;
     d84:	e5 e2       	ldi	r30, 0x25	; 37
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	10 82       	st	Z, r1
	ADC_ADCL=ADC_ADCL_VAL;
     d8a:	e4 e2       	ldi	r30, 0x24	; 36
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	10 82       	st	Z, r1
	ADC_SFIOR|=ADC_SFIOR_VAL  ;
     d90:	a0 e5       	ldi	r26, 0x50	; 80
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e0 e5       	ldi	r30, 0x50	; 80
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	8c 93       	st	X, r24

}
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <ADC_voidEnable>:

extern void ADC_voidEnable(void)
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
	ADC_ADCSRA|=(1<<ADEN);
     daa:	a6 e2       	ldi	r26, 0x26	; 38
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e6 e2       	ldi	r30, 0x26	; 38
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	80 68       	ori	r24, 0x80	; 128
     db6:	8c 93       	st	X, r24
}
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <ADC_voidDisable>:

extern void ADC_voidDisable(void)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
	ADC_ADCSRA&=~(1<<ADEN);
     dc6:	a6 e2       	ldi	r26, 0x26	; 38
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e6 e2       	ldi	r30, 0x26	; 38
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8f 77       	andi	r24, 0x7F	; 127
     dd2:	8c 93       	st	X, r24
}
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <ADC_u8ReadCh_SSht>:

extern u8 ADC_u8ReadCh_SSht(u8 Copy_ChIdx , u16 * Copy_PtrToVal)
{
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	00 d0       	rcall	.+0      	; 0xde0 <ADC_u8ReadCh_SSht+0x6>
     de0:	00 d0       	rcall	.+0      	; 0xde2 <ADC_u8ReadCh_SSht+0x8>
     de2:	0f 92       	push	r0
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	7b 83       	std	Y+3, r23	; 0x03
     dec:	6a 83       	std	Y+2, r22	; 0x02

	*Copy_PtrToVal=0 ;
     dee:	ea 81       	ldd	r30, Y+2	; 0x02
     df0:	fb 81       	ldd	r31, Y+3	; 0x03
     df2:	11 82       	std	Z+1, r1	; 0x01
     df4:	10 82       	st	Z, r1

	ADC_ADMUX|=(0x1F & Copy_ChIdx) ;
     df6:	a7 e2       	ldi	r26, 0x27	; 39
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e7 e2       	ldi	r30, 0x27	; 39
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	98 2f       	mov	r25, r24
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	8f 71       	andi	r24, 0x1F	; 31
     e06:	89 2b       	or	r24, r25
     e08:	8c 93       	st	X, r24
	ADC_ADCSRA|=(1<<ADSC);
     e0a:	a6 e2       	ldi	r26, 0x26	; 38
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e6 e2       	ldi	r30, 0x26	; 38
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	80 64       	ori	r24, 0x40	; 64
     e16:	8c 93       	st	X, r24

	while(ADC_ADCSRA&(1<<ADSC)) ;
     e18:	e6 e2       	ldi	r30, 0x26	; 38
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	88 2f       	mov	r24, r24
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	80 74       	andi	r24, 0x40	; 64
     e24:	90 70       	andi	r25, 0x00	; 0
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	b9 f7       	brne	.-18     	; 0xe18 <ADC_u8ReadCh_SSht+0x3e>
		}
	break ;
case ADC_HIGHRES :
		if(ADC_ADLAR_INITVAL==0)
		{
			* Copy_PtrToVal = ADC_ADCL  ;
     e2a:	e4 e2       	ldi	r30, 0x24	; 36
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	88 2f       	mov	r24, r24
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	ea 81       	ldd	r30, Y+2	; 0x02
     e36:	fb 81       	ldd	r31, Y+3	; 0x03
     e38:	91 83       	std	Z+1, r25	; 0x01
     e3a:	80 83       	st	Z, r24
			* Copy_PtrToVal |= ( ADC_ADCH<<8) ;
     e3c:	ea 81       	ldd	r30, Y+2	; 0x02
     e3e:	fb 81       	ldd	r31, Y+3	; 0x03
     e40:	20 81       	ld	r18, Z
     e42:	31 81       	ldd	r19, Z+1	; 0x01
     e44:	e5 e2       	ldi	r30, 0x25	; 37
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	88 2f       	mov	r24, r24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	98 2f       	mov	r25, r24
     e50:	88 27       	eor	r24, r24
     e52:	82 2b       	or	r24, r18
     e54:	93 2b       	or	r25, r19
     e56:	ea 81       	ldd	r30, Y+2	; 0x02
     e58:	fb 81       	ldd	r31, Y+3	; 0x03
     e5a:	91 83       	std	Z+1, r25	; 0x01
     e5c:	80 83       	st	Z, r24
	break ;

default :
	break ;
}
return CHKERR[Copy_ChIdx < 8];
     e5e:	1d 82       	std	Y+5, r1	; 0x05
     e60:	1c 82       	std	Y+4, r1	; 0x04
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	88 30       	cpi	r24, 0x08	; 8
     e66:	20 f4       	brcc	.+8      	; 0xe70 <ADC_u8ReadCh_SSht+0x96>
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	9d 83       	std	Y+5, r25	; 0x05
     e6e:	8c 83       	std	Y+4, r24	; 0x04
     e70:	ec 81       	ldd	r30, Y+4	; 0x04
     e72:	fd 81       	ldd	r31, Y+5	; 0x05
     e74:	ee 55       	subi	r30, 0x5E	; 94
     e76:	fe 4f       	sbci	r31, 0xFE	; 254
     e78:	80 81       	ld	r24, Z
}
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <ADC_u8ReadCh_MSht>:

extern u8 ADC_u8ReadCh_MSht(u8 Copy_ChIdx , u16 * Copy_PtrToVal)
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	2a 97       	sbiw	r28, 0x0a	; 10
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	8e 83       	std	Y+6, r24	; 0x06
     ea0:	78 87       	std	Y+8, r23	; 0x08
     ea2:	6f 83       	std	Y+7, r22	; 0x07

	u8 local_u8ount=0;
     ea4:	1d 82       	std	Y+5, r1	; 0x05
	u16 local_u16avg=0 ;
     ea6:	1c 82       	std	Y+4, r1	; 0x04
     ea8:	1b 82       	std	Y+3, r1	; 0x03
	u16 local_u16sum=0 ;
     eaa:	1a 82       	std	Y+2, r1	; 0x02
     eac:	19 82       	std	Y+1, r1	; 0x01
	 * Copy_PtrToVal=0;
     eae:	ef 81       	ldd	r30, Y+7	; 0x07
     eb0:	f8 85       	ldd	r31, Y+8	; 0x08
     eb2:	11 82       	std	Z+1, r1	; 0x01
     eb4:	10 82       	st	Z, r1
	 ADC_ADMUX|=(0x1F & Copy_ChIdx) ;
     eb6:	a7 e2       	ldi	r26, 0x27	; 39
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e7 e2       	ldi	r30, 0x27	; 39
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	98 2f       	mov	r25, r24
     ec2:	8e 81       	ldd	r24, Y+6	; 0x06
     ec4:	8f 71       	andi	r24, 0x1F	; 31
     ec6:	89 2b       	or	r24, r25
     ec8:	8c 93       	st	X, r24
for(local_u8ount=0 ;local_u8ount<8;local_u8ount++)
     eca:	1d 82       	std	Y+5, r1	; 0x05
     ecc:	30 c0       	rjmp	.+96     	; 0xf2e <ADC_u8ReadCh_MSht+0xa4>
{

	ADC_ADCSRA|=(1<<ADSC);
     ece:	a6 e2       	ldi	r26, 0x26	; 38
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e6 e2       	ldi	r30, 0x26	; 38
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	80 64       	ori	r24, 0x40	; 64
     eda:	8c 93       	st	X, r24

	while(ADC_ADCSRA&(1<<ADSC)) ;
     edc:	e6 e2       	ldi	r30, 0x26	; 38
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	88 2f       	mov	r24, r24
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	80 74       	andi	r24, 0x40	; 64
     ee8:	90 70       	andi	r25, 0x00	; 0
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	b9 f7       	brne	.-18     	; 0xedc <ADC_u8ReadCh_MSht+0x52>
		}
	break ;
case ADC_HIGHRES :
		if(ADC_ADLAR_INITVAL==0)
		{
			local_u16avg = ADC_ADCL ;
     eee:	e4 e2       	ldi	r30, 0x24	; 36
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9c 83       	std	Y+4, r25	; 0x04
     efa:	8b 83       	std	Y+3, r24	; 0x03
			local_u16avg|= ( ADC_ADCH <<8) ;
     efc:	e5 e2       	ldi	r30, 0x25	; 37
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	88 2f       	mov	r24, r24
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	98 2f       	mov	r25, r24
     f08:	88 27       	eor	r24, r24
     f0a:	9c 01       	movw	r18, r24
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	9c 81       	ldd	r25, Y+4	; 0x04
     f10:	82 2b       	or	r24, r18
     f12:	93 2b       	or	r25, r19
     f14:	9c 83       	std	Y+4, r25	; 0x04
     f16:	8b 83       	std	Y+3, r24	; 0x03
	break ;

default :
	break ;
}
	local_u16sum+=local_u16avg ;
     f18:	29 81       	ldd	r18, Y+1	; 0x01
     f1a:	3a 81       	ldd	r19, Y+2	; 0x02
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	9c 81       	ldd	r25, Y+4	; 0x04
     f20:	82 0f       	add	r24, r18
     f22:	93 1f       	adc	r25, r19
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	89 83       	std	Y+1, r24	; 0x01
	u8 local_u8ount=0;
	u16 local_u16avg=0 ;
	u16 local_u16sum=0 ;
	 * Copy_PtrToVal=0;
	 ADC_ADMUX|=(0x1F & Copy_ChIdx) ;
for(local_u8ount=0 ;local_u8ount<8;local_u8ount++)
     f28:	8d 81       	ldd	r24, Y+5	; 0x05
     f2a:	8f 5f       	subi	r24, 0xFF	; 255
     f2c:	8d 83       	std	Y+5, r24	; 0x05
     f2e:	8d 81       	ldd	r24, Y+5	; 0x05
     f30:	88 30       	cpi	r24, 0x08	; 8
     f32:	68 f2       	brcs	.-102    	; 0xece <ADC_u8ReadCh_MSht+0x44>
	break ;
}
	local_u16sum+=local_u16avg ;

}
* Copy_PtrToVal =  local_u16sum /8 ;
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	9a 81       	ldd	r25, Y+2	; 0x02
     f38:	96 95       	lsr	r25
     f3a:	87 95       	ror	r24
     f3c:	96 95       	lsr	r25
     f3e:	87 95       	ror	r24
     f40:	96 95       	lsr	r25
     f42:	87 95       	ror	r24
     f44:	ef 81       	ldd	r30, Y+7	; 0x07
     f46:	f8 85       	ldd	r31, Y+8	; 0x08
     f48:	91 83       	std	Z+1, r25	; 0x01
     f4a:	80 83       	st	Z, r24
return CHKERR[Copy_ChIdx < 8];
     f4c:	1a 86       	std	Y+10, r1	; 0x0a
     f4e:	19 86       	std	Y+9, r1	; 0x09
     f50:	8e 81       	ldd	r24, Y+6	; 0x06
     f52:	88 30       	cpi	r24, 0x08	; 8
     f54:	20 f4       	brcc	.+8      	; 0xf5e <ADC_u8ReadCh_MSht+0xd4>
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	9a 87       	std	Y+10, r25	; 0x0a
     f5c:	89 87       	std	Y+9, r24	; 0x09
     f5e:	e9 85       	ldd	r30, Y+9	; 0x09
     f60:	fa 85       	ldd	r31, Y+10	; 0x0a
     f62:	ee 55       	subi	r30, 0x5E	; 94
     f64:	fe 4f       	sbci	r31, 0xFE	; 254
     f66:	80 81       	ld	r24, Z
}
     f68:	2a 96       	adiw	r28, 0x0a	; 10
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <ADC_u8ReadGp>:

extern u8 ADC_u8ReadGp( u8 * Copy_IdxArr, u16 * Copy_PtrToVal)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	27 97       	sbiw	r28, 0x07	; 7
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	9b 83       	std	Y+3, r25	; 0x03
     f90:	8a 83       	std	Y+2, r24	; 0x02
     f92:	7d 83       	std	Y+5, r23	; 0x05
     f94:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_u8count ;
	 * Copy_PtrToVal=0;
     f96:	ec 81       	ldd	r30, Y+4	; 0x04
     f98:	fd 81       	ldd	r31, Y+5	; 0x05
     f9a:	11 82       	std	Z+1, r1	; 0x01
     f9c:	10 82       	st	Z, r1

for(local_u8count=0;local_u8count<4;local_u8count++)
     f9e:	19 82       	std	Y+1, r1	; 0x01
     fa0:	3f c0       	rjmp	.+126    	; 0x1020 <ADC_u8ReadGp+0xa6>
{
		ADC_ADMUX|=(0x1F & Copy_IdxArr[local_u8count]) ;
     fa2:	a7 e2       	ldi	r26, 0x27	; 39
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e7 e2       	ldi	r30, 0x27	; 39
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	9b 81       	ldd	r25, Y+3	; 0x03
     fb8:	fc 01       	movw	r30, r24
     fba:	e2 0f       	add	r30, r18
     fbc:	f3 1f       	adc	r31, r19
     fbe:	80 81       	ld	r24, Z
     fc0:	8f 71       	andi	r24, 0x1F	; 31
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
		ADC_ADCSRA|=(1<<ADSC);
     fc6:	a6 e2       	ldi	r26, 0x26	; 38
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e6 e2       	ldi	r30, 0x26	; 38
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	80 64       	ori	r24, 0x40	; 64
     fd2:	8c 93       	st	X, r24

		while(ADC_ADCSRA&(1<<ADSC)) ;
     fd4:	e6 e2       	ldi	r30, 0x26	; 38
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	88 2f       	mov	r24, r24
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	80 74       	andi	r24, 0x40	; 64
     fe0:	90 70       	andi	r25, 0x00	; 0
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	b9 f7       	brne	.-18     	; 0xfd4 <ADC_u8ReadGp+0x5a>
			}
		break ;
	case ADC_HIGHRES :
			if(ADC_ADLAR_INITVAL==0)
			{
				* Copy_PtrToVal = ADC_ADCL ;
     fe6:	e4 e2       	ldi	r30, 0x24	; 36
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	88 2f       	mov	r24, r24
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	ec 81       	ldd	r30, Y+4	; 0x04
     ff2:	fd 81       	ldd	r31, Y+5	; 0x05
     ff4:	91 83       	std	Z+1, r25	; 0x01
     ff6:	80 83       	st	Z, r24
				* Copy_PtrToVal |= ( ADC_ADCH<<8) ;
     ff8:	ec 81       	ldd	r30, Y+4	; 0x04
     ffa:	fd 81       	ldd	r31, Y+5	; 0x05
     ffc:	20 81       	ld	r18, Z
     ffe:	31 81       	ldd	r19, Z+1	; 0x01
    1000:	e5 e2       	ldi	r30, 0x25	; 37
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	98 2f       	mov	r25, r24
    100c:	88 27       	eor	r24, r24
    100e:	82 2b       	or	r24, r18
    1010:	93 2b       	or	r25, r19
    1012:	ec 81       	ldd	r30, Y+4	; 0x04
    1014:	fd 81       	ldd	r31, Y+5	; 0x05
    1016:	91 83       	std	Z+1, r25	; 0x01
    1018:	80 83       	st	Z, r24
extern u8 ADC_u8ReadGp( u8 * Copy_IdxArr, u16 * Copy_PtrToVal)
{
	u8 local_u8count ;
	 * Copy_PtrToVal=0;

for(local_u8count=0;local_u8count<4;local_u8count++)
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	8f 5f       	subi	r24, 0xFF	; 255
    101e:	89 83       	std	Y+1, r24	; 0x01
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	84 30       	cpi	r24, 0x04	; 4
    1024:	08 f4       	brcc	.+2      	; 0x1028 <ADC_u8ReadGp+0xae>
    1026:	bd cf       	rjmp	.-134    	; 0xfa2 <ADC_u8ReadGp+0x28>

	default :
		break ;
	}
}
	return CHKERR[Copy_IdxArr[0] < 8 && Copy_IdxArr[1] < 8 && Copy_IdxArr[2] < 8 && Copy_IdxArr[3] < 8 ];
    1028:	ea 81       	ldd	r30, Y+2	; 0x02
    102a:	fb 81       	ldd	r31, Y+3	; 0x03
    102c:	80 81       	ld	r24, Z
    102e:	88 30       	cpi	r24, 0x08	; 8
    1030:	d0 f4       	brcc	.+52     	; 0x1066 <ADC_u8ReadGp+0xec>
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	9b 81       	ldd	r25, Y+3	; 0x03
    1036:	fc 01       	movw	r30, r24
    1038:	31 96       	adiw	r30, 0x01	; 1
    103a:	80 81       	ld	r24, Z
    103c:	88 30       	cpi	r24, 0x08	; 8
    103e:	98 f4       	brcc	.+38     	; 0x1066 <ADC_u8ReadGp+0xec>
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	9b 81       	ldd	r25, Y+3	; 0x03
    1044:	fc 01       	movw	r30, r24
    1046:	32 96       	adiw	r30, 0x02	; 2
    1048:	80 81       	ld	r24, Z
    104a:	88 30       	cpi	r24, 0x08	; 8
    104c:	60 f4       	brcc	.+24     	; 0x1066 <ADC_u8ReadGp+0xec>
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	9b 81       	ldd	r25, Y+3	; 0x03
    1052:	fc 01       	movw	r30, r24
    1054:	33 96       	adiw	r30, 0x03	; 3
    1056:	80 81       	ld	r24, Z
    1058:	88 30       	cpi	r24, 0x08	; 8
    105a:	28 f4       	brcc	.+10     	; 0x1066 <ADC_u8ReadGp+0xec>
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	9f 83       	std	Y+7, r25	; 0x07
    1062:	8e 83       	std	Y+6, r24	; 0x06
    1064:	02 c0       	rjmp	.+4      	; 0x106a <ADC_u8ReadGp+0xf0>
    1066:	1f 82       	std	Y+7, r1	; 0x07
    1068:	1e 82       	std	Y+6, r1	; 0x06
    106a:	8e 81       	ldd	r24, Y+6	; 0x06
    106c:	9f 81       	ldd	r25, Y+7	; 0x07
    106e:	fc 01       	movw	r30, r24
    1070:	ee 55       	subi	r30, 0x5E	; 94
    1072:	fe 4f       	sbci	r31, 0xFE	; 254
    1074:	80 81       	ld	r24, Z
}
    1076:	27 96       	adiw	r28, 0x07	; 7
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <CLC_voidInit>:
#include "DIO_utilites.h"
#include "CLCD_private.h"
const u8  CLC_u8DataArr[8]={CLC_u8D0,CLC_u8D1,CLC_u8D2,CLC_u8D3,CLC_u8D4,CLC_u8D5,CLC_u8D6,CLC_u8D7};
const u8 CHKerr[2]={error,ok};
void CLC_voidInit(void)
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	28 97       	sbiw	r28, 0x08	; 8
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61

	DELAY(20);
    109c:	18 86       	std	Y+8, r1	; 0x08
    109e:	1f 82       	std	Y+7, r1	; 0x07
    10a0:	06 c0       	rjmp	.+12     	; 0x10ae <CLC_voidInit+0x26>
    10a2:	00 00       	nop
    10a4:	8f 81       	ldd	r24, Y+7	; 0x07
    10a6:	98 85       	ldd	r25, Y+8	; 0x08
    10a8:	01 96       	adiw	r24, 0x01	; 1
    10aa:	98 87       	std	Y+8, r25	; 0x08
    10ac:	8f 83       	std	Y+7, r24	; 0x07
    10ae:	8f 81       	ldd	r24, Y+7	; 0x07
    10b0:	98 85       	ldd	r25, Y+8	; 0x08
    10b2:	27 e2       	ldi	r18, 0x27	; 39
    10b4:	80 31       	cpi	r24, 0x10	; 16
    10b6:	92 07       	cpc	r25, r18
    10b8:	a0 f3       	brcs	.-24     	; 0x10a2 <CLC_voidInit+0x1a>
	CLCD_u8WriteComand(0b00110000);
    10ba:	80 e3       	ldi	r24, 0x30	; 48
    10bc:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8WriteComand>

	DELAY(5);
    10c0:	1e 82       	std	Y+6, r1	; 0x06
    10c2:	1d 82       	std	Y+5, r1	; 0x05
    10c4:	06 c0       	rjmp	.+12     	; 0x10d2 <CLC_voidInit+0x4a>
    10c6:	00 00       	nop
    10c8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ca:	9e 81       	ldd	r25, Y+6	; 0x06
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	9e 83       	std	Y+6, r25	; 0x06
    10d0:	8d 83       	std	Y+5, r24	; 0x05
    10d2:	8d 81       	ldd	r24, Y+5	; 0x05
    10d4:	9e 81       	ldd	r25, Y+6	; 0x06
    10d6:	29 e0       	ldi	r18, 0x09	; 9
    10d8:	84 3c       	cpi	r24, 0xC4	; 196
    10da:	92 07       	cpc	r25, r18
    10dc:	a0 f3       	brcs	.-24     	; 0x10c6 <CLC_voidInit+0x3e>
	CLCD_u8WriteComand(0b00110000);
    10de:	80 e3       	ldi	r24, 0x30	; 48
    10e0:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8WriteComand>

	DELAY(1);
    10e4:	1c 82       	std	Y+4, r1	; 0x04
    10e6:	1b 82       	std	Y+3, r1	; 0x03
    10e8:	06 c0       	rjmp	.+12     	; 0x10f6 <CLC_voidInit+0x6e>
    10ea:	00 00       	nop
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	9c 83       	std	Y+4, r25	; 0x04
    10f4:	8b 83       	std	Y+3, r24	; 0x03
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	9c 81       	ldd	r25, Y+4	; 0x04
    10fa:	21 e0       	ldi	r18, 0x01	; 1
    10fc:	84 3f       	cpi	r24, 0xF4	; 244
    10fe:	92 07       	cpc	r25, r18
    1100:	a0 f3       	brcs	.-24     	; 0x10ea <CLC_voidInit+0x62>
	CLCD_u8WriteComand(0b00110000);
    1102:	80 e3       	ldi	r24, 0x30	; 48
    1104:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8WriteComand>


	CLCD_u8WriteComand(0b00111000);
    1108:	88 e3       	ldi	r24, 0x38	; 56
    110a:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8WriteComand>


	CLCD_u8WriteComand(0b00000110);
    110e:	86 e0       	ldi	r24, 0x06	; 6
    1110:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8WriteComand>

	CLCD_u8WriteComand(0b00001100);
    1114:	8c e0       	ldi	r24, 0x0C	; 12
    1116:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8WriteComand>

	DELAY(1);
    111a:	1a 82       	std	Y+2, r1	; 0x02
    111c:	19 82       	std	Y+1, r1	; 0x01
    111e:	06 c0       	rjmp	.+12     	; 0x112c <CLC_voidInit+0xa4>
    1120:	00 00       	nop
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	9a 81       	ldd	r25, Y+2	; 0x02
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	9a 83       	std	Y+2, r25	; 0x02
    112a:	89 83       	std	Y+1, r24	; 0x01
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	9a 81       	ldd	r25, Y+2	; 0x02
    1130:	21 e0       	ldi	r18, 0x01	; 1
    1132:	84 3f       	cpi	r24, 0xF4	; 244
    1134:	92 07       	cpc	r25, r18
    1136:	a0 f3       	brcs	.-24     	; 0x1120 <CLC_voidInit+0x98>

	CLCD_u8WriteComand(CLC_u8FUNCSET);
    1138:	8c e3       	ldi	r24, 0x3C	; 60
    113a:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8WriteComand>
}
    113e:	28 96       	adiw	r28, 0x08	; 8
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <CLCD_u8WriteComand>:

extern u8 CLCD_u8WriteComand(u8 Copy_u8Command)
{
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	00 d0       	rcall	.+0      	; 0x1156 <CLCD_u8WriteComand+0x6>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <CLCD_u8WriteComand+0x8>
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	8c 83       	std	Y+4, r24	; 0x04
	u8 local_loopcount ;
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
    115e:	1b 82       	std	Y+3, r1	; 0x03
    1160:	29 c0       	rjmp	.+82     	; 0x11b4 <CLCD_u8WriteComand+0x64>
	{
		DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(Copy_u8Command,local_loopcount));
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	88 2f       	mov	r24, r24
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	fc 01       	movw	r30, r24
    116a:	ec 55       	subi	r30, 0x5C	; 92
    116c:	fe 4f       	sbci	r31, 0xFE	; 254
    116e:	60 81       	ld	r22, Z
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	48 2f       	mov	r20, r24
    1174:	50 e0       	ldi	r21, 0x00	; 0
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <CLCD_u8WriteComand+0x36>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	2a 95       	dec	r18
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <CLCD_u8WriteComand+0x32>
    118a:	9a 01       	movw	r18, r20
    118c:	28 23       	and	r18, r24
    118e:	39 23       	and	r19, r25
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	88 2f       	mov	r24, r24
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	a9 01       	movw	r20, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <CLCD_u8WriteComand+0x4e>
    119a:	55 95       	asr	r21
    119c:	47 95       	ror	r20
    119e:	8a 95       	dec	r24
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <CLCD_u8WriteComand+0x4a>
    11a2:	ca 01       	movw	r24, r20
    11a4:	98 2f       	mov	r25, r24
    11a6:	86 2f       	mov	r24, r22
    11a8:	69 2f       	mov	r22, r25
    11aa:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_u8WritePinVal>
}

extern u8 CLCD_u8WriteComand(u8 Copy_u8Command)
{
	u8 local_loopcount ;
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	8f 5f       	subi	r24, 0xFF	; 255
    11b2:	8b 83       	std	Y+3, r24	; 0x03
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	88 30       	cpi	r24, 0x08	; 8
    11b8:	a0 f2       	brcs	.-88     	; 0x1162 <CLCD_u8WriteComand+0x12>
	{
		DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(Copy_u8Command,local_loopcount));
	}
	DIO_u8WritePinVal(CLC_u8RS, DIO_u8LOW);
    11ba:	80 e1       	ldi	r24, 0x10	; 16
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8RW, DIO_u8LOW);
    11c2:	81 e1       	ldi	r24, 0x11	; 17
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
    11ca:	82 e1       	ldi	r24, 0x12	; 18
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_u8WritePinVal>
	DELAY(1);
    11d2:	1a 82       	std	Y+2, r1	; 0x02
    11d4:	19 82       	std	Y+1, r1	; 0x01
    11d6:	06 c0       	rjmp	.+12     	; 0x11e4 <CLCD_u8WriteComand+0x94>
    11d8:	00 00       	nop
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	9a 81       	ldd	r25, Y+2	; 0x02
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	9a 83       	std	Y+2, r25	; 0x02
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	9a 81       	ldd	r25, Y+2	; 0x02
    11e8:	51 e0       	ldi	r21, 0x01	; 1
    11ea:	84 3f       	cpi	r24, 0xF4	; 244
    11ec:	95 07       	cpc	r25, r21
    11ee:	a0 f3       	brcs	.-24     	; 0x11d8 <CLCD_u8WriteComand+0x88>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
    11f0:	82 e1       	ldi	r24, 0x12	; 18
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_u8WritePinVal>

	return 0 ;
    11f8:	80 e0       	ldi	r24, 0x00	; 0
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <CLCD_u8WriteDataChar>:

extern u8 CLCD_u8WriteDataChar(u8 Copy_u8Data)
{
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	00 d0       	rcall	.+0      	; 0x120e <CLCD_u8WriteDataChar+0x6>
    120e:	00 d0       	rcall	.+0      	; 0x1210 <CLCD_u8WriteDataChar+0x8>
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	8c 83       	std	Y+4, r24	; 0x04
	u8 local_loopcount ;
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
    1216:	1b 82       	std	Y+3, r1	; 0x03
    1218:	29 c0       	rjmp	.+82     	; 0x126c <CLCD_u8WriteDataChar+0x64>
	{
	DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(Copy_u8Data,local_loopcount));
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	88 2f       	mov	r24, r24
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	fc 01       	movw	r30, r24
    1222:	ec 55       	subi	r30, 0x5C	; 92
    1224:	fe 4f       	sbci	r31, 0xFE	; 254
    1226:	60 81       	ld	r22, Z
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	48 2f       	mov	r20, r24
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 c0       	rjmp	.+4      	; 0x123e <CLCD_u8WriteDataChar+0x36>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	2a 95       	dec	r18
    1240:	e2 f7       	brpl	.-8      	; 0x123a <CLCD_u8WriteDataChar+0x32>
    1242:	9a 01       	movw	r18, r20
    1244:	28 23       	and	r18, r24
    1246:	39 23       	and	r19, r25
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a9 01       	movw	r20, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <CLCD_u8WriteDataChar+0x4e>
    1252:	55 95       	asr	r21
    1254:	47 95       	ror	r20
    1256:	8a 95       	dec	r24
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <CLCD_u8WriteDataChar+0x4a>
    125a:	ca 01       	movw	r24, r20
    125c:	98 2f       	mov	r25, r24
    125e:	86 2f       	mov	r24, r22
    1260:	69 2f       	mov	r22, r25
    1262:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_u8WritePinVal>
}

extern u8 CLCD_u8WriteDataChar(u8 Copy_u8Data)
{
	u8 local_loopcount ;
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	8f 5f       	subi	r24, 0xFF	; 255
    126a:	8b 83       	std	Y+3, r24	; 0x03
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	88 30       	cpi	r24, 0x08	; 8
    1270:	a0 f2       	brcs	.-88     	; 0x121a <CLCD_u8WriteDataChar+0x12>
	{
	DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(Copy_u8Data,local_loopcount));
	}
	DIO_u8WritePinVal(CLC_u8RS, DIO_u8HIGH);
    1272:	80 e1       	ldi	r24, 0x10	; 16
    1274:	61 e0       	ldi	r22, 0x01	; 1
    1276:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8RW, DIO_u8LOW);
    127a:	81 e1       	ldi	r24, 0x11	; 17
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
    1282:	82 e1       	ldi	r24, 0x12	; 18
    1284:	61 e0       	ldi	r22, 0x01	; 1
    1286:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_u8WritePinVal>
	DELAY(1);
    128a:	1a 82       	std	Y+2, r1	; 0x02
    128c:	19 82       	std	Y+1, r1	; 0x01
    128e:	06 c0       	rjmp	.+12     	; 0x129c <CLCD_u8WriteDataChar+0x94>
    1290:	00 00       	nop
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	9a 81       	ldd	r25, Y+2	; 0x02
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	9a 83       	std	Y+2, r25	; 0x02
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	9a 81       	ldd	r25, Y+2	; 0x02
    12a0:	51 e0       	ldi	r21, 0x01	; 1
    12a2:	84 3f       	cpi	r24, 0xF4	; 244
    12a4:	95 07       	cpc	r25, r21
    12a6:	a0 f3       	brcs	.-24     	; 0x1290 <CLCD_u8WriteDataChar+0x88>

	DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
    12a8:	82 e1       	ldi	r24, 0x12	; 18
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_u8WritePinVal>

	return 0 ;
    12b0:	80 e0       	ldi	r24, 0x00	; 0
}
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <CLCD_u8WriteDataStr>:

extern u8 CLCD_u8WriteDataStr(u8 *Copy_u8Data)
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <CLCD_u8WriteDataStr+0x6>
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <CLCD_u8WriteDataStr+0x8>
    12c8:	0f 92       	push	r0
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	9d 83       	std	Y+5, r25	; 0x05
    12d0:	8c 83       	std	Y+4, r24	; 0x04
	u8 local_loopcount=0 ;
    12d2:	1b 82       	std	Y+3, r1	; 0x03
    12d4:	54 c0       	rjmp	.+168    	; 0x137e <CLCD_u8WriteDataStr+0xbe>
while(*Copy_u8Data)
{
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
    12d6:	1b 82       	std	Y+3, r1	; 0x03
    12d8:	2b c0       	rjmp	.+86     	; 0x1330 <CLCD_u8WriteDataStr+0x70>
	{
	DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(*Copy_u8Data,local_loopcount));
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	88 2f       	mov	r24, r24
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	fc 01       	movw	r30, r24
    12e2:	ec 55       	subi	r30, 0x5C	; 92
    12e4:	fe 4f       	sbci	r31, 0xFE	; 254
    12e6:	60 81       	ld	r22, Z
    12e8:	ec 81       	ldd	r30, Y+4	; 0x04
    12ea:	fd 81       	ldd	r31, Y+5	; 0x05
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <CLCD_u8WriteDataStr+0x42>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	2a 95       	dec	r18
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <CLCD_u8WriteDataStr+0x3e>
    1306:	9a 01       	movw	r18, r20
    1308:	28 23       	and	r18, r24
    130a:	39 23       	and	r19, r25
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	a9 01       	movw	r20, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <CLCD_u8WriteDataStr+0x5a>
    1316:	55 95       	asr	r21
    1318:	47 95       	ror	r20
    131a:	8a 95       	dec	r24
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <CLCD_u8WriteDataStr+0x56>
    131e:	ca 01       	movw	r24, r20
    1320:	98 2f       	mov	r25, r24
    1322:	86 2f       	mov	r24, r22
    1324:	69 2f       	mov	r22, r25
    1326:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_u8WritePinVal>
extern u8 CLCD_u8WriteDataStr(u8 *Copy_u8Data)
{
	u8 local_loopcount=0 ;
while(*Copy_u8Data)
{
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	8f 5f       	subi	r24, 0xFF	; 255
    132e:	8b 83       	std	Y+3, r24	; 0x03
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	88 30       	cpi	r24, 0x08	; 8
    1334:	90 f2       	brcs	.-92     	; 0x12da <CLCD_u8WriteDataStr+0x1a>
	{
	DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(*Copy_u8Data,local_loopcount));
	}

	DIO_u8WritePinVal(CLC_u8RS, DIO_u8HIGH);
    1336:	80 e1       	ldi	r24, 0x10	; 16
    1338:	61 e0       	ldi	r22, 0x01	; 1
    133a:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8RW, DIO_u8LOW);
    133e:	81 e1       	ldi	r24, 0x11	; 17
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
    1346:	82 e1       	ldi	r24, 0x12	; 18
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_u8WritePinVal>
	DELAY(1);
    134e:	1a 82       	std	Y+2, r1	; 0x02
    1350:	19 82       	std	Y+1, r1	; 0x01
    1352:	06 c0       	rjmp	.+12     	; 0x1360 <CLCD_u8WriteDataStr+0xa0>
    1354:	00 00       	nop
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	9a 81       	ldd	r25, Y+2	; 0x02
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	9a 83       	std	Y+2, r25	; 0x02
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	9a 81       	ldd	r25, Y+2	; 0x02
    1364:	51 e0       	ldi	r21, 0x01	; 1
    1366:	84 3f       	cpi	r24, 0xF4	; 244
    1368:	95 07       	cpc	r25, r21
    136a:	a0 f3       	brcs	.-24     	; 0x1354 <CLCD_u8WriteDataStr+0x94>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
    136c:	82 e1       	ldi	r24, 0x12	; 18
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_u8WritePinVal>
	Copy_u8Data++ ;
    1374:	8c 81       	ldd	r24, Y+4	; 0x04
    1376:	9d 81       	ldd	r25, Y+5	; 0x05
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	9d 83       	std	Y+5, r25	; 0x05
    137c:	8c 83       	std	Y+4, r24	; 0x04
}

extern u8 CLCD_u8WriteDataStr(u8 *Copy_u8Data)
{
	u8 local_loopcount=0 ;
while(*Copy_u8Data)
    137e:	ec 81       	ldd	r30, Y+4	; 0x04
    1380:	fd 81       	ldd	r31, Y+5	; 0x05
    1382:	80 81       	ld	r24, Z
    1384:	88 23       	and	r24, r24
    1386:	09 f0       	breq	.+2      	; 0x138a <CLCD_u8WriteDataStr+0xca>
    1388:	a6 cf       	rjmp	.-180    	; 0x12d6 <CLCD_u8WriteDataStr+0x16>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
	DELAY(1);
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
	Copy_u8Data++ ;
	}
	return 0 ;
    138a:	80 e0       	ldi	r24, 0x00	; 0
}
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <CLCD_u8ReadBF>:
extern u8 CLCD_u8ReadBF(u8 *Copy_u8BF)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <CLCD_u8ReadBF+0x6>
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <CLCD_u8ReadBF+0x8>
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	9c 83       	std	Y+4, r25	; 0x04
    13aa:	8b 83       	std	Y+3, r24	; 0x03
	DIO_u8WritePinVal(CLC_u8RS, DIO_u8LOW);
    13ac:	80 e1       	ldi	r24, 0x10	; 16
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8RW, DIO_u8HIGH);
    13b4:	81 e1       	ldi	r24, 0x11	; 17
    13b6:	61 e0       	ldi	r22, 0x01	; 1
    13b8:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_u8WritePinVal>
	//DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
	DIO_u8WritePinDir(CLC_u8D7,DIO_u8LOW);
    13bc:	8f e0       	ldi	r24, 0x0F	; 15
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_u8WritePinDir>
	DIO_u8ReadPinVal(CLC_u8D7,Copy_u8BF);
    13c4:	2b 81       	ldd	r18, Y+3	; 0x03
    13c6:	3c 81       	ldd	r19, Y+4	; 0x04
    13c8:	8f e0       	ldi	r24, 0x0F	; 15
    13ca:	b9 01       	movw	r22, r18
    13cc:	0e 94 82 0a 	call	0x1504	; 0x1504 <DIO_u8ReadPinVal>
	DELAY(1);
    13d0:	1a 82       	std	Y+2, r1	; 0x02
    13d2:	19 82       	std	Y+1, r1	; 0x01
    13d4:	06 c0       	rjmp	.+12     	; 0x13e2 <CLCD_u8ReadBF+0x46>
    13d6:	00 00       	nop
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	9a 81       	ldd	r25, Y+2	; 0x02
    13dc:	01 96       	adiw	r24, 0x01	; 1
    13de:	9a 83       	std	Y+2, r25	; 0x02
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	9a 81       	ldd	r25, Y+2	; 0x02
    13e6:	21 e0       	ldi	r18, 0x01	; 1
    13e8:	84 3f       	cpi	r24, 0xF4	; 244
    13ea:	92 07       	cpc	r25, r18
    13ec:	a0 f3       	brcs	.-24     	; 0x13d6 <CLCD_u8ReadBF+0x3a>
	//DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
	DIO_u8WritePinDir(CLC_u8D7,DIO_u8HIGH);
    13ee:	8f e0       	ldi	r24, 0x0F	; 15
    13f0:	61 e0       	ldi	r22, 0x01	; 1
    13f2:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_u8WritePinDir>

	return 0 ;
    13f6:	80 e0       	ldi	r24, 0x00	; 0
}
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <CLCD_u8WriteOnCGRam>:

extern u8 CLCD_u8WriteOnCGRam(u8 *Copy_u8Ptrn,u8 Copy_location)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	00 d0       	rcall	.+0      	; 0x140c <CLCD_u8WriteOnCGRam+0x6>
    140c:	00 d0       	rcall	.+0      	; 0x140e <CLCD_u8WriteOnCGRam+0x8>
    140e:	00 d0       	rcall	.+0      	; 0x1410 <CLCD_u8WriteOnCGRam+0xa>
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	9b 83       	std	Y+3, r25	; 0x03
    1416:	8a 83       	std	Y+2, r24	; 0x02
    1418:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_loopcount ;
	CLCD_u8WriteComand((0x40+Copy_location*8));
    141a:	8c 81       	ldd	r24, Y+4	; 0x04
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	08 96       	adiw	r24, 0x08	; 8
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8WriteComand>
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
    1432:	19 82       	std	Y+1, r1	; 0x01
    1434:	0e c0       	rjmp	.+28     	; 0x1452 <CLCD_u8WriteOnCGRam+0x4c>
	{
		CLCD_u8WriteDataChar(Copy_u8Ptrn[local_loopcount]);
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	9b 81       	ldd	r25, Y+3	; 0x03
    1440:	fc 01       	movw	r30, r24
    1442:	e2 0f       	add	r30, r18
    1444:	f3 1f       	adc	r31, r19
    1446:	80 81       	ld	r24, Z
    1448:	0e 94 04 09 	call	0x1208	; 0x1208 <CLCD_u8WriteDataChar>

extern u8 CLCD_u8WriteOnCGRam(u8 *Copy_u8Ptrn,u8 Copy_location)
{
	u8 local_loopcount ;
	CLCD_u8WriteComand((0x40+Copy_location*8));
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	8f 5f       	subi	r24, 0xFF	; 255
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	88 30       	cpi	r24, 0x08	; 8
    1456:	78 f3       	brcs	.-34     	; 0x1436 <CLCD_u8WriteOnCGRam+0x30>
	{
		CLCD_u8WriteDataChar(Copy_u8Ptrn[local_loopcount]);
	}


	return CHKerr[Copy_location<8]  ;
    1458:	1e 82       	std	Y+6, r1	; 0x06
    145a:	1d 82       	std	Y+5, r1	; 0x05
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	88 30       	cpi	r24, 0x08	; 8
    1460:	20 f4       	brcc	.+8      	; 0x146a <CLCD_u8WriteOnCGRam+0x64>
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	9e 83       	std	Y+6, r25	; 0x06
    1468:	8d 83       	std	Y+5, r24	; 0x05
    146a:	ed 81       	ldd	r30, Y+5	; 0x05
    146c:	fe 81       	ldd	r31, Y+6	; 0x06
    146e:	e4 55       	subi	r30, 0x54	; 84
    1470:	fe 4f       	sbci	r31, 0xFE	; 254
    1472:	80 81       	ld	r24, Z
}
    1474:	26 96       	adiw	r28, 0x06	; 6
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <DIO_voidInit>:
static  u8 * const DIO_u8Ddrs[]={DIO_u8DDRA ,DIO_u8DDRB, DIO_u8DDRC , DIO_u8DDRD} ;
static  u8 *const DIO_u8Pins[]={DIO_u8PINA ,DIO_u8PINB, DIO_u8PINC , DIO_u8PIND} ;


extern void DIO_voidInit(void)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62

/*Comment!:initializing Ports Directions */
*DIO_u8Ddrs[DIO_u8PORT0]=DIO_u8PORTA_DIR;
    148e:	e0 91 b6 01 	lds	r30, 0x01B6
    1492:	f0 91 b7 01 	lds	r31, 0x01B7
    1496:	80 ef       	ldi	r24, 0xF0	; 240
    1498:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT1]=DIO_u8PORTB_DIR;
    149a:	e0 91 b8 01 	lds	r30, 0x01B8
    149e:	f0 91 b9 01 	lds	r31, 0x01B9
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT2]=DIO_u8PORTC_DIR;
    14a6:	e0 91 ba 01 	lds	r30, 0x01BA
    14aa:	f0 91 bb 01 	lds	r31, 0x01BB
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT3]=DIO_u8PORTD_DIR;
    14b2:	e0 91 bc 01 	lds	r30, 0x01BC
    14b6:	f0 91 bd 01 	lds	r31, 0x01BD
    14ba:	8e ef       	ldi	r24, 0xFE	; 254
    14bc:	80 83       	st	Z, r24

/*Comment!:initializing Ports Value  */
*DIO_u8Ports[DIO_u8PORT0] =(DIO_u8PORTA_DIR & DIO_u8PORTA_VAL) | ((~DIO_u8PORTA_DIR)&*DIO_u8Ports[DIO_u8PORT0] );
    14be:	a0 91 ae 01 	lds	r26, 0x01AE
    14c2:	b0 91 af 01 	lds	r27, 0x01AF
    14c6:	e0 91 ae 01 	lds	r30, 0x01AE
    14ca:	f0 91 af 01 	lds	r31, 0x01AF
    14ce:	80 81       	ld	r24, Z
    14d0:	8f 70       	andi	r24, 0x0F	; 15
    14d2:	8c 93       	st	X, r24
*DIO_u8Ports[DIO_u8PORT1] =(DIO_u8PORTB_DIR & DIO_u8PORTB_VAL)| ((~DIO_u8PORTB_DIR)&*DIO_u8Ports[DIO_u8PORT1] );
    14d4:	e0 91 b0 01 	lds	r30, 0x01B0
    14d8:	f0 91 b1 01 	lds	r31, 0x01B1
    14dc:	10 82       	st	Z, r1
*DIO_u8Ports[DIO_u8PORT2] =(DIO_u8PORTC_DIR & DIO_u8PORTC_VAL)| ((~DIO_u8PORTC_DIR)&*DIO_u8Ports[DIO_u8PORT2] );
    14de:	e0 91 b2 01 	lds	r30, 0x01B2
    14e2:	f0 91 b3 01 	lds	r31, 0x01B3
    14e6:	10 82       	st	Z, r1
*DIO_u8Ports[DIO_u8PORT3] =(DIO_u8PORTD_DIR & DIO_u8PORTD_VAL)| ((~DIO_u8PORTD_DIR)&*DIO_u8Ports[DIO_u8PORT3] );
    14e8:	a0 91 b4 01 	lds	r26, 0x01B4
    14ec:	b0 91 b5 01 	lds	r27, 0x01B5
    14f0:	e0 91 b4 01 	lds	r30, 0x01B4
    14f4:	f0 91 b5 01 	lds	r31, 0x01B5
    14f8:	80 81       	ld	r24, Z
    14fa:	81 70       	andi	r24, 0x01	; 1
    14fc:	8c 93       	st	X, r24

}
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <DIO_u8ReadPinVal>:


extern u8 DIO_u8ReadPinVal(u8 Copy_u8PinIdx,u8* Copy_u8PtrToval)
{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	00 d0       	rcall	.+0      	; 0x150a <DIO_u8ReadPinVal+0x6>
    150a:	00 d0       	rcall	.+0      	; 0x150c <DIO_u8ReadPinVal+0x8>
    150c:	00 d0       	rcall	.+0      	; 0x150e <DIO_u8ReadPinVal+0xa>
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	8c 83       	std	Y+4, r24	; 0x04
    1514:	7e 83       	std	Y+6, r23	; 0x06
    1516:	6d 83       	std	Y+5, r22	; 0x05

	 u8 Local_u8CheckPinState=ok ;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8PinIdx<DIO_u8PINMAXIDX)
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	8f 31       	cpi	r24, 0x1F	; 31
    1520:	80 f5       	brcc	.+96     	; 0x1582 <DIO_u8ReadPinVal+0x7e>
	    {

		u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	86 95       	lsr	r24
    1526:	86 95       	lsr	r24
    1528:	86 95       	lsr	r24
    152a:	8a 83       	std	Y+2, r24	; 0x02
		u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
    152c:	8c 81       	ldd	r24, Y+4	; 0x04
    152e:	87 70       	andi	r24, 0x07	; 7
    1530:	89 83       	std	Y+1, r24	; 0x01

		* Copy_u8PtrToval=get_bit(*DIO_u8Pins[local_u8CheckPinPlace],local_u8MapPin);
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	fc 01       	movw	r30, r24
    153e:	e2 54       	subi	r30, 0x42	; 66
    1540:	fe 4f       	sbci	r31, 0xFE	; 254
    1542:	01 90       	ld	r0, Z+
    1544:	f0 81       	ld	r31, Z
    1546:	e0 2d       	mov	r30, r0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	50 e0       	ldi	r21, 0x00	; 0
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 c0       	rjmp	.+4      	; 0x155e <DIO_u8ReadPinVal+0x5a>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	2a 95       	dec	r18
    1560:	e2 f7       	brpl	.-8      	; 0x155a <DIO_u8ReadPinVal+0x56>
    1562:	9a 01       	movw	r18, r20
    1564:	28 23       	and	r18, r24
    1566:	39 23       	and	r19, r25
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	a9 01       	movw	r20, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <DIO_u8ReadPinVal+0x72>
    1572:	55 95       	asr	r21
    1574:	47 95       	ror	r20
    1576:	8a 95       	dec	r24
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <DIO_u8ReadPinVal+0x6e>
    157a:	ca 01       	movw	r24, r20
    157c:	ed 81       	ldd	r30, Y+5	; 0x05
    157e:	fe 81       	ldd	r31, Y+6	; 0x06
    1580:	80 83       	st	Z, r24
    }
    else
    {

    }
return    Local_u8CheckPinState=ok ;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	8b 83       	std	Y+3, r24	; 0x03
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1588:	26 96       	adiw	r28, 0x06	; 6
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <DIO_u8WritePinVal>:

extern u8 DIO_u8WritePinVal(u8 Copy_u8PinIdx,u8 Copy_u8Pinval)
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <DIO_u8WritePinVal+0x6>
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <DIO_u8WritePinVal+0x8>
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <DIO_u8WritePinVal+0xa>
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	8d 83       	std	Y+5, r24	; 0x05
    15aa:	6e 83       	std	Y+6, r22	; 0x06
	 u8 Local_u8CheckPinState=ok ;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	8c 83       	std	Y+4, r24	; 0x04

	    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	80 32       	cpi	r24, 0x20	; 32
    15b4:	10 f0       	brcs	.+4      	; 0x15ba <DIO_u8WritePinVal+0x20>
	    {
	    	 Local_u8CheckPinState=error ;
    15b6:	1c 82       	std	Y+4, r1	; 0x04
    15b8:	64 c0       	rjmp	.+200    	; 0x1682 <DIO_u8WritePinVal+0xe8>
	    }
	    else
	    {
	    	 u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	86 95       	lsr	r24
    15be:	86 95       	lsr	r24
    15c0:	86 95       	lsr	r24
    15c2:	8b 83       	std	Y+3, r24	; 0x03
	    		 u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	87 70       	andi	r24, 0x07	; 7
    15c8:	8a 83       	std	Y+2, r24	; 0x02
	    	     u8 local_u8PinDir;
	    	     local_u8PinDir=get_bit(*DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin);
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	fc 01       	movw	r30, r24
    15d6:	ea 54       	subi	r30, 0x4A	; 74
    15d8:	fe 4f       	sbci	r31, 0xFE	; 254
    15da:	01 90       	ld	r0, Z+
    15dc:	f0 81       	ld	r31, Z
    15de:	e0 2d       	mov	r30, r0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <DIO_u8WritePinVal+0x5c>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	2a 95       	dec	r18
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <DIO_u8WritePinVal+0x58>
    15fa:	9a 01       	movw	r18, r20
    15fc:	28 23       	and	r18, r24
    15fe:	39 23       	and	r19, r25
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	a9 01       	movw	r20, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <DIO_u8WritePinVal+0x74>
    160a:	55 95       	asr	r21
    160c:	47 95       	ror	r20
    160e:	8a 95       	dec	r24
    1610:	e2 f7       	brpl	.-8      	; 0x160a <DIO_u8WritePinVal+0x70>
    1612:	ca 01       	movw	r24, r20
    1614:	89 83       	std	Y+1, r24	; 0x01
	    	if(local_u8PinDir==1)
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	99 f5       	brne	.+102    	; 0x1682 <DIO_u8WritePinVal+0xe8>
	    	{
	    	assign_bit(*DIO_u8Ports[local_u8CheckPinPlace],local_u8MapPin,Copy_u8Pinval);
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	88 2f       	mov	r24, r24
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	fc 01       	movw	r30, r24
    1628:	e2 55       	subi	r30, 0x52	; 82
    162a:	fe 4f       	sbci	r31, 0xFE	; 254
    162c:	a0 81       	ld	r26, Z
    162e:	b1 81       	ldd	r27, Z+1	; 0x01
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_u8WritePinVal+0xa6>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	2a 95       	dec	r18
    1642:	e2 f7       	brpl	.-8      	; 0x163c <DIO_u8WritePinVal+0xa2>
    1644:	28 2f       	mov	r18, r24
    1646:	20 95       	com	r18
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	fc 01       	movw	r30, r24
    1654:	e2 55       	subi	r30, 0x52	; 82
    1656:	fe 4f       	sbci	r31, 0xFE	; 254
    1658:	01 90       	ld	r0, Z+
    165a:	f0 81       	ld	r31, Z
    165c:	e0 2d       	mov	r30, r0
    165e:	80 81       	ld	r24, Z
    1660:	42 2f       	mov	r20, r18
    1662:	48 23       	and	r20, r24
    1664:	8e 81       	ldd	r24, Y+6	; 0x06
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	88 2f       	mov	r24, r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	b9 01       	movw	r22, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_u8WritePinVal+0xde>
    1674:	66 0f       	add	r22, r22
    1676:	77 1f       	adc	r23, r23
    1678:	8a 95       	dec	r24
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <DIO_u8WritePinVal+0xda>
    167c:	cb 01       	movw	r24, r22
    167e:	84 2b       	or	r24, r20
    1680:	8c 93       	st	X, r24
	    	{

	    	}
	    }

     return  Local_u8CheckPinState ;
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1684:	26 96       	adiw	r28, 0x06	; 6
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <DIO_u8ReadPortVal>:


extern u8 DIO_u8ReadPortVal(u8 Copy_u8PortIdx,u8* Copy_u8PtrToval)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	00 d0       	rcall	.+0      	; 0x169c <DIO_u8ReadPortVal+0x6>
    169c:	00 d0       	rcall	.+0      	; 0x169e <DIO_u8ReadPortVal+0x8>
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	8a 83       	std	Y+2, r24	; 0x02
    16a4:	7c 83       	std	Y+4, r23	; 0x04
    16a6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CheckPortR=ok ;
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	84 30       	cpi	r24, 0x04	; 4
    16b0:	80 f4       	brcc	.+32     	; 0x16d2 <DIO_u8ReadPortVal+0x3c>
	{

	* Copy_u8PtrToval=*DIO_u8Pins[Copy_u8PortIdx] ;
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	88 2f       	mov	r24, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	fc 01       	movw	r30, r24
    16be:	e2 54       	subi	r30, 0x42	; 66
    16c0:	fe 4f       	sbci	r31, 0xFE	; 254
    16c2:	01 90       	ld	r0, Z+
    16c4:	f0 81       	ld	r31, Z
    16c6:	e0 2d       	mov	r30, r0
    16c8:	80 81       	ld	r24, Z
    16ca:	eb 81       	ldd	r30, Y+3	; 0x03
    16cc:	fc 81       	ldd	r31, Y+4	; 0x04
    16ce:	80 83       	st	Z, r24
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <DIO_u8ReadPortVal+0x3e>
	}
	else
	{
		Local_u8CheckPortR=error ;
    16d2:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8CheckPortR ;
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <DIO_u8WritePortVal>:

extern u8 DIO_u8WritePortVal(u8 Copy_u8PortIdx,u8 Copy_u8Portval)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <DIO_u8WritePortVal+0x6>
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <DIO_u8WritePortVal+0x8>
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	8b 83       	std	Y+3, r24	; 0x03
    16f2:	6c 83       	std	Y+4, r22	; 0x04
     	u8 Local_u8CheckPortR=ok ;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	8a 83       	std	Y+2, r24	; 0x02
        u8 local_u8PortDir;
		if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	84 30       	cpi	r24, 0x04	; 4
    16fc:	f0 f4       	brcc	.+60     	; 0x173a <DIO_u8WritePortVal+0x56>
		{
				local_u8PortDir=*DIO_u8Ddrs[Copy_u8PortIdx] ;
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	88 2f       	mov	r24, r24
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	fc 01       	movw	r30, r24
    170a:	ea 54       	subi	r30, 0x4A	; 74
    170c:	fe 4f       	sbci	r31, 0xFE	; 254
    170e:	01 90       	ld	r0, Z+
    1710:	f0 81       	ld	r31, Z
    1712:	e0 2d       	mov	r30, r0
    1714:	80 81       	ld	r24, Z
    1716:	89 83       	std	Y+1, r24	; 0x01
			  if(local_u8PortDir==0xff)
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	8f 3f       	cpi	r24, 0xFF	; 255
    171c:	79 f4       	brne	.+30     	; 0x173c <DIO_u8WritePortVal+0x58>
			  {
		        *DIO_u8Ports[Copy_u8PortIdx]= Copy_u8Portval;
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	fc 01       	movw	r30, r24
    172a:	e2 55       	subi	r30, 0x52	; 82
    172c:	fe 4f       	sbci	r31, 0xFE	; 254
    172e:	01 90       	ld	r0, Z+
    1730:	f0 81       	ld	r31, Z
    1732:	e0 2d       	mov	r30, r0
    1734:	8c 81       	ldd	r24, Y+4	; 0x04
    1736:	80 83       	st	Z, r24
    1738:	01 c0       	rjmp	.+2      	; 0x173c <DIO_u8WritePortVal+0x58>

			  }
		}
		else
		{
			Local_u8CheckPortR=error ;
    173a:	1a 82       	std	Y+2, r1	; 0x02
		}

		return Local_u8CheckPortR ;
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <DIO_u8WritePinDir>:

extern u8 DIO_u8WritePinDir(u8 Copy_u8PinIdx,u8 Copy_u8PinDir)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	00 d0       	rcall	.+0      	; 0x1752 <DIO_u8WritePinDir+0x6>
    1752:	00 d0       	rcall	.+0      	; 0x1754 <DIO_u8WritePinDir+0x8>
    1754:	0f 92       	push	r0
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	8c 83       	std	Y+4, r24	; 0x04
    175c:	6d 83       	std	Y+5, r22	; 0x05
	     u8 Local_u8CheckPinState=ok ;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	8b 83       	std	Y+3, r24	; 0x03

		    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
    1762:	8c 81       	ldd	r24, Y+4	; 0x04
    1764:	80 32       	cpi	r24, 0x20	; 32
    1766:	10 f0       	brcs	.+4      	; 0x176c <DIO_u8WritePinDir+0x20>
		    {
		    	 Local_u8CheckPinState=error ;
    1768:	1b 82       	std	Y+3, r1	; 0x03
    176a:	3b c0       	rjmp	.+118    	; 0x17e2 <DIO_u8WritePinDir+0x96>
		    }
		    else
		    {
		    	u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	86 95       	lsr	r24
    1770:	86 95       	lsr	r24
    1772:	86 95       	lsr	r24
    1774:	8a 83       	std	Y+2, r24	; 0x02
		    	u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
    1776:	8c 81       	ldd	r24, Y+4	; 0x04
    1778:	87 70       	andi	r24, 0x07	; 7
    177a:	89 83       	std	Y+1, r24	; 0x01
		    	assign_bit(* DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin,Copy_u8PinDir);
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	88 2f       	mov	r24, r24
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	fc 01       	movw	r30, r24
    1788:	ea 54       	subi	r30, 0x4A	; 74
    178a:	fe 4f       	sbci	r31, 0xFE	; 254
    178c:	a0 81       	ld	r26, Z
    178e:	b1 81       	ldd	r27, Z+1	; 0x01
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <DIO_u8WritePinDir+0x54>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	2a 95       	dec	r18
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <DIO_u8WritePinDir+0x50>
    17a4:	28 2f       	mov	r18, r24
    17a6:	20 95       	com	r18
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	fc 01       	movw	r30, r24
    17b4:	ea 54       	subi	r30, 0x4A	; 74
    17b6:	fe 4f       	sbci	r31, 0xFE	; 254
    17b8:	01 90       	ld	r0, Z+
    17ba:	f0 81       	ld	r31, Z
    17bc:	e0 2d       	mov	r30, r0
    17be:	80 81       	ld	r24, Z
    17c0:	42 2f       	mov	r20, r18
    17c2:	48 23       	and	r20, r24
    17c4:	8d 81       	ldd	r24, Y+5	; 0x05
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	b9 01       	movw	r22, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <DIO_u8WritePinDir+0x8c>
    17d4:	66 0f       	add	r22, r22
    17d6:	77 1f       	adc	r23, r23
    17d8:	8a 95       	dec	r24
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <DIO_u8WritePinDir+0x88>
    17dc:	cb 01       	movw	r24, r22
    17de:	84 2b       	or	r24, r20
    17e0:	8c 93       	st	X, r24
		    }

	     return  Local_u8CheckPinState ;
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <DIO_u8WritePortDir>:

extern u8 DIO_u8WritePortDir(u8 Copy_u8PortIdx,u8 Copy_u8PortDir)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <DIO_u8WritePortDir+0x6>
    17fa:	0f 92       	push	r0
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	8a 83       	std	Y+2, r24	; 0x02
    1802:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8CheckPortR=ok ;
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	89 83       	std	Y+1, r24	; 0x01

			if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	84 30       	cpi	r24, 0x04	; 4
    180c:	70 f4       	brcc	.+28     	; 0x182a <DIO_u8WritePortDir+0x36>
			{

			*DIO_u8Ddrs[Copy_u8PortIdx]= Copy_u8PortDir;
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	fc 01       	movw	r30, r24
    181a:	ea 54       	subi	r30, 0x4A	; 74
    181c:	fe 4f       	sbci	r31, 0xFE	; 254
    181e:	01 90       	ld	r0, Z+
    1820:	f0 81       	ld	r31, Z
    1822:	e0 2d       	mov	r30, r0
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	80 83       	st	Z, r24
    1828:	01 c0       	rjmp	.+2      	; 0x182c <DIO_u8WritePortDir+0x38>
			}
			else
			{
				Local_u8CheckPortR=error ;
    182a:	19 82       	std	Y+1, r1	; 0x01
			}

			return Local_u8CheckPortR ;
    182c:	89 81       	ldd	r24, Y+1	; 0x01
}
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <DIO_u8ReadPinDir>:

extern u8 DIO_u8ReadPinDir(u8 Copy_u8PinIdx,u8 * Copy_u8PtrToDir)
{
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	00 d0       	rcall	.+0      	; 0x1840 <DIO_u8ReadPinDir+0x6>
    1840:	00 d0       	rcall	.+0      	; 0x1842 <DIO_u8ReadPinDir+0x8>
    1842:	00 d0       	rcall	.+0      	; 0x1844 <DIO_u8ReadPinDir+0xa>
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	8c 83       	std	Y+4, r24	; 0x04
    184a:	7e 83       	std	Y+6, r23	; 0x06
    184c:	6d 83       	std	Y+5, r22	; 0x05
	 u8 Local_u8CheckPinState=ok ;
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	8b 83       	std	Y+3, r24	; 0x03


	    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
    1852:	8c 81       	ldd	r24, Y+4	; 0x04
    1854:	80 32       	cpi	r24, 0x20	; 32
    1856:	10 f0       	brcs	.+4      	; 0x185c <DIO_u8ReadPinDir+0x22>
	    {
	    	 Local_u8CheckPinState=error ;
    1858:	1b 82       	std	Y+3, r1	; 0x03
    185a:	30 c0       	rjmp	.+96     	; 0x18bc <DIO_u8ReadPinDir+0x82>
	    }
	    else
	    {
	    	u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS;
    185c:	8c 81       	ldd	r24, Y+4	; 0x04
    185e:	86 95       	lsr	r24
    1860:	86 95       	lsr	r24
    1862:	86 95       	lsr	r24
    1864:	8a 83       	std	Y+2, r24	; 0x02
	    		 u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	87 70       	andi	r24, 0x07	; 7
    186a:	89 83       	std	Y+1, r24	; 0x01
	    	* Copy_u8PtrToDir=get_bit(*DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin);
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	88 2f       	mov	r24, r24
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	fc 01       	movw	r30, r24
    1878:	ea 54       	subi	r30, 0x4A	; 74
    187a:	fe 4f       	sbci	r31, 0xFE	; 254
    187c:	01 90       	ld	r0, Z+
    187e:	f0 81       	ld	r31, Z
    1880:	e0 2d       	mov	r30, r0
    1882:	80 81       	ld	r24, Z
    1884:	48 2f       	mov	r20, r24
    1886:	50 e0       	ldi	r21, 0x00	; 0
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <DIO_u8ReadPinDir+0x5e>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	2a 95       	dec	r18
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <DIO_u8ReadPinDir+0x5a>
    189c:	9a 01       	movw	r18, r20
    189e:	28 23       	and	r18, r24
    18a0:	39 23       	and	r19, r25
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a9 01       	movw	r20, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_u8ReadPinDir+0x76>
    18ac:	55 95       	asr	r21
    18ae:	47 95       	ror	r20
    18b0:	8a 95       	dec	r24
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_u8ReadPinDir+0x72>
    18b4:	ca 01       	movw	r24, r20
    18b6:	ed 81       	ldd	r30, Y+5	; 0x05
    18b8:	fe 81       	ldd	r31, Y+6	; 0x06
    18ba:	80 83       	st	Z, r24
	    }
	return  Local_u8CheckPinState ;
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    18be:	26 96       	adiw	r28, 0x06	; 6
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <DIO_u8ReadPortDir>:

extern u8 DIO_u8ReadPortDir(u8 Copy_u8PortIdx,u8 *Copy_u8PtrToDir)
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <DIO_u8ReadPortDir+0x6>
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <DIO_u8ReadPortDir+0x8>
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	8a 83       	std	Y+2, r24	; 0x02
    18de:	7c 83       	std	Y+4, r23	; 0x04
    18e0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CheckPortR=ok ;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	84 30       	cpi	r24, 0x04	; 4
    18ea:	80 f4       	brcc	.+32     	; 0x190c <DIO_u8ReadPortDir+0x3c>
		{

		* Copy_u8PtrToDir=*DIO_u8Pins[Copy_u8PortIdx] ;
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	88 2f       	mov	r24, r24
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	fc 01       	movw	r30, r24
    18f8:	e2 54       	subi	r30, 0x42	; 66
    18fa:	fe 4f       	sbci	r31, 0xFE	; 254
    18fc:	01 90       	ld	r0, Z+
    18fe:	f0 81       	ld	r31, Z
    1900:	e0 2d       	mov	r30, r0
    1902:	80 81       	ld	r24, Z
    1904:	eb 81       	ldd	r30, Y+3	; 0x03
    1906:	fc 81       	ldd	r31, Y+4	; 0x04
    1908:	80 83       	st	Z, r24
    190a:	01 c0       	rjmp	.+2      	; 0x190e <DIO_u8ReadPortDir+0x3e>
		}
		else
		{
			Local_u8CheckPortR=error ;
    190c:	19 82       	std	Y+1, r1	; 0x01
		}

		return Local_u8CheckPortR ;
    190e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <TSEN_u8ReadTSensr>:
#endif

u8 const CHCKERR[]={ok,error};

u8 TSEN_u8ReadTSensr(u8 Copy_SenIdx , u16 *Copy_PtrToVal)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	27 97       	sbiw	r28, 0x07	; 7
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	de bf       	out	0x3e, r29	; 62
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	cd bf       	out	0x3d, r28	; 61
    1932:	8b 83       	std	Y+3, r24	; 0x03
    1934:	7d 83       	std	Y+5, r23	; 0x05
    1936:	6c 83       	std	Y+4, r22	; 0x04
	u16 Local_u8AdcVal ;
	ADC_u8ReadCh_SSht(TSEN_u8SNSORS[Copy_SenIdx ],&Local_u8AdcVal);
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	88 2f       	mov	r24, r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	fc 01       	movw	r30, r24
    1940:	e4 53       	subi	r30, 0x34	; 52
    1942:	fe 4f       	sbci	r31, 0xFE	; 254
    1944:	80 81       	ld	r24, Z
    1946:	9e 01       	movw	r18, r28
    1948:	2f 5f       	subi	r18, 0xFF	; 255
    194a:	3f 4f       	sbci	r19, 0xFF	; 255
    194c:	b9 01       	movw	r22, r18
    194e:	0e 94 ed 06 	call	0xdda	; 0xdda <ADC_u8ReadCh_SSht>
	Local_u8AdcVal/=2 ;
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	9a 81       	ldd	r25, Y+2	; 0x02
    1956:	96 95       	lsr	r25
    1958:	87 95       	ror	r24
    195a:	9a 83       	std	Y+2, r25	; 0x02
    195c:	89 83       	std	Y+1, r24	; 0x01
	*Copy_PtrToVal=Local_u8AdcVal;
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	9a 81       	ldd	r25, Y+2	; 0x02
    1962:	ec 81       	ldd	r30, Y+4	; 0x04
    1964:	fd 81       	ldd	r31, Y+5	; 0x05
    1966:	91 83       	std	Z+1, r25	; 0x01
    1968:	80 83       	st	Z, r24

	return CHCKERR[Copy_SenIdx>8];
    196a:	1f 82       	std	Y+7, r1	; 0x07
    196c:	1e 82       	std	Y+6, r1	; 0x06
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	89 30       	cpi	r24, 0x09	; 9
    1972:	20 f0       	brcs	.+8      	; 0x197c <TSEN_u8ReadTSensr+0x5e>
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	9f 83       	std	Y+7, r25	; 0x07
    197a:	8e 83       	std	Y+6, r24	; 0x06
    197c:	ee 81       	ldd	r30, Y+6	; 0x06
    197e:	ff 81       	ldd	r31, Y+7	; 0x07
    1980:	ea 53       	subi	r30, 0x3A	; 58
    1982:	fe 4f       	sbci	r31, 0xFE	; 254
    1984:	80 81       	ld	r24, Z
}
    1986:	27 96       	adiw	r28, 0x07	; 7
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <TSW_voidinit>:
static u8 TSW_LowCounter;
static u8 TSW_HighCounter;


extern void TSW_voidinit(void)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62

	TSW_ButtonState=TSW_u8RELEASED ;
    19a0:	10 92 cd 01 	sts	0x01CD, r1
	TSW_laststat=TSW_u8RELEASED;
    19a4:	10 92 cf 01 	sts	0x01CF, r1
	TSW_ButtonVal=TSW_u8RELEASED ;
    19a8:	10 92 ce 01 	sts	0x01CE, r1
	TSW_LowCounter=TSW_u8RELEASED ;
    19ac:	10 92 d0 01 	sts	0x01D0, r1
	TSW_HighCounter=TSW_u8RELEASED;
    19b0:	10 92 d1 01 	sts	0x01D1, r1
}
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <TSW_u8ReadState>:

extern u8 TSW_u8ReadState(u8 Copy_u8SwIdx,u8 * Copy_u8PtrToState)
{
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	27 97       	sbiw	r28, 0x07	; 7
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	7b 83       	std	Y+3, r23	; 0x03
    19d2:	6a 83       	std	Y+2, r22	; 0x02
	//u8 local_u8GetButtonStateStatus=ok;
		DIO_u8ReadPinVal(TSW_SWtchs[Copy_u8SwIdx],&TSW_ButtonVal);
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	88 2f       	mov	r24, r24
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	fc 01       	movw	r30, r24
    19dc:	e8 53       	subi	r30, 0x38	; 56
    19de:	fe 4f       	sbci	r31, 0xFE	; 254
    19e0:	80 81       	ld	r24, Z
    19e2:	2e ec       	ldi	r18, 0xCE	; 206
    19e4:	31 e0       	ldi	r19, 0x01	; 1
    19e6:	b9 01       	movw	r22, r18
    19e8:	0e 94 82 0a 	call	0x1504	; 0x1504 <DIO_u8ReadPinVal>

		switch  (TSW_ButtonState)
    19ec:	80 91 cd 01 	lds	r24, 0x01CD
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	3f 83       	std	Y+7, r19	; 0x07
    19f6:	2e 83       	std	Y+6, r18	; 0x06
    19f8:	8e 81       	ldd	r24, Y+6	; 0x06
    19fa:	9f 81       	ldd	r25, Y+7	; 0x07
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	91 05       	cpc	r25, r1
    1a00:	e9 f0       	breq	.+58     	; 0x1a3c <TSW_u8ReadState+0x82>
    1a02:	2e 81       	ldd	r18, Y+6	; 0x06
    1a04:	3f 81       	ldd	r19, Y+7	; 0x07
    1a06:	22 30       	cpi	r18, 0x02	; 2
    1a08:	31 05       	cpc	r19, r1
    1a0a:	69 f1       	breq	.+90     	; 0x1a66 <TSW_u8ReadState+0xac>
    1a0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	09 f0       	breq	.+2      	; 0x1a16 <TSW_u8ReadState+0x5c>
    1a14:	5e c0       	rjmp	.+188    	; 0x1ad2 <TSW_u8ReadState+0x118>
		{
			case TSW_u8RELEASED:
				if(TSW_ButtonVal==1)
    1a16:	80 91 ce 01 	lds	r24, 0x01CE
    1a1a:	81 30       	cpi	r24, 0x01	; 1
    1a1c:	59 f4       	brne	.+22     	; 0x1a34 <TSW_u8ReadState+0x7a>
					{
					TSW_ButtonState=TSW_BOUNCE;
    1a1e:	82 e0       	ldi	r24, 0x02	; 2
    1a20:	80 93 cd 01 	sts	0x01CD, r24
					TSW_laststat=TSW_u8RELEASED;
    1a24:	10 92 cf 01 	sts	0x01CF, r1
					* Copy_u8PtrToState=TSW_laststat;
    1a28:	80 91 cf 01 	lds	r24, 0x01CF
    1a2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a2e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a30:	80 83       	st	Z, r24
    1a32:	4f c0       	rjmp	.+158    	; 0x1ad2 <TSW_u8ReadState+0x118>
					}
				else
				{
					*Copy_u8PtrToState=TSW_u8RELEASED;
    1a34:	ea 81       	ldd	r30, Y+2	; 0x02
    1a36:	fb 81       	ldd	r31, Y+3	; 0x03
    1a38:	10 82       	st	Z, r1
    1a3a:	4b c0       	rjmp	.+150    	; 0x1ad2 <TSW_u8ReadState+0x118>
				}
				break;
			case TSW_u8PRESSED:
				if(TSW_ButtonVal==0)
    1a3c:	80 91 ce 01 	lds	r24, 0x01CE
    1a40:	88 23       	and	r24, r24
    1a42:	61 f4       	brne	.+24     	; 0x1a5c <TSW_u8ReadState+0xa2>
						{
					TSW_ButtonState=TSW_BOUNCE;
    1a44:	82 e0       	ldi	r24, 0x02	; 2
    1a46:	80 93 cd 01 	sts	0x01CD, r24
							TSW_laststat=TSW_u8PRESSED;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	80 93 cf 01 	sts	0x01CF, r24
							* Copy_u8PtrToState=TSW_laststat;
    1a50:	80 91 cf 01 	lds	r24, 0x01CF
    1a54:	ea 81       	ldd	r30, Y+2	; 0x02
    1a56:	fb 81       	ldd	r31, Y+3	; 0x03
    1a58:	80 83       	st	Z, r24
    1a5a:	3b c0       	rjmp	.+118    	; 0x1ad2 <TSW_u8ReadState+0x118>
						}
				else
				{
					*Copy_u8PtrToState=TSW_u8PRESSED;
    1a5c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a5e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	80 83       	st	Z, r24
    1a64:	36 c0       	rjmp	.+108    	; 0x1ad2 <TSW_u8ReadState+0x118>
				}
				break;
			case TSW_BOUNCE:
				if(TSW_ButtonVal==1)
    1a66:	80 91 ce 01 	lds	r24, 0x01CE
    1a6a:	81 30       	cpi	r24, 0x01	; 1
    1a6c:	59 f4       	brne	.+22     	; 0x1a84 <TSW_u8ReadState+0xca>
				{
					TSW_HighCounter++;
    1a6e:	80 91 d1 01 	lds	r24, 0x01D1
    1a72:	8f 5f       	subi	r24, 0xFF	; 255
    1a74:	80 93 d1 01 	sts	0x01D1, r24
					*Copy_u8PtrToState=TSW_laststat;
    1a78:	80 91 cf 01 	lds	r24, 0x01CF
    1a7c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a7e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a80:	80 83       	st	Z, r24
    1a82:	0a c0       	rjmp	.+20     	; 0x1a98 <TSW_u8ReadState+0xde>
				}
				else
				{
					TSW_LowCounter++;
    1a84:	80 91 d0 01 	lds	r24, 0x01D0
    1a88:	8f 5f       	subi	r24, 0xFF	; 255
    1a8a:	80 93 d0 01 	sts	0x01D0, r24
					*Copy_u8PtrToState=TSW_laststat;
    1a8e:	80 91 cf 01 	lds	r24, 0x01CF
    1a92:	ea 81       	ldd	r30, Y+2	; 0x02
    1a94:	fb 81       	ldd	r31, Y+3	; 0x03
    1a96:	80 83       	st	Z, r24
				}
				if(TSW_HighCounter==BOUNCETIME)
    1a98:	80 91 d1 01 	lds	r24, 0x01D1
    1a9c:	85 30       	cpi	r24, 0x05	; 5
    1a9e:	61 f4       	brne	.+24     	; 0x1ab8 <TSW_u8ReadState+0xfe>
				{
					TSW_ButtonState=TSW_u8PRESSED;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	80 93 cd 01 	sts	0x01CD, r24
					TSW_HighCounter=0;
    1aa6:	10 92 d1 01 	sts	0x01D1, r1
					TSW_LowCounter=0;
    1aaa:	10 92 d0 01 	sts	0x01D0, r1
					*Copy_u8PtrToState=TSW_u8PRESSED;
    1aae:	ea 81       	ldd	r30, Y+2	; 0x02
    1ab0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	80 83       	st	Z, r24
    1ab6:	0d c0       	rjmp	.+26     	; 0x1ad2 <TSW_u8ReadState+0x118>
				}
				else if (TSW_LowCounter==BOUNCETIME)
    1ab8:	80 91 d0 01 	lds	r24, 0x01D0
    1abc:	85 30       	cpi	r24, 0x05	; 5
    1abe:	49 f4       	brne	.+18     	; 0x1ad2 <TSW_u8ReadState+0x118>
				{
					TSW_ButtonState=TSW_u8RELEASED;
    1ac0:	10 92 cd 01 	sts	0x01CD, r1
					TSW_LowCounter=0;
    1ac4:	10 92 d0 01 	sts	0x01D0, r1
					TSW_HighCounter=0;
    1ac8:	10 92 d1 01 	sts	0x01D1, r1
					*Copy_u8PtrToState=TSW_u8RELEASED;
    1acc:	ea 81       	ldd	r30, Y+2	; 0x02
    1ace:	fb 81       	ldd	r31, Y+3	; 0x03
    1ad0:	10 82       	st	Z, r1
				break;
			default:
				break;
			}

return CheckErr[Copy_u8SwIdx<15];
    1ad2:	1d 82       	std	Y+5, r1	; 0x05
    1ad4:	1c 82       	std	Y+4, r1	; 0x04
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	8f 30       	cpi	r24, 0x0F	; 15
    1ada:	20 f4       	brcc	.+8      	; 0x1ae4 <TSW_u8ReadState+0x12a>
    1adc:	21 e0       	ldi	r18, 0x01	; 1
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	3d 83       	std	Y+5, r19	; 0x05
    1ae2:	2c 83       	std	Y+4, r18	; 0x04
    1ae4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ae6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ae8:	e7 53       	subi	r30, 0x37	; 55
    1aea:	fe 4f       	sbci	r31, 0xFE	; 254
    1aec:	80 81       	ld	r24, Z
}
    1aee:	27 96       	adiw	r28, 0x07	; 7
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <main>:
u16 SensRead=0 , old_SensRead=1 ;
void ohmeter(void);
void voltmeter(void);
void Tempsensor (void) ;
int main(void)
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62

	DIO_voidInit();
    1b08:	0e 94 43 0a 	call	0x1486	; 0x1486 <DIO_voidInit>
	ADC_voidInit();
    1b0c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ADC_voidInit>
	CLC_voidInit();
    1b10:	0e 94 44 08 	call	0x1088	; 0x1088 <CLC_voidInit>
	ADC_voidEnable();
    1b14:	0e 94 d1 06 	call	0xda2	; 0xda2 <ADC_voidEnable>
	while(1)
	{
		//voltmeter();
		//ohmeter();
		Tempsensor ();
    1b18:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <Tempsensor>
    1b1c:	fd cf       	rjmp	.-6      	; 0x1b18 <main+0x18>

00001b1e <voltmeter>:
	}
return 0 ;
}
void voltmeter(void)
{
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
	ADC_u8ReadCh_SSht(0,&Adc_ReadV);
    1b26:	2b ed       	ldi	r18, 0xDB	; 219
    1b28:	31 e0       	ldi	r19, 0x01	; 1
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	b9 01       	movw	r22, r18
    1b2e:	0e 94 ed 06 	call	0xdda	; 0xdda <ADC_u8ReadCh_SSht>
    volt=Adc_ReadV*0.005;
    1b32:	80 91 db 01 	lds	r24, 0x01DB
    1b36:	90 91 dc 01 	lds	r25, 0x01DC
    1b3a:	cc 01       	movw	r24, r24
    1b3c:	a0 e0       	ldi	r26, 0x00	; 0
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	bc 01       	movw	r22, r24
    1b42:	cd 01       	movw	r24, r26
    1b44:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	cd 01       	movw	r24, r26
    1b50:	2a e0       	ldi	r18, 0x0A	; 10
    1b52:	37 ed       	ldi	r19, 0xD7	; 215
    1b54:	43 ea       	ldi	r20, 0xA3	; 163
    1b56:	5b e3       	ldi	r21, 0x3B	; 59
    1b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	80 93 e4 01 	sts	0x01E4, r24
    1b64:	90 93 e5 01 	sts	0x01E5, r25
    1b68:	a0 93 e6 01 	sts	0x01E6, r26
    1b6c:	b0 93 e7 01 	sts	0x01E7, r27
    volt*=2.4;
    1b70:	80 91 e4 01 	lds	r24, 0x01E4
    1b74:	90 91 e5 01 	lds	r25, 0x01E5
    1b78:	a0 91 e6 01 	lds	r26, 0x01E6
    1b7c:	b0 91 e7 01 	lds	r27, 0x01E7
    1b80:	bc 01       	movw	r22, r24
    1b82:	cd 01       	movw	r24, r26
    1b84:	2a e9       	ldi	r18, 0x9A	; 154
    1b86:	39 e9       	ldi	r19, 0x99	; 153
    1b88:	49 e1       	ldi	r20, 0x19	; 25
    1b8a:	50 e4       	ldi	r21, 0x40	; 64
    1b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	80 93 e4 01 	sts	0x01E4, r24
    1b98:	90 93 e5 01 	sts	0x01E5, r25
    1b9c:	a0 93 e6 01 	sts	0x01E6, r26
    1ba0:	b0 93 e7 01 	sts	0x01E7, r27
	itoa((u8)volt,strV,10) ;
    1ba4:	80 91 e4 01 	lds	r24, 0x01E4
    1ba8:	90 91 e5 01 	lds	r25, 0x01E5
    1bac:	a0 91 e6 01 	lds	r26, 0x01E6
    1bb0:	b0 91 e7 01 	lds	r27, 0x01E7
    1bb4:	bc 01       	movw	r22, r24
    1bb6:	cd 01       	movw	r24, r26
    1bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	88 2f       	mov	r24, r24
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	2d ed       	ldi	r18, 0xDD	; 221
    1bc6:	31 e0       	ldi	r19, 0x01	; 1
    1bc8:	b9 01       	movw	r22, r18
    1bca:	4a e0       	ldi	r20, 0x0A	; 10
    1bcc:	50 e0       	ldi	r21, 0x00	; 0
    1bce:	0e 94 11 10 	call	0x2022	; 0x2022 <itoa>
	CLCD_u8WriteDataStr(strV);
    1bd2:	8d ed       	ldi	r24, 0xDD	; 221
    1bd4:	91 e0       	ldi	r25, 0x01	; 1
    1bd6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <CLCD_u8WriteDataStr>
	CLCD_u8WriteComand(CLC_u8STL);
    1bda:	80 e8       	ldi	r24, 0x80	; 128
    1bdc:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8WriteComand>
}
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <ohmeter>:
void ohmeter(void)
{
    1be6:	ef 92       	push	r14
    1be8:	ff 92       	push	r15
    1bea:	0f 93       	push	r16
    1bec:	1f 93       	push	r17
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <ohmeter+0xe>
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
	   DIO_u8ReadPinVal(24,&SW_Read);
    1bf8:	2a ed       	ldi	r18, 0xDA	; 218
    1bfa:	31 e0       	ldi	r19, 0x01	; 1
    1bfc:	88 e1       	ldi	r24, 0x18	; 24
    1bfe:	b9 01       	movw	r22, r18
    1c00:	0e 94 82 0a 	call	0x1504	; 0x1504 <DIO_u8ReadPinVal>

			if(SW_Read==1&&f==0)
    1c04:	80 91 da 01 	lds	r24, 0x01DA
    1c08:	81 30       	cpi	r24, 0x01	; 1
    1c0a:	b1 f4       	brne	.+44     	; 0x1c38 <ohmeter+0x52>
    1c0c:	80 91 d3 01 	lds	r24, 0x01D3
    1c10:	88 23       	and	r24, r24
    1c12:	91 f4       	brne	.+36     	; 0x1c38 <ohmeter+0x52>
			{
				count++ ;
    1c14:	80 91 d2 01 	lds	r24, 0x01D2
    1c18:	8f 5f       	subi	r24, 0xFF	; 255
    1c1a:	80 93 d2 01 	sts	0x01D2, r24
				if(count==3)
    1c1e:	80 91 d2 01 	lds	r24, 0x01D2
    1c22:	83 30       	cpi	r24, 0x03	; 3
    1c24:	11 f4       	brne	.+4      	; 0x1c2a <ohmeter+0x44>
					count=0 ;
    1c26:	10 92 d2 01 	sts	0x01D2, r1

			       CLCD_u8WriteComand(CLC_u8CLRDISP );
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8WriteComand>
			       f=1 ;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	80 93 d3 01 	sts	0x01D3, r24
    1c36:	06 c0       	rjmp	.+12     	; 0x1c44 <ohmeter+0x5e>
			}

			else if(SW_Read==0)
    1c38:	80 91 da 01 	lds	r24, 0x01DA
    1c3c:	88 23       	and	r24, r24
    1c3e:	11 f4       	brne	.+4      	; 0x1c44 <ohmeter+0x5e>
				{
					f=0 ;
    1c40:	10 92 d3 01 	sts	0x01D3, r1
				}
			else
			{

			}
			switch(count)
    1c44:	80 91 d2 01 	lds	r24, 0x01D2
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	3a 83       	std	Y+2, r19	; 0x02
    1c4e:	29 83       	std	Y+1, r18	; 0x01
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	9a 81       	ldd	r25, Y+2	; 0x02
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	91 05       	cpc	r25, r1
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <ohmeter+0x76>
    1c5a:	6a c0       	rjmp	.+212    	; 0x1d30 <ohmeter+0x14a>
    1c5c:	29 81       	ldd	r18, Y+1	; 0x01
    1c5e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c60:	22 30       	cpi	r18, 0x02	; 2
    1c62:	31 05       	cpc	r19, r1
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <ohmeter+0x82>
    1c66:	c3 c0       	rjmp	.+390    	; 0x1dee <ohmeter+0x208>
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6c:	00 97       	sbiw	r24, 0x00	; 0
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <ohmeter+0x8c>
    1c70:	1c c1       	rjmp	.+568    	; 0x1eaa <ohmeter+0x2c4>
			{
			case 0 :
				ADC_u8ReadCh_SSht(0,&Adc_Read);
    1c72:	22 ee       	ldi	r18, 0xE2	; 226
    1c74:	31 e0       	ldi	r19, 0x01	; 1
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	b9 01       	movw	r22, r18
    1c7a:	0e 94 ed 06 	call	0xdda	; 0xdda <ADC_u8ReadCh_SSht>
				ResVal=  (0.005 *(Adc_Read))*100 / (5-(0.005 *(Adc_Read))) ;
    1c7e:	80 91 e2 01 	lds	r24, 0x01E2
    1c82:	90 91 e3 01 	lds	r25, 0x01E3
    1c86:	cc 01       	movw	r24, r24
    1c88:	a0 e0       	ldi	r26, 0x00	; 0
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	bc 01       	movw	r22, r24
    1c8e:	cd 01       	movw	r24, r26
    1c90:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	bc 01       	movw	r22, r24
    1c9a:	cd 01       	movw	r24, r26
    1c9c:	2a e0       	ldi	r18, 0x0A	; 10
    1c9e:	37 ed       	ldi	r19, 0xD7	; 215
    1ca0:	43 ea       	ldi	r20, 0xA3	; 163
    1ca2:	5b e3       	ldi	r21, 0x3B	; 59
    1ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	bc 01       	movw	r22, r24
    1cae:	cd 01       	movw	r24, r26
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	48 ec       	ldi	r20, 0xC8	; 200
    1cb6:	52 e4       	ldi	r21, 0x42	; 66
    1cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	7c 01       	movw	r14, r24
    1cc2:	8d 01       	movw	r16, r26
    1cc4:	80 91 e2 01 	lds	r24, 0x01E2
    1cc8:	90 91 e3 01 	lds	r25, 0x01E3
    1ccc:	cc 01       	movw	r24, r24
    1cce:	a0 e0       	ldi	r26, 0x00	; 0
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	bc 01       	movw	r22, r24
    1cd4:	cd 01       	movw	r24, r26
    1cd6:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	bc 01       	movw	r22, r24
    1ce0:	cd 01       	movw	r24, r26
    1ce2:	2a e0       	ldi	r18, 0x0A	; 10
    1ce4:	37 ed       	ldi	r19, 0xD7	; 215
    1ce6:	43 ea       	ldi	r20, 0xA3	; 163
    1ce8:	5b eb       	ldi	r21, 0xBB	; 187
    1cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	bc 01       	movw	r22, r24
    1cf4:	cd 01       	movw	r24, r26
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 ea       	ldi	r20, 0xA0	; 160
    1cfc:	50 e4       	ldi	r21, 0x40	; 64
    1cfe:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9c 01       	movw	r18, r24
    1d08:	ad 01       	movw	r20, r26
    1d0a:	c8 01       	movw	r24, r16
    1d0c:	b7 01       	movw	r22, r14
    1d0e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	80 93 d6 01 	sts	0x01D6, r24
    1d1a:	90 93 d7 01 	sts	0x01D7, r25
    1d1e:	a0 93 d8 01 	sts	0x01D8, r26
    1d22:	b0 93 d9 01 	sts	0x01D9, r27
				CLCD_u8WriteDataStr("Range= 100 ohm");
    1d26:	80 e6       	ldi	r24, 0x60	; 96
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <CLCD_u8WriteDataStr>
    1d2e:	bd c0       	rjmp	.+378    	; 0x1eaa <ohmeter+0x2c4>
				break ;
			case 1 :
				ADC_u8ReadCh_SSht(0,&Adc_Read);
    1d30:	22 ee       	ldi	r18, 0xE2	; 226
    1d32:	31 e0       	ldi	r19, 0x01	; 1
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	b9 01       	movw	r22, r18
    1d38:	0e 94 ed 06 	call	0xdda	; 0xdda <ADC_u8ReadCh_SSht>
				ResVal=  (0.005 *(Adc_Read))*1000 / (5-(0.005 *(Adc_Read))) ;
    1d3c:	80 91 e2 01 	lds	r24, 0x01E2
    1d40:	90 91 e3 01 	lds	r25, 0x01E3
    1d44:	cc 01       	movw	r24, r24
    1d46:	a0 e0       	ldi	r26, 0x00	; 0
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	bc 01       	movw	r22, r24
    1d4c:	cd 01       	movw	r24, r26
    1d4e:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	bc 01       	movw	r22, r24
    1d58:	cd 01       	movw	r24, r26
    1d5a:	2a e0       	ldi	r18, 0x0A	; 10
    1d5c:	37 ed       	ldi	r19, 0xD7	; 215
    1d5e:	43 ea       	ldi	r20, 0xA3	; 163
    1d60:	5b e3       	ldi	r21, 0x3B	; 59
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	bc 01       	movw	r22, r24
    1d6c:	cd 01       	movw	r24, r26
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	4a e7       	ldi	r20, 0x7A	; 122
    1d74:	54 e4       	ldi	r21, 0x44	; 68
    1d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	7c 01       	movw	r14, r24
    1d80:	8d 01       	movw	r16, r26
    1d82:	80 91 e2 01 	lds	r24, 0x01E2
    1d86:	90 91 e3 01 	lds	r25, 0x01E3
    1d8a:	cc 01       	movw	r24, r24
    1d8c:	a0 e0       	ldi	r26, 0x00	; 0
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	bc 01       	movw	r22, r24
    1d92:	cd 01       	movw	r24, r26
    1d94:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	cd 01       	movw	r24, r26
    1da0:	2a e0       	ldi	r18, 0x0A	; 10
    1da2:	37 ed       	ldi	r19, 0xD7	; 215
    1da4:	43 ea       	ldi	r20, 0xA3	; 163
    1da6:	5b eb       	ldi	r21, 0xBB	; 187
    1da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	bc 01       	movw	r22, r24
    1db2:	cd 01       	movw	r24, r26
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 ea       	ldi	r20, 0xA0	; 160
    1dba:	50 e4       	ldi	r21, 0x40	; 64
    1dbc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	9c 01       	movw	r18, r24
    1dc6:	ad 01       	movw	r20, r26
    1dc8:	c8 01       	movw	r24, r16
    1dca:	b7 01       	movw	r22, r14
    1dcc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	80 93 d6 01 	sts	0x01D6, r24
    1dd8:	90 93 d7 01 	sts	0x01D7, r25
    1ddc:	a0 93 d8 01 	sts	0x01D8, r26
    1de0:	b0 93 d9 01 	sts	0x01D9, r27
				CLCD_u8WriteDataStr("Range= 1K ohm");
    1de4:	8f e6       	ldi	r24, 0x6F	; 111
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	0e 94 60 09 	call	0x12c0	; 0x12c0 <CLCD_u8WriteDataStr>
    1dec:	5e c0       	rjmp	.+188    	; 0x1eaa <ohmeter+0x2c4>
				break ;
			case 2 :
				ADC_u8ReadCh_SSht(0,&Adc_Read);
    1dee:	22 ee       	ldi	r18, 0xE2	; 226
    1df0:	31 e0       	ldi	r19, 0x01	; 1
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	b9 01       	movw	r22, r18
    1df6:	0e 94 ed 06 	call	0xdda	; 0xdda <ADC_u8ReadCh_SSht>
				ResVal=  (0.005 *(Adc_Read))*10000 / (5-(0.005 *(Adc_Read))) ;
    1dfa:	80 91 e2 01 	lds	r24, 0x01E2
    1dfe:	90 91 e3 01 	lds	r25, 0x01E3
    1e02:	cc 01       	movw	r24, r24
    1e04:	a0 e0       	ldi	r26, 0x00	; 0
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	bc 01       	movw	r22, r24
    1e16:	cd 01       	movw	r24, r26
    1e18:	2a e0       	ldi	r18, 0x0A	; 10
    1e1a:	37 ed       	ldi	r19, 0xD7	; 215
    1e1c:	43 ea       	ldi	r20, 0xA3	; 163
    1e1e:	5b e3       	ldi	r21, 0x3B	; 59
    1e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	bc 01       	movw	r22, r24
    1e2a:	cd 01       	movw	r24, r26
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e4       	ldi	r19, 0x40	; 64
    1e30:	4c e1       	ldi	r20, 0x1C	; 28
    1e32:	56 e4       	ldi	r21, 0x46	; 70
    1e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	7c 01       	movw	r14, r24
    1e3e:	8d 01       	movw	r16, r26
    1e40:	80 91 e2 01 	lds	r24, 0x01E2
    1e44:	90 91 e3 01 	lds	r25, 0x01E3
    1e48:	cc 01       	movw	r24, r24
    1e4a:	a0 e0       	ldi	r26, 0x00	; 0
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	bc 01       	movw	r22, r24
    1e50:	cd 01       	movw	r24, r26
    1e52:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	2a e0       	ldi	r18, 0x0A	; 10
    1e60:	37 ed       	ldi	r19, 0xD7	; 215
    1e62:	43 ea       	ldi	r20, 0xA3	; 163
    1e64:	5b eb       	ldi	r21, 0xBB	; 187
    1e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 ea       	ldi	r20, 0xA0	; 160
    1e78:	50 e4       	ldi	r21, 0x40	; 64
    1e7a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	9c 01       	movw	r18, r24
    1e84:	ad 01       	movw	r20, r26
    1e86:	c8 01       	movw	r24, r16
    1e88:	b7 01       	movw	r22, r14
    1e8a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	80 93 d6 01 	sts	0x01D6, r24
    1e96:	90 93 d7 01 	sts	0x01D7, r25
    1e9a:	a0 93 d8 01 	sts	0x01D8, r26
    1e9e:	b0 93 d9 01 	sts	0x01D9, r27
				CLCD_u8WriteDataStr("Range= 10K ohm");
    1ea2:	8d e7       	ldi	r24, 0x7D	; 125
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <CLCD_u8WriteDataStr>

			default:
				break ;
			}

			itoa((u16) ResVal,str,10) ;
    1eaa:	80 91 d6 01 	lds	r24, 0x01D6
    1eae:	90 91 d7 01 	lds	r25, 0x01D7
    1eb2:	a0 91 d8 01 	lds	r26, 0x01D8
    1eb6:	b0 91 d9 01 	lds	r27, 0x01D9
    1eba:	bc 01       	movw	r22, r24
    1ebc:	cd 01       	movw	r24, r26
    1ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	28 ee       	ldi	r18, 0xE8	; 232
    1ec8:	31 e0       	ldi	r19, 0x01	; 1
    1eca:	b9 01       	movw	r22, r18
    1ecc:	4a e0       	ldi	r20, 0x0A	; 10
    1ece:	50 e0       	ldi	r21, 0x00	; 0
    1ed0:	0e 94 11 10 	call	0x2022	; 0x2022 <itoa>
			CLCD_u8WriteComand(CLC_u8NEWL);
    1ed4:	80 ec       	ldi	r24, 0xC0	; 192
    1ed6:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8WriteComand>
			CLCD_u8WriteDataStr("RES=");
    1eda:	8c e8       	ldi	r24, 0x8C	; 140
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 60 09 	call	0x12c0	; 0x12c0 <CLCD_u8WriteDataStr>
			CLCD_u8WriteDataStr(str);
    1ee2:	88 ee       	ldi	r24, 0xE8	; 232
    1ee4:	91 e0       	ldi	r25, 0x01	; 1
    1ee6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <CLCD_u8WriteDataStr>
	        CLCD_u8WriteComand(CLC_u8STL);
    1eea:	80 e8       	ldi	r24, 0x80	; 128
    1eec:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8WriteComand>
}
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	ff 90       	pop	r15
    1efe:	ef 90       	pop	r14
    1f00:	08 95       	ret

00001f02 <Tempsensor>:
void Tempsensor (void)
{
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62


 //TSEN_u8ReadTSensr(0,&SensRead);

	ADC_u8ReadCh_SSht(0,&SensRead);
    1f0a:	24 ed       	ldi	r18, 0xD4	; 212
    1f0c:	31 e0       	ldi	r19, 0x01	; 1
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	b9 01       	movw	r22, r18
    1f12:	0e 94 ed 06 	call	0xdda	; 0xdda <ADC_u8ReadCh_SSht>
if(SensRead != old_SensRead)
    1f16:	20 91 d4 01 	lds	r18, 0x01D4
    1f1a:	30 91 d5 01 	lds	r19, 0x01D5
    1f1e:	80 91 a0 01 	lds	r24, 0x01A0
    1f22:	90 91 a1 01 	lds	r25, 0x01A1
    1f26:	28 17       	cp	r18, r24
    1f28:	39 07       	cpc	r19, r25
    1f2a:	09 f4       	brne	.+2      	; 0x1f2e <Tempsensor+0x2c>
    1f2c:	40 c0       	rjmp	.+128    	; 0x1fae <Tempsensor+0xac>
 {
	 CLCD_u8WriteComand(CLC_u8CLRDISP );
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8WriteComand>
	 CLCD_u8WriteComand(CLC_u8STL);
    1f34:	80 e8       	ldi	r24, 0x80	; 128
    1f36:	0e 94 a8 08 	call	0x1150	; 0x1150 <CLCD_u8WriteComand>
	 volt=SensRead*0.005;
    1f3a:	80 91 d4 01 	lds	r24, 0x01D4
    1f3e:	90 91 d5 01 	lds	r25, 0x01D5
    1f42:	cc 01       	movw	r24, r24
    1f44:	a0 e0       	ldi	r26, 0x00	; 0
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	bc 01       	movw	r22, r24
    1f56:	cd 01       	movw	r24, r26
    1f58:	2a e0       	ldi	r18, 0x0A	; 10
    1f5a:	37 ed       	ldi	r19, 0xD7	; 215
    1f5c:	43 ea       	ldi	r20, 0xA3	; 163
    1f5e:	5b e3       	ldi	r21, 0x3B	; 59
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	80 93 e4 01 	sts	0x01E4, r24
    1f6c:	90 93 e5 01 	sts	0x01E5, r25
    1f70:	a0 93 e6 01 	sts	0x01E6, r26
    1f74:	b0 93 e7 01 	sts	0x01E7, r27
	 itoa( SensRead,str,10)  ;
    1f78:	80 91 d4 01 	lds	r24, 0x01D4
    1f7c:	90 91 d5 01 	lds	r25, 0x01D5
    1f80:	28 ee       	ldi	r18, 0xE8	; 232
    1f82:	31 e0       	ldi	r19, 0x01	; 1
    1f84:	b9 01       	movw	r22, r18
    1f86:	4a e0       	ldi	r20, 0x0A	; 10
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	0e 94 11 10 	call	0x2022	; 0x2022 <itoa>
	 CLCD_u8WriteDataStr("TEMP= ");
    1f8e:	81 e9       	ldi	r24, 0x91	; 145
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	0e 94 60 09 	call	0x12c0	; 0x12c0 <CLCD_u8WriteDataStr>
	 CLCD_u8WriteDataStr(str);
    1f96:	88 ee       	ldi	r24, 0xE8	; 232
    1f98:	91 e0       	ldi	r25, 0x01	; 1
    1f9a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <CLCD_u8WriteDataStr>
	 old_SensRead = SensRead ;
    1f9e:	80 91 d4 01 	lds	r24, 0x01D4
    1fa2:	90 91 d5 01 	lds	r25, 0x01D5
    1fa6:	90 93 a1 01 	sts	0x01A1, r25
    1faa:	80 93 a0 01 	sts	0x01A0, r24
 }
}
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <__prologue_saves__>:
    1fb4:	2f 92       	push	r2
    1fb6:	3f 92       	push	r3
    1fb8:	4f 92       	push	r4
    1fba:	5f 92       	push	r5
    1fbc:	6f 92       	push	r6
    1fbe:	7f 92       	push	r7
    1fc0:	8f 92       	push	r8
    1fc2:	9f 92       	push	r9
    1fc4:	af 92       	push	r10
    1fc6:	bf 92       	push	r11
    1fc8:	cf 92       	push	r12
    1fca:	df 92       	push	r13
    1fcc:	ef 92       	push	r14
    1fce:	ff 92       	push	r15
    1fd0:	0f 93       	push	r16
    1fd2:	1f 93       	push	r17
    1fd4:	cf 93       	push	r28
    1fd6:	df 93       	push	r29
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	ca 1b       	sub	r28, r26
    1fde:	db 0b       	sbc	r29, r27
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	09 94       	ijmp

00001fec <__epilogue_restores__>:
    1fec:	2a 88       	ldd	r2, Y+18	; 0x12
    1fee:	39 88       	ldd	r3, Y+17	; 0x11
    1ff0:	48 88       	ldd	r4, Y+16	; 0x10
    1ff2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ff4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ff6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ff8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ffa:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ffc:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ffe:	b9 84       	ldd	r11, Y+9	; 0x09
    2000:	c8 84       	ldd	r12, Y+8	; 0x08
    2002:	df 80       	ldd	r13, Y+7	; 0x07
    2004:	ee 80       	ldd	r14, Y+6	; 0x06
    2006:	fd 80       	ldd	r15, Y+5	; 0x05
    2008:	0c 81       	ldd	r16, Y+4	; 0x04
    200a:	1b 81       	ldd	r17, Y+3	; 0x03
    200c:	aa 81       	ldd	r26, Y+2	; 0x02
    200e:	b9 81       	ldd	r27, Y+1	; 0x01
    2010:	ce 0f       	add	r28, r30
    2012:	d1 1d       	adc	r29, r1
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	f8 94       	cli
    2018:	de bf       	out	0x3e, r29	; 62
    201a:	0f be       	out	0x3f, r0	; 63
    201c:	cd bf       	out	0x3d, r28	; 61
    201e:	ed 01       	movw	r28, r26
    2020:	08 95       	ret

00002022 <itoa>:
    2022:	fb 01       	movw	r30, r22
    2024:	9f 01       	movw	r18, r30
    2026:	e8 94       	clt
    2028:	42 30       	cpi	r20, 0x02	; 2
    202a:	c4 f0       	brlt	.+48     	; 0x205c <itoa+0x3a>
    202c:	45 32       	cpi	r20, 0x25	; 37
    202e:	b4 f4       	brge	.+44     	; 0x205c <itoa+0x3a>
    2030:	4a 30       	cpi	r20, 0x0A	; 10
    2032:	29 f4       	brne	.+10     	; 0x203e <itoa+0x1c>
    2034:	97 fb       	bst	r25, 7
    2036:	1e f4       	brtc	.+6      	; 0x203e <itoa+0x1c>
    2038:	90 95       	com	r25
    203a:	81 95       	neg	r24
    203c:	9f 4f       	sbci	r25, 0xFF	; 255
    203e:	64 2f       	mov	r22, r20
    2040:	77 27       	eor	r23, r23
    2042:	0e 94 42 10 	call	0x2084	; 0x2084 <__udivmodhi4>
    2046:	80 5d       	subi	r24, 0xD0	; 208
    2048:	8a 33       	cpi	r24, 0x3A	; 58
    204a:	0c f0       	brlt	.+2      	; 0x204e <itoa+0x2c>
    204c:	89 5d       	subi	r24, 0xD9	; 217
    204e:	81 93       	st	Z+, r24
    2050:	cb 01       	movw	r24, r22
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	a1 f7       	brne	.-24     	; 0x203e <itoa+0x1c>
    2056:	16 f4       	brtc	.+4      	; 0x205c <itoa+0x3a>
    2058:	5d e2       	ldi	r21, 0x2D	; 45
    205a:	51 93       	st	Z+, r21
    205c:	10 82       	st	Z, r1
    205e:	c9 01       	movw	r24, r18
    2060:	0c 94 32 10 	jmp	0x2064	; 0x2064 <strrev>

00002064 <strrev>:
    2064:	dc 01       	movw	r26, r24
    2066:	fc 01       	movw	r30, r24
    2068:	67 2f       	mov	r22, r23
    206a:	71 91       	ld	r23, Z+
    206c:	77 23       	and	r23, r23
    206e:	e1 f7       	brne	.-8      	; 0x2068 <strrev+0x4>
    2070:	32 97       	sbiw	r30, 0x02	; 2
    2072:	04 c0       	rjmp	.+8      	; 0x207c <strrev+0x18>
    2074:	7c 91       	ld	r23, X
    2076:	6d 93       	st	X+, r22
    2078:	70 83       	st	Z, r23
    207a:	62 91       	ld	r22, -Z
    207c:	ae 17       	cp	r26, r30
    207e:	bf 07       	cpc	r27, r31
    2080:	c8 f3       	brcs	.-14     	; 0x2074 <strrev+0x10>
    2082:	08 95       	ret

00002084 <__udivmodhi4>:
    2084:	aa 1b       	sub	r26, r26
    2086:	bb 1b       	sub	r27, r27
    2088:	51 e1       	ldi	r21, 0x11	; 17
    208a:	07 c0       	rjmp	.+14     	; 0x209a <__udivmodhi4_ep>

0000208c <__udivmodhi4_loop>:
    208c:	aa 1f       	adc	r26, r26
    208e:	bb 1f       	adc	r27, r27
    2090:	a6 17       	cp	r26, r22
    2092:	b7 07       	cpc	r27, r23
    2094:	10 f0       	brcs	.+4      	; 0x209a <__udivmodhi4_ep>
    2096:	a6 1b       	sub	r26, r22
    2098:	b7 0b       	sbc	r27, r23

0000209a <__udivmodhi4_ep>:
    209a:	88 1f       	adc	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	5a 95       	dec	r21
    20a0:	a9 f7       	brne	.-22     	; 0x208c <__udivmodhi4_loop>
    20a2:	80 95       	com	r24
    20a4:	90 95       	com	r25
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	08 95       	ret

000020ac <_exit>:
    20ac:	f8 94       	cli

000020ae <__stop_program>:
    20ae:	ff cf       	rjmp	.-2      	; 0x20ae <__stop_program>
