
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000abc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000abc  00000b50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080008c  0080008c  00000b7c  2**0
                  ALLOC
  3 .stab         000012cc  00000000  00000000  00000b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000082b  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1b 05 	call	0xa36	; 0xa36 <main>
  8a:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CLC_voidInit>:
#include "DIO_utilites.h"
#include "CLCD_private.h"
const u8  CLC_u8DataArr[8]={CLC_u8D0,CLC_u8D1,CLC_u8D2,CLC_u8D3,CLC_u8D4,CLC_u8D5,CLC_u8D6,CLC_u8D7};
const u8 CHKerr[2]={error,ok};
void CLC_voidInit(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	28 97       	sbiw	r28, 0x08	; 8
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61

	DELAY(20);
  a6:	18 86       	std	Y+8, r1	; 0x08
  a8:	1f 82       	std	Y+7, r1	; 0x07
  aa:	06 c0       	rjmp	.+12     	; 0xb8 <CLC_voidInit+0x26>
  ac:	00 00       	nop
  ae:	8f 81       	ldd	r24, Y+7	; 0x07
  b0:	98 85       	ldd	r25, Y+8	; 0x08
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	98 87       	std	Y+8, r25	; 0x08
  b6:	8f 83       	std	Y+7, r24	; 0x07
  b8:	8f 81       	ldd	r24, Y+7	; 0x07
  ba:	98 85       	ldd	r25, Y+8	; 0x08
  bc:	27 e2       	ldi	r18, 0x27	; 39
  be:	80 31       	cpi	r24, 0x10	; 16
  c0:	92 07       	cpc	r25, r18
  c2:	a0 f3       	brcs	.-24     	; 0xac <CLC_voidInit+0x1a>
	CLCD_u8WriteComand(0b00110000);
  c4:	80 e3       	ldi	r24, 0x30	; 48
  c6:	0e 94 ad 00 	call	0x15a	; 0x15a <CLCD_u8WriteComand>

	DELAY(5);
  ca:	1e 82       	std	Y+6, r1	; 0x06
  cc:	1d 82       	std	Y+5, r1	; 0x05
  ce:	06 c0       	rjmp	.+12     	; 0xdc <CLC_voidInit+0x4a>
  d0:	00 00       	nop
  d2:	8d 81       	ldd	r24, Y+5	; 0x05
  d4:	9e 81       	ldd	r25, Y+6	; 0x06
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	9e 83       	std	Y+6, r25	; 0x06
  da:	8d 83       	std	Y+5, r24	; 0x05
  dc:	8d 81       	ldd	r24, Y+5	; 0x05
  de:	9e 81       	ldd	r25, Y+6	; 0x06
  e0:	29 e0       	ldi	r18, 0x09	; 9
  e2:	84 3c       	cpi	r24, 0xC4	; 196
  e4:	92 07       	cpc	r25, r18
  e6:	a0 f3       	brcs	.-24     	; 0xd0 <CLC_voidInit+0x3e>
	CLCD_u8WriteComand(0b00110000);
  e8:	80 e3       	ldi	r24, 0x30	; 48
  ea:	0e 94 ad 00 	call	0x15a	; 0x15a <CLCD_u8WriteComand>

	DELAY(1);
  ee:	1c 82       	std	Y+4, r1	; 0x04
  f0:	1b 82       	std	Y+3, r1	; 0x03
  f2:	06 c0       	rjmp	.+12     	; 0x100 <CLC_voidInit+0x6e>
  f4:	00 00       	nop
  f6:	8b 81       	ldd	r24, Y+3	; 0x03
  f8:	9c 81       	ldd	r25, Y+4	; 0x04
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	9c 83       	std	Y+4, r25	; 0x04
  fe:	8b 83       	std	Y+3, r24	; 0x03
 100:	8b 81       	ldd	r24, Y+3	; 0x03
 102:	9c 81       	ldd	r25, Y+4	; 0x04
 104:	21 e0       	ldi	r18, 0x01	; 1
 106:	84 3f       	cpi	r24, 0xF4	; 244
 108:	92 07       	cpc	r25, r18
 10a:	a0 f3       	brcs	.-24     	; 0xf4 <CLC_voidInit+0x62>
	CLCD_u8WriteComand(0b00110000);
 10c:	80 e3       	ldi	r24, 0x30	; 48
 10e:	0e 94 ad 00 	call	0x15a	; 0x15a <CLCD_u8WriteComand>


	CLCD_u8WriteComand(0b00111000);
 112:	88 e3       	ldi	r24, 0x38	; 56
 114:	0e 94 ad 00 	call	0x15a	; 0x15a <CLCD_u8WriteComand>


	CLCD_u8WriteComand(0b00000110);
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	0e 94 ad 00 	call	0x15a	; 0x15a <CLCD_u8WriteComand>

	CLCD_u8WriteComand(0b00001100);
 11e:	8c e0       	ldi	r24, 0x0C	; 12
 120:	0e 94 ad 00 	call	0x15a	; 0x15a <CLCD_u8WriteComand>

	DELAY(1);
 124:	1a 82       	std	Y+2, r1	; 0x02
 126:	19 82       	std	Y+1, r1	; 0x01
 128:	06 c0       	rjmp	.+12     	; 0x136 <CLC_voidInit+0xa4>
 12a:	00 00       	nop
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	9a 81       	ldd	r25, Y+2	; 0x02
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	9a 83       	std	Y+2, r25	; 0x02
 134:	89 83       	std	Y+1, r24	; 0x01
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	9a 81       	ldd	r25, Y+2	; 0x02
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	84 3f       	cpi	r24, 0xF4	; 244
 13e:	92 07       	cpc	r25, r18
 140:	a0 f3       	brcs	.-24     	; 0x12a <CLC_voidInit+0x98>

	CLCD_u8WriteComand(CLC_u8FUNCSET);
 142:	8c e3       	ldi	r24, 0x3C	; 60
 144:	0e 94 ad 00 	call	0x15a	; 0x15a <CLCD_u8WriteComand>
}
 148:	28 96       	adiw	r28, 0x08	; 8
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
 154:	cf 91       	pop	r28
 156:	df 91       	pop	r29
 158:	08 95       	ret

0000015a <CLCD_u8WriteComand>:

extern u8 CLCD_u8WriteComand(u8 Copy_u8Command)
{
 15a:	df 93       	push	r29
 15c:	cf 93       	push	r28
 15e:	00 d0       	rcall	.+0      	; 0x160 <CLCD_u8WriteComand+0x6>
 160:	00 d0       	rcall	.+0      	; 0x162 <CLCD_u8WriteComand+0x8>
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	8c 83       	std	Y+4, r24	; 0x04
	u8 local_loopcount ;
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
 168:	1b 82       	std	Y+3, r1	; 0x03
 16a:	29 c0       	rjmp	.+82     	; 0x1be <CLCD_u8WriteComand+0x64>
	{
		DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(Copy_u8Command,local_loopcount));
 16c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e:	88 2f       	mov	r24, r24
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	fc 01       	movw	r30, r24
 174:	e6 59       	subi	r30, 0x96	; 150
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	60 81       	ld	r22, Z
 17a:	8c 81       	ldd	r24, Y+4	; 0x04
 17c:	48 2f       	mov	r20, r24
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	8b 81       	ldd	r24, Y+3	; 0x03
 182:	28 2f       	mov	r18, r24
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <CLCD_u8WriteComand+0x36>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	2a 95       	dec	r18
 192:	e2 f7       	brpl	.-8      	; 0x18c <CLCD_u8WriteComand+0x32>
 194:	9a 01       	movw	r18, r20
 196:	28 23       	and	r18, r24
 198:	39 23       	and	r19, r25
 19a:	8b 81       	ldd	r24, Y+3	; 0x03
 19c:	88 2f       	mov	r24, r24
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	a9 01       	movw	r20, r18
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <CLCD_u8WriteComand+0x4e>
 1a4:	55 95       	asr	r21
 1a6:	47 95       	ror	r20
 1a8:	8a 95       	dec	r24
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <CLCD_u8WriteComand+0x4a>
 1ac:	ca 01       	movw	r24, r20
 1ae:	98 2f       	mov	r25, r24
 1b0:	86 2f       	mov	r24, r22
 1b2:	69 2f       	mov	r22, r25
 1b4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_u8WritePinVal>
}

extern u8 CLCD_u8WriteComand(u8 Copy_u8Command)
{
	u8 local_loopcount ;
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
 1b8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	8b 83       	std	Y+3, r24	; 0x03
 1be:	8b 81       	ldd	r24, Y+3	; 0x03
 1c0:	88 30       	cpi	r24, 0x08	; 8
 1c2:	a0 f2       	brcs	.-88     	; 0x16c <CLCD_u8WriteComand+0x12>
	{
		DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(Copy_u8Command,local_loopcount));
	}
	DIO_u8WritePinVal(CLC_u8RS, DIO_u8LOW);
 1c4:	8f e1       	ldi	r24, 0x1F	; 31
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8RW, DIO_u8LOW);
 1cc:	8e e1       	ldi	r24, 0x1E	; 30
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
 1d4:	8d e1       	ldi	r24, 0x1D	; 29
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_u8WritePinVal>
	DELAY(1);
 1dc:	1a 82       	std	Y+2, r1	; 0x02
 1de:	19 82       	std	Y+1, r1	; 0x01
 1e0:	06 c0       	rjmp	.+12     	; 0x1ee <CLCD_u8WriteComand+0x94>
 1e2:	00 00       	nop
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	9a 81       	ldd	r25, Y+2	; 0x02
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	9a 83       	std	Y+2, r25	; 0x02
 1ec:	89 83       	std	Y+1, r24	; 0x01
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	9a 81       	ldd	r25, Y+2	; 0x02
 1f2:	51 e0       	ldi	r21, 0x01	; 1
 1f4:	84 3f       	cpi	r24, 0xF4	; 244
 1f6:	95 07       	cpc	r25, r21
 1f8:	a0 f3       	brcs	.-24     	; 0x1e2 <CLCD_u8WriteComand+0x88>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
 1fa:	8d e1       	ldi	r24, 0x1D	; 29
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_u8WritePinVal>

	return 0 ;
 202:	80 e0       	ldi	r24, 0x00	; 0
}
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	cf 91       	pop	r28
 20e:	df 91       	pop	r29
 210:	08 95       	ret

00000212 <CLCD_u8WriteDataChar>:

extern u8 CLCD_u8WriteDataChar(u8 Copy_u8Data)
{
 212:	df 93       	push	r29
 214:	cf 93       	push	r28
 216:	00 d0       	rcall	.+0      	; 0x218 <CLCD_u8WriteDataChar+0x6>
 218:	00 d0       	rcall	.+0      	; 0x21a <CLCD_u8WriteDataChar+0x8>
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
 21e:	8c 83       	std	Y+4, r24	; 0x04
	u8 local_loopcount ;
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
 220:	1b 82       	std	Y+3, r1	; 0x03
 222:	29 c0       	rjmp	.+82     	; 0x276 <CLCD_u8WriteDataChar+0x64>
	{
	DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(Copy_u8Data,local_loopcount));
 224:	8b 81       	ldd	r24, Y+3	; 0x03
 226:	88 2f       	mov	r24, r24
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	fc 01       	movw	r30, r24
 22c:	e6 59       	subi	r30, 0x96	; 150
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	60 81       	ld	r22, Z
 232:	8c 81       	ldd	r24, Y+4	; 0x04
 234:	48 2f       	mov	r20, r24
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <CLCD_u8WriteDataChar+0x36>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	2a 95       	dec	r18
 24a:	e2 f7       	brpl	.-8      	; 0x244 <CLCD_u8WriteDataChar+0x32>
 24c:	9a 01       	movw	r18, r20
 24e:	28 23       	and	r18, r24
 250:	39 23       	and	r19, r25
 252:	8b 81       	ldd	r24, Y+3	; 0x03
 254:	88 2f       	mov	r24, r24
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	a9 01       	movw	r20, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <CLCD_u8WriteDataChar+0x4e>
 25c:	55 95       	asr	r21
 25e:	47 95       	ror	r20
 260:	8a 95       	dec	r24
 262:	e2 f7       	brpl	.-8      	; 0x25c <CLCD_u8WriteDataChar+0x4a>
 264:	ca 01       	movw	r24, r20
 266:	98 2f       	mov	r25, r24
 268:	86 2f       	mov	r24, r22
 26a:	69 2f       	mov	r22, r25
 26c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_u8WritePinVal>
}

extern u8 CLCD_u8WriteDataChar(u8 Copy_u8Data)
{
	u8 local_loopcount ;
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
 270:	8b 81       	ldd	r24, Y+3	; 0x03
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	8b 83       	std	Y+3, r24	; 0x03
 276:	8b 81       	ldd	r24, Y+3	; 0x03
 278:	88 30       	cpi	r24, 0x08	; 8
 27a:	a0 f2       	brcs	.-88     	; 0x224 <CLCD_u8WriteDataChar+0x12>
	{
	DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(Copy_u8Data,local_loopcount));
	}
	DIO_u8WritePinVal(CLC_u8RS, DIO_u8HIGH);
 27c:	8f e1       	ldi	r24, 0x1F	; 31
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8RW, DIO_u8LOW);
 284:	8e e1       	ldi	r24, 0x1E	; 30
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
 28c:	8d e1       	ldi	r24, 0x1D	; 29
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_u8WritePinVal>
	DELAY(1);
 294:	1a 82       	std	Y+2, r1	; 0x02
 296:	19 82       	std	Y+1, r1	; 0x01
 298:	06 c0       	rjmp	.+12     	; 0x2a6 <CLCD_u8WriteDataChar+0x94>
 29a:	00 00       	nop
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	9a 81       	ldd	r25, Y+2	; 0x02
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	9a 83       	std	Y+2, r25	; 0x02
 2a4:	89 83       	std	Y+1, r24	; 0x01
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	9a 81       	ldd	r25, Y+2	; 0x02
 2aa:	51 e0       	ldi	r21, 0x01	; 1
 2ac:	84 3f       	cpi	r24, 0xF4	; 244
 2ae:	95 07       	cpc	r25, r21
 2b0:	a0 f3       	brcs	.-24     	; 0x29a <CLCD_u8WriteDataChar+0x88>

	DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
 2b2:	8d e1       	ldi	r24, 0x1D	; 29
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_u8WritePinVal>

	return 0 ;
 2ba:	80 e0       	ldi	r24, 0x00	; 0
}
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	cf 91       	pop	r28
 2c6:	df 91       	pop	r29
 2c8:	08 95       	ret

000002ca <CLCD_u8WriteDataStr>:

extern u8 CLCD_u8WriteDataStr(u8 *Copy_u8Data)
{
 2ca:	df 93       	push	r29
 2cc:	cf 93       	push	r28
 2ce:	00 d0       	rcall	.+0      	; 0x2d0 <CLCD_u8WriteDataStr+0x6>
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <CLCD_u8WriteDataStr+0x8>
 2d2:	0f 92       	push	r0
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	9d 83       	std	Y+5, r25	; 0x05
 2da:	8c 83       	std	Y+4, r24	; 0x04
	u8 local_loopcount=0 ;
 2dc:	1b 82       	std	Y+3, r1	; 0x03
 2de:	54 c0       	rjmp	.+168    	; 0x388 <CLCD_u8WriteDataStr+0xbe>
while(*Copy_u8Data)
{
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
 2e0:	1b 82       	std	Y+3, r1	; 0x03
 2e2:	2b c0       	rjmp	.+86     	; 0x33a <CLCD_u8WriteDataStr+0x70>
	{
	DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(*Copy_u8Data,local_loopcount));
 2e4:	8b 81       	ldd	r24, Y+3	; 0x03
 2e6:	88 2f       	mov	r24, r24
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	fc 01       	movw	r30, r24
 2ec:	e6 59       	subi	r30, 0x96	; 150
 2ee:	ff 4f       	sbci	r31, 0xFF	; 255
 2f0:	60 81       	ld	r22, Z
 2f2:	ec 81       	ldd	r30, Y+4	; 0x04
 2f4:	fd 81       	ldd	r31, Y+5	; 0x05
 2f6:	80 81       	ld	r24, Z
 2f8:	48 2f       	mov	r20, r24
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	8b 81       	ldd	r24, Y+3	; 0x03
 2fe:	28 2f       	mov	r18, r24
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <CLCD_u8WriteDataStr+0x42>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	2a 95       	dec	r18
 30e:	e2 f7       	brpl	.-8      	; 0x308 <CLCD_u8WriteDataStr+0x3e>
 310:	9a 01       	movw	r18, r20
 312:	28 23       	and	r18, r24
 314:	39 23       	and	r19, r25
 316:	8b 81       	ldd	r24, Y+3	; 0x03
 318:	88 2f       	mov	r24, r24
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	a9 01       	movw	r20, r18
 31e:	02 c0       	rjmp	.+4      	; 0x324 <CLCD_u8WriteDataStr+0x5a>
 320:	55 95       	asr	r21
 322:	47 95       	ror	r20
 324:	8a 95       	dec	r24
 326:	e2 f7       	brpl	.-8      	; 0x320 <CLCD_u8WriteDataStr+0x56>
 328:	ca 01       	movw	r24, r20
 32a:	98 2f       	mov	r25, r24
 32c:	86 2f       	mov	r24, r22
 32e:	69 2f       	mov	r22, r25
 330:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_u8WritePinVal>
extern u8 CLCD_u8WriteDataStr(u8 *Copy_u8Data)
{
	u8 local_loopcount=0 ;
while(*Copy_u8Data)
{
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
 334:	8b 81       	ldd	r24, Y+3	; 0x03
 336:	8f 5f       	subi	r24, 0xFF	; 255
 338:	8b 83       	std	Y+3, r24	; 0x03
 33a:	8b 81       	ldd	r24, Y+3	; 0x03
 33c:	88 30       	cpi	r24, 0x08	; 8
 33e:	90 f2       	brcs	.-92     	; 0x2e4 <CLCD_u8WriteDataStr+0x1a>
	{
	DIO_u8WritePinVal(CLC_u8DataArr[local_loopcount],get_bit(*Copy_u8Data,local_loopcount));
	}

	DIO_u8WritePinVal(CLC_u8RS, DIO_u8HIGH);
 340:	8f e1       	ldi	r24, 0x1F	; 31
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8RW, DIO_u8LOW);
 348:	8e e1       	ldi	r24, 0x1E	; 30
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
 350:	8d e1       	ldi	r24, 0x1D	; 29
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_u8WritePinVal>
	DELAY(1);
 358:	1a 82       	std	Y+2, r1	; 0x02
 35a:	19 82       	std	Y+1, r1	; 0x01
 35c:	06 c0       	rjmp	.+12     	; 0x36a <CLCD_u8WriteDataStr+0xa0>
 35e:	00 00       	nop
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	9a 81       	ldd	r25, Y+2	; 0x02
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	9a 83       	std	Y+2, r25	; 0x02
 368:	89 83       	std	Y+1, r24	; 0x01
 36a:	89 81       	ldd	r24, Y+1	; 0x01
 36c:	9a 81       	ldd	r25, Y+2	; 0x02
 36e:	51 e0       	ldi	r21, 0x01	; 1
 370:	84 3f       	cpi	r24, 0xF4	; 244
 372:	95 07       	cpc	r25, r21
 374:	a0 f3       	brcs	.-24     	; 0x35e <CLCD_u8WriteDataStr+0x94>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
 376:	8d e1       	ldi	r24, 0x1D	; 29
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_u8WritePinVal>
	Copy_u8Data++ ;
 37e:	8c 81       	ldd	r24, Y+4	; 0x04
 380:	9d 81       	ldd	r25, Y+5	; 0x05
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	9d 83       	std	Y+5, r25	; 0x05
 386:	8c 83       	std	Y+4, r24	; 0x04
}

extern u8 CLCD_u8WriteDataStr(u8 *Copy_u8Data)
{
	u8 local_loopcount=0 ;
while(*Copy_u8Data)
 388:	ec 81       	ldd	r30, Y+4	; 0x04
 38a:	fd 81       	ldd	r31, Y+5	; 0x05
 38c:	80 81       	ld	r24, Z
 38e:	88 23       	and	r24, r24
 390:	09 f0       	breq	.+2      	; 0x394 <CLCD_u8WriteDataStr+0xca>
 392:	a6 cf       	rjmp	.-180    	; 0x2e0 <CLCD_u8WriteDataStr+0x16>
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
	DELAY(1);
	DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
	Copy_u8Data++ ;
	}
	return 0 ;
 394:	80 e0       	ldi	r24, 0x00	; 0
}
 396:	0f 90       	pop	r0
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	cf 91       	pop	r28
 3a2:	df 91       	pop	r29
 3a4:	08 95       	ret

000003a6 <CLCD_u8ReadBF>:
extern u8 CLCD_u8ReadBF(u8 *Copy_u8BF)
{
 3a6:	df 93       	push	r29
 3a8:	cf 93       	push	r28
 3aa:	00 d0       	rcall	.+0      	; 0x3ac <CLCD_u8ReadBF+0x6>
 3ac:	00 d0       	rcall	.+0      	; 0x3ae <CLCD_u8ReadBF+0x8>
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	9c 83       	std	Y+4, r25	; 0x04
 3b4:	8b 83       	std	Y+3, r24	; 0x03
	DIO_u8WritePinVal(CLC_u8RS, DIO_u8LOW);
 3b6:	8f e1       	ldi	r24, 0x1F	; 31
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_u8WritePinVal>
	DIO_u8WritePinVal(CLC_u8RW, DIO_u8HIGH);
 3be:	8e e1       	ldi	r24, 0x1E	; 30
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <DIO_u8WritePinVal>
	//DIO_u8WritePinVal(CLC_u8EN, DIO_u8HIGH);
	DIO_u8WritePinDir(CLC_u8D7,DIO_u8LOW);
 3c6:	87 e1       	ldi	r24, 0x17	; 23
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_u8WritePinDir>
	DIO_u8ReadPinVal(CLC_u8D7,Copy_u8BF);
 3ce:	2b 81       	ldd	r18, Y+3	; 0x03
 3d0:	3c 81       	ldd	r19, Y+4	; 0x04
 3d2:	87 e1       	ldi	r24, 0x17	; 23
 3d4:	b9 01       	movw	r22, r18
 3d6:	0e 94 87 02 	call	0x50e	; 0x50e <DIO_u8ReadPinVal>
	DELAY(1);
 3da:	1a 82       	std	Y+2, r1	; 0x02
 3dc:	19 82       	std	Y+1, r1	; 0x01
 3de:	06 c0       	rjmp	.+12     	; 0x3ec <CLCD_u8ReadBF+0x46>
 3e0:	00 00       	nop
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	9a 81       	ldd	r25, Y+2	; 0x02
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	9a 83       	std	Y+2, r25	; 0x02
 3ea:	89 83       	std	Y+1, r24	; 0x01
 3ec:	89 81       	ldd	r24, Y+1	; 0x01
 3ee:	9a 81       	ldd	r25, Y+2	; 0x02
 3f0:	21 e0       	ldi	r18, 0x01	; 1
 3f2:	84 3f       	cpi	r24, 0xF4	; 244
 3f4:	92 07       	cpc	r25, r18
 3f6:	a0 f3       	brcs	.-24     	; 0x3e0 <CLCD_u8ReadBF+0x3a>
	//DIO_u8WritePinVal(CLC_u8EN, DIO_u8LOW);
	DIO_u8WritePinDir(CLC_u8D7,DIO_u8HIGH);
 3f8:	87 e1       	ldi	r24, 0x17	; 23
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_u8WritePinDir>

	return 0 ;
 400:	80 e0       	ldi	r24, 0x00	; 0
}
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	cf 91       	pop	r28
 40c:	df 91       	pop	r29
 40e:	08 95       	ret

00000410 <CLCD_u8WriteOnCGRam>:

extern u8 CLCD_u8WriteOnCGRam(u8 *Copy_u8Ptrn,u8 Copy_location)
{
 410:	df 93       	push	r29
 412:	cf 93       	push	r28
 414:	00 d0       	rcall	.+0      	; 0x416 <CLCD_u8WriteOnCGRam+0x6>
 416:	00 d0       	rcall	.+0      	; 0x418 <CLCD_u8WriteOnCGRam+0x8>
 418:	00 d0       	rcall	.+0      	; 0x41a <CLCD_u8WriteOnCGRam+0xa>
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	9b 83       	std	Y+3, r25	; 0x03
 420:	8a 83       	std	Y+2, r24	; 0x02
 422:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_loopcount ;
	CLCD_u8WriteComand((0x40+Copy_location*8));
 424:	8c 81       	ldd	r24, Y+4	; 0x04
 426:	88 2f       	mov	r24, r24
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	08 96       	adiw	r24, 0x08	; 8
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	0e 94 ad 00 	call	0x15a	; 0x15a <CLCD_u8WriteComand>
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
 43c:	19 82       	std	Y+1, r1	; 0x01
 43e:	0e c0       	rjmp	.+28     	; 0x45c <CLCD_u8WriteOnCGRam+0x4c>
	{
		CLCD_u8WriteDataChar(Copy_u8Ptrn[local_loopcount]);
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	28 2f       	mov	r18, r24
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	8a 81       	ldd	r24, Y+2	; 0x02
 448:	9b 81       	ldd	r25, Y+3	; 0x03
 44a:	fc 01       	movw	r30, r24
 44c:	e2 0f       	add	r30, r18
 44e:	f3 1f       	adc	r31, r19
 450:	80 81       	ld	r24, Z
 452:	0e 94 09 01 	call	0x212	; 0x212 <CLCD_u8WriteDataChar>

extern u8 CLCD_u8WriteOnCGRam(u8 *Copy_u8Ptrn,u8 Copy_location)
{
	u8 local_loopcount ;
	CLCD_u8WriteComand((0x40+Copy_location*8));
	for(local_loopcount=0 ; local_loopcount<8;local_loopcount++)
 456:	89 81       	ldd	r24, Y+1	; 0x01
 458:	8f 5f       	subi	r24, 0xFF	; 255
 45a:	89 83       	std	Y+1, r24	; 0x01
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	88 30       	cpi	r24, 0x08	; 8
 460:	78 f3       	brcs	.-34     	; 0x440 <CLCD_u8WriteOnCGRam+0x30>
	{
		CLCD_u8WriteDataChar(Copy_u8Ptrn[local_loopcount]);
	}


	return CHKerr[Copy_location<8]  ;
 462:	1e 82       	std	Y+6, r1	; 0x06
 464:	1d 82       	std	Y+5, r1	; 0x05
 466:	8c 81       	ldd	r24, Y+4	; 0x04
 468:	88 30       	cpi	r24, 0x08	; 8
 46a:	20 f4       	brcc	.+8      	; 0x474 <__stack+0x15>
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	9e 83       	std	Y+6, r25	; 0x06
 472:	8d 83       	std	Y+5, r24	; 0x05
 474:	ed 81       	ldd	r30, Y+5	; 0x05
 476:	fe 81       	ldd	r31, Y+6	; 0x06
 478:	ee 58       	subi	r30, 0x8E	; 142
 47a:	ff 4f       	sbci	r31, 0xFF	; 255
 47c:	80 81       	ld	r24, Z
}
 47e:	26 96       	adiw	r28, 0x06	; 6
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	f8 94       	cli
 484:	de bf       	out	0x3e, r29	; 62
 486:	0f be       	out	0x3f, r0	; 63
 488:	cd bf       	out	0x3d, r28	; 61
 48a:	cf 91       	pop	r28
 48c:	df 91       	pop	r29
 48e:	08 95       	ret

00000490 <DIO_voidInit>:
static  u8 * const DIO_u8Ddrs[]={DIO_u8DDRA ,DIO_u8DDRB, DIO_u8DDRC , DIO_u8DDRD} ;
static  u8 *const DIO_u8Pins[]={DIO_u8PINA ,DIO_u8PINB, DIO_u8PINC , DIO_u8PIND} ;


extern void DIO_voidInit(void)
{
 490:	df 93       	push	r29
 492:	cf 93       	push	r28
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62

/*Comment!:initializing Ports Directions */
*DIO_u8Ddrs[DIO_u8PORT0]=DIO_u8PORTA_DIR;
 498:	e0 91 7c 00 	lds	r30, 0x007C
 49c:	f0 91 7d 00 	lds	r31, 0x007D
 4a0:	8f ef       	ldi	r24, 0xFF	; 255
 4a2:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT1]=DIO_u8PORTB_DIR;
 4a4:	e0 91 7e 00 	lds	r30, 0x007E
 4a8:	f0 91 7f 00 	lds	r31, 0x007F
 4ac:	8f e8       	ldi	r24, 0x8F	; 143
 4ae:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT2]=DIO_u8PORTC_DIR;
 4b0:	e0 91 80 00 	lds	r30, 0x0080
 4b4:	f0 91 81 00 	lds	r31, 0x0081
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT3]=DIO_u8PORTD_DIR;
 4bc:	e0 91 82 00 	lds	r30, 0x0082
 4c0:	f0 91 83 00 	lds	r31, 0x0083
 4c4:	8e ef       	ldi	r24, 0xFE	; 254
 4c6:	80 83       	st	Z, r24

/*Comment!:initializing Ports Value  */
*DIO_u8Ports[DIO_u8PORT0] =(DIO_u8PORTA_DIR & DIO_u8PORTA_VAL) | ((~DIO_u8PORTA_DIR)&*DIO_u8Ports[DIO_u8PORT0] );
 4c8:	e0 91 74 00 	lds	r30, 0x0074
 4cc:	f0 91 75 00 	lds	r31, 0x0075
 4d0:	10 82       	st	Z, r1
*DIO_u8Ports[DIO_u8PORT1] =(DIO_u8PORTB_DIR & DIO_u8PORTB_VAL)| ((~DIO_u8PORTB_DIR)&*DIO_u8Ports[DIO_u8PORT1] );
 4d2:	a0 91 76 00 	lds	r26, 0x0076
 4d6:	b0 91 77 00 	lds	r27, 0x0077
 4da:	e0 91 76 00 	lds	r30, 0x0076
 4de:	f0 91 77 00 	lds	r31, 0x0077
 4e2:	80 81       	ld	r24, Z
 4e4:	80 77       	andi	r24, 0x70	; 112
 4e6:	8c 93       	st	X, r24
*DIO_u8Ports[DIO_u8PORT2] =(DIO_u8PORTC_DIR & DIO_u8PORTC_VAL)| ((~DIO_u8PORTC_DIR)&*DIO_u8Ports[DIO_u8PORT2] );
 4e8:	e0 91 78 00 	lds	r30, 0x0078
 4ec:	f0 91 79 00 	lds	r31, 0x0079
 4f0:	10 82       	st	Z, r1
*DIO_u8Ports[DIO_u8PORT3] =(DIO_u8PORTD_DIR & DIO_u8PORTD_VAL)| ((~DIO_u8PORTD_DIR)&*DIO_u8Ports[DIO_u8PORT3] );
 4f2:	a0 91 7a 00 	lds	r26, 0x007A
 4f6:	b0 91 7b 00 	lds	r27, 0x007B
 4fa:	e0 91 7a 00 	lds	r30, 0x007A
 4fe:	f0 91 7b 00 	lds	r31, 0x007B
 502:	80 81       	ld	r24, Z
 504:	81 70       	andi	r24, 0x01	; 1
 506:	8c 93       	st	X, r24

}
 508:	cf 91       	pop	r28
 50a:	df 91       	pop	r29
 50c:	08 95       	ret

0000050e <DIO_u8ReadPinVal>:


extern u8 DIO_u8ReadPinVal(u8 Copy_u8PinIdx,u8* Copy_u8PtrToval)
{
 50e:	df 93       	push	r29
 510:	cf 93       	push	r28
 512:	00 d0       	rcall	.+0      	; 0x514 <DIO_u8ReadPinVal+0x6>
 514:	00 d0       	rcall	.+0      	; 0x516 <DIO_u8ReadPinVal+0x8>
 516:	00 d0       	rcall	.+0      	; 0x518 <DIO_u8ReadPinVal+0xa>
 518:	cd b7       	in	r28, 0x3d	; 61
 51a:	de b7       	in	r29, 0x3e	; 62
 51c:	8c 83       	std	Y+4, r24	; 0x04
 51e:	7e 83       	std	Y+6, r23	; 0x06
 520:	6d 83       	std	Y+5, r22	; 0x05

	 u8 Local_u8CheckPinState=ok ;
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8PinIdx<DIO_u8PINMAXIDX)
 526:	8c 81       	ldd	r24, Y+4	; 0x04
 528:	8f 31       	cpi	r24, 0x1F	; 31
 52a:	80 f5       	brcc	.+96     	; 0x58c <DIO_u8ReadPinVal+0x7e>
	    {

		u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
 52c:	8c 81       	ldd	r24, Y+4	; 0x04
 52e:	86 95       	lsr	r24
 530:	86 95       	lsr	r24
 532:	86 95       	lsr	r24
 534:	8a 83       	std	Y+2, r24	; 0x02
		u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
 536:	8c 81       	ldd	r24, Y+4	; 0x04
 538:	87 70       	andi	r24, 0x07	; 7
 53a:	89 83       	std	Y+1, r24	; 0x01

		* Copy_u8PtrToval=get_bit(*DIO_u8Pins[local_u8CheckPinPlace],local_u8MapPin);
 53c:	8a 81       	ldd	r24, Y+2	; 0x02
 53e:	88 2f       	mov	r24, r24
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	fc 01       	movw	r30, r24
 548:	ec 57       	subi	r30, 0x7C	; 124
 54a:	ff 4f       	sbci	r31, 0xFF	; 255
 54c:	01 90       	ld	r0, Z+
 54e:	f0 81       	ld	r31, Z
 550:	e0 2d       	mov	r30, r0
 552:	80 81       	ld	r24, Z
 554:	48 2f       	mov	r20, r24
 556:	50 e0       	ldi	r21, 0x00	; 0
 558:	89 81       	ldd	r24, Y+1	; 0x01
 55a:	28 2f       	mov	r18, r24
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_u8ReadPinVal+0x5a>
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	2a 95       	dec	r18
 56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_u8ReadPinVal+0x56>
 56c:	9a 01       	movw	r18, r20
 56e:	28 23       	and	r18, r24
 570:	39 23       	and	r19, r25
 572:	89 81       	ldd	r24, Y+1	; 0x01
 574:	88 2f       	mov	r24, r24
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	a9 01       	movw	r20, r18
 57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_u8ReadPinVal+0x72>
 57c:	55 95       	asr	r21
 57e:	47 95       	ror	r20
 580:	8a 95       	dec	r24
 582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_u8ReadPinVal+0x6e>
 584:	ca 01       	movw	r24, r20
 586:	ed 81       	ldd	r30, Y+5	; 0x05
 588:	fe 81       	ldd	r31, Y+6	; 0x06
 58a:	80 83       	st	Z, r24
    }
    else
    {

    }
return    Local_u8CheckPinState=ok ;
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	8b 83       	std	Y+3, r24	; 0x03
 590:	8b 81       	ldd	r24, Y+3	; 0x03
}
 592:	26 96       	adiw	r28, 0x06	; 6
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	f8 94       	cli
 598:	de bf       	out	0x3e, r29	; 62
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	cd bf       	out	0x3d, r28	; 61
 59e:	cf 91       	pop	r28
 5a0:	df 91       	pop	r29
 5a2:	08 95       	ret

000005a4 <DIO_u8WritePinVal>:

extern u8 DIO_u8WritePinVal(u8 Copy_u8PinIdx,u8 Copy_u8Pinval)
{
 5a4:	df 93       	push	r29
 5a6:	cf 93       	push	r28
 5a8:	00 d0       	rcall	.+0      	; 0x5aa <DIO_u8WritePinVal+0x6>
 5aa:	00 d0       	rcall	.+0      	; 0x5ac <DIO_u8WritePinVal+0x8>
 5ac:	00 d0       	rcall	.+0      	; 0x5ae <DIO_u8WritePinVal+0xa>
 5ae:	cd b7       	in	r28, 0x3d	; 61
 5b0:	de b7       	in	r29, 0x3e	; 62
 5b2:	8d 83       	std	Y+5, r24	; 0x05
 5b4:	6e 83       	std	Y+6, r22	; 0x06
	 u8 Local_u8CheckPinState=ok ;
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	8c 83       	std	Y+4, r24	; 0x04

	    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
 5ba:	8d 81       	ldd	r24, Y+5	; 0x05
 5bc:	80 32       	cpi	r24, 0x20	; 32
 5be:	10 f0       	brcs	.+4      	; 0x5c4 <DIO_u8WritePinVal+0x20>
	    {
	    	 Local_u8CheckPinState=error ;
 5c0:	1c 82       	std	Y+4, r1	; 0x04
 5c2:	64 c0       	rjmp	.+200    	; 0x68c <DIO_u8WritePinVal+0xe8>
	    }
	    else
	    {
	    	 u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
 5c4:	8d 81       	ldd	r24, Y+5	; 0x05
 5c6:	86 95       	lsr	r24
 5c8:	86 95       	lsr	r24
 5ca:	86 95       	lsr	r24
 5cc:	8b 83       	std	Y+3, r24	; 0x03
	    		 u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
 5ce:	8d 81       	ldd	r24, Y+5	; 0x05
 5d0:	87 70       	andi	r24, 0x07	; 7
 5d2:	8a 83       	std	Y+2, r24	; 0x02
	    	     u8 local_u8PinDir;
	    	     local_u8PinDir=get_bit(*DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin);
 5d4:	8b 81       	ldd	r24, Y+3	; 0x03
 5d6:	88 2f       	mov	r24, r24
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	fc 01       	movw	r30, r24
 5e0:	e4 58       	subi	r30, 0x84	; 132
 5e2:	ff 4f       	sbci	r31, 0xFF	; 255
 5e4:	01 90       	ld	r0, Z+
 5e6:	f0 81       	ld	r31, Z
 5e8:	e0 2d       	mov	r30, r0
 5ea:	80 81       	ld	r24, Z
 5ec:	48 2f       	mov	r20, r24
 5ee:	50 e0       	ldi	r21, 0x00	; 0
 5f0:	8a 81       	ldd	r24, Y+2	; 0x02
 5f2:	28 2f       	mov	r18, r24
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_u8WritePinVal+0x5c>
 5fc:	88 0f       	add	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	2a 95       	dec	r18
 602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_u8WritePinVal+0x58>
 604:	9a 01       	movw	r18, r20
 606:	28 23       	and	r18, r24
 608:	39 23       	and	r19, r25
 60a:	8a 81       	ldd	r24, Y+2	; 0x02
 60c:	88 2f       	mov	r24, r24
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	a9 01       	movw	r20, r18
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_u8WritePinVal+0x74>
 614:	55 95       	asr	r21
 616:	47 95       	ror	r20
 618:	8a 95       	dec	r24
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_u8WritePinVal+0x70>
 61c:	ca 01       	movw	r24, r20
 61e:	89 83       	std	Y+1, r24	; 0x01
	    	if(local_u8PinDir==1)
 620:	89 81       	ldd	r24, Y+1	; 0x01
 622:	81 30       	cpi	r24, 0x01	; 1
 624:	99 f5       	brne	.+102    	; 0x68c <DIO_u8WritePinVal+0xe8>
	    	{
	    	assign_bit(*DIO_u8Ports[local_u8CheckPinPlace],local_u8MapPin,Copy_u8Pinval);
 626:	8b 81       	ldd	r24, Y+3	; 0x03
 628:	88 2f       	mov	r24, r24
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	fc 01       	movw	r30, r24
 632:	ec 58       	subi	r30, 0x8C	; 140
 634:	ff 4f       	sbci	r31, 0xFF	; 255
 636:	a0 81       	ld	r26, Z
 638:	b1 81       	ldd	r27, Z+1	; 0x01
 63a:	8a 81       	ldd	r24, Y+2	; 0x02
 63c:	28 2f       	mov	r18, r24
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_u8WritePinVal+0xa6>
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	2a 95       	dec	r18
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_u8WritePinVal+0xa2>
 64e:	28 2f       	mov	r18, r24
 650:	20 95       	com	r18
 652:	8b 81       	ldd	r24, Y+3	; 0x03
 654:	88 2f       	mov	r24, r24
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	fc 01       	movw	r30, r24
 65e:	ec 58       	subi	r30, 0x8C	; 140
 660:	ff 4f       	sbci	r31, 0xFF	; 255
 662:	01 90       	ld	r0, Z+
 664:	f0 81       	ld	r31, Z
 666:	e0 2d       	mov	r30, r0
 668:	80 81       	ld	r24, Z
 66a:	42 2f       	mov	r20, r18
 66c:	48 23       	and	r20, r24
 66e:	8e 81       	ldd	r24, Y+6	; 0x06
 670:	28 2f       	mov	r18, r24
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	8a 81       	ldd	r24, Y+2	; 0x02
 676:	88 2f       	mov	r24, r24
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	b9 01       	movw	r22, r18
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_u8WritePinVal+0xde>
 67e:	66 0f       	add	r22, r22
 680:	77 1f       	adc	r23, r23
 682:	8a 95       	dec	r24
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_u8WritePinVal+0xda>
 686:	cb 01       	movw	r24, r22
 688:	84 2b       	or	r24, r20
 68a:	8c 93       	st	X, r24
	    	{

	    	}
	    }

     return  Local_u8CheckPinState ;
 68c:	8c 81       	ldd	r24, Y+4	; 0x04
}
 68e:	26 96       	adiw	r28, 0x06	; 6
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	f8 94       	cli
 694:	de bf       	out	0x3e, r29	; 62
 696:	0f be       	out	0x3f, r0	; 63
 698:	cd bf       	out	0x3d, r28	; 61
 69a:	cf 91       	pop	r28
 69c:	df 91       	pop	r29
 69e:	08 95       	ret

000006a0 <DIO_u8ReadPortVal>:


extern u8 DIO_u8ReadPortVal(u8 Copy_u8PortIdx,u8* Copy_u8PtrToval)
{
 6a0:	df 93       	push	r29
 6a2:	cf 93       	push	r28
 6a4:	00 d0       	rcall	.+0      	; 0x6a6 <DIO_u8ReadPortVal+0x6>
 6a6:	00 d0       	rcall	.+0      	; 0x6a8 <DIO_u8ReadPortVal+0x8>
 6a8:	cd b7       	in	r28, 0x3d	; 61
 6aa:	de b7       	in	r29, 0x3e	; 62
 6ac:	8a 83       	std	Y+2, r24	; 0x02
 6ae:	7c 83       	std	Y+4, r23	; 0x04
 6b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CheckPortR=ok ;
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
 6b6:	8a 81       	ldd	r24, Y+2	; 0x02
 6b8:	84 30       	cpi	r24, 0x04	; 4
 6ba:	80 f4       	brcc	.+32     	; 0x6dc <DIO_u8ReadPortVal+0x3c>
	{

	* Copy_u8PtrToval=*DIO_u8Pins[Copy_u8PortIdx] ;
 6bc:	8a 81       	ldd	r24, Y+2	; 0x02
 6be:	88 2f       	mov	r24, r24
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	fc 01       	movw	r30, r24
 6c8:	ec 57       	subi	r30, 0x7C	; 124
 6ca:	ff 4f       	sbci	r31, 0xFF	; 255
 6cc:	01 90       	ld	r0, Z+
 6ce:	f0 81       	ld	r31, Z
 6d0:	e0 2d       	mov	r30, r0
 6d2:	80 81       	ld	r24, Z
 6d4:	eb 81       	ldd	r30, Y+3	; 0x03
 6d6:	fc 81       	ldd	r31, Y+4	; 0x04
 6d8:	80 83       	st	Z, r24
 6da:	01 c0       	rjmp	.+2      	; 0x6de <DIO_u8ReadPortVal+0x3e>
	}
	else
	{
		Local_u8CheckPortR=error ;
 6dc:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8CheckPortR ;
 6de:	89 81       	ldd	r24, Y+1	; 0x01
}
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
 6e4:	0f 90       	pop	r0
 6e6:	0f 90       	pop	r0
 6e8:	cf 91       	pop	r28
 6ea:	df 91       	pop	r29
 6ec:	08 95       	ret

000006ee <DIO_u8WritePortVal>:

extern u8 DIO_u8WritePortVal(u8 Copy_u8PortIdx,u8 Copy_u8Portval)
{
 6ee:	df 93       	push	r29
 6f0:	cf 93       	push	r28
 6f2:	00 d0       	rcall	.+0      	; 0x6f4 <DIO_u8WritePortVal+0x6>
 6f4:	00 d0       	rcall	.+0      	; 0x6f6 <DIO_u8WritePortVal+0x8>
 6f6:	cd b7       	in	r28, 0x3d	; 61
 6f8:	de b7       	in	r29, 0x3e	; 62
 6fa:	8b 83       	std	Y+3, r24	; 0x03
 6fc:	6c 83       	std	Y+4, r22	; 0x04
     	u8 Local_u8CheckPortR=ok ;
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	8a 83       	std	Y+2, r24	; 0x02
        u8 local_u8PortDir;
		if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
 702:	8b 81       	ldd	r24, Y+3	; 0x03
 704:	84 30       	cpi	r24, 0x04	; 4
 706:	f0 f4       	brcc	.+60     	; 0x744 <DIO_u8WritePortVal+0x56>
		{
				local_u8PortDir=*DIO_u8Ddrs[Copy_u8PortIdx] ;
 708:	8b 81       	ldd	r24, Y+3	; 0x03
 70a:	88 2f       	mov	r24, r24
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	fc 01       	movw	r30, r24
 714:	e4 58       	subi	r30, 0x84	; 132
 716:	ff 4f       	sbci	r31, 0xFF	; 255
 718:	01 90       	ld	r0, Z+
 71a:	f0 81       	ld	r31, Z
 71c:	e0 2d       	mov	r30, r0
 71e:	80 81       	ld	r24, Z
 720:	89 83       	std	Y+1, r24	; 0x01
			  if(local_u8PortDir==0xff)
 722:	89 81       	ldd	r24, Y+1	; 0x01
 724:	8f 3f       	cpi	r24, 0xFF	; 255
 726:	79 f4       	brne	.+30     	; 0x746 <DIO_u8WritePortVal+0x58>
			  {
		        *DIO_u8Ports[Copy_u8PortIdx]= Copy_u8Portval;
 728:	8b 81       	ldd	r24, Y+3	; 0x03
 72a:	88 2f       	mov	r24, r24
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	88 0f       	add	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	fc 01       	movw	r30, r24
 734:	ec 58       	subi	r30, 0x8C	; 140
 736:	ff 4f       	sbci	r31, 0xFF	; 255
 738:	01 90       	ld	r0, Z+
 73a:	f0 81       	ld	r31, Z
 73c:	e0 2d       	mov	r30, r0
 73e:	8c 81       	ldd	r24, Y+4	; 0x04
 740:	80 83       	st	Z, r24
 742:	01 c0       	rjmp	.+2      	; 0x746 <DIO_u8WritePortVal+0x58>

			  }
		}
		else
		{
			Local_u8CheckPortR=error ;
 744:	1a 82       	std	Y+2, r1	; 0x02
		}

		return Local_u8CheckPortR ;
 746:	8a 81       	ldd	r24, Y+2	; 0x02
}
 748:	0f 90       	pop	r0
 74a:	0f 90       	pop	r0
 74c:	0f 90       	pop	r0
 74e:	0f 90       	pop	r0
 750:	cf 91       	pop	r28
 752:	df 91       	pop	r29
 754:	08 95       	ret

00000756 <DIO_u8WritePinDir>:

extern u8 DIO_u8WritePinDir(u8 Copy_u8PinIdx,u8 Copy_u8PinDir)
{
 756:	df 93       	push	r29
 758:	cf 93       	push	r28
 75a:	00 d0       	rcall	.+0      	; 0x75c <DIO_u8WritePinDir+0x6>
 75c:	00 d0       	rcall	.+0      	; 0x75e <DIO_u8WritePinDir+0x8>
 75e:	0f 92       	push	r0
 760:	cd b7       	in	r28, 0x3d	; 61
 762:	de b7       	in	r29, 0x3e	; 62
 764:	8c 83       	std	Y+4, r24	; 0x04
 766:	6d 83       	std	Y+5, r22	; 0x05
	     u8 Local_u8CheckPinState=ok ;
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	8b 83       	std	Y+3, r24	; 0x03

		    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
 76c:	8c 81       	ldd	r24, Y+4	; 0x04
 76e:	80 32       	cpi	r24, 0x20	; 32
 770:	10 f0       	brcs	.+4      	; 0x776 <DIO_u8WritePinDir+0x20>
		    {
		    	 Local_u8CheckPinState=error ;
 772:	1b 82       	std	Y+3, r1	; 0x03
 774:	3b c0       	rjmp	.+118    	; 0x7ec <DIO_u8WritePinDir+0x96>
		    }
		    else
		    {
		    	u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
 776:	8c 81       	ldd	r24, Y+4	; 0x04
 778:	86 95       	lsr	r24
 77a:	86 95       	lsr	r24
 77c:	86 95       	lsr	r24
 77e:	8a 83       	std	Y+2, r24	; 0x02
		    	u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
 780:	8c 81       	ldd	r24, Y+4	; 0x04
 782:	87 70       	andi	r24, 0x07	; 7
 784:	89 83       	std	Y+1, r24	; 0x01
		    	assign_bit(* DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin,Copy_u8PinDir);
 786:	8a 81       	ldd	r24, Y+2	; 0x02
 788:	88 2f       	mov	r24, r24
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	fc 01       	movw	r30, r24
 792:	e4 58       	subi	r30, 0x84	; 132
 794:	ff 4f       	sbci	r31, 0xFF	; 255
 796:	a0 81       	ld	r26, Z
 798:	b1 81       	ldd	r27, Z+1	; 0x01
 79a:	89 81       	ldd	r24, Y+1	; 0x01
 79c:	28 2f       	mov	r18, r24
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <DIO_u8WritePinDir+0x54>
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	2a 95       	dec	r18
 7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <DIO_u8WritePinDir+0x50>
 7ae:	28 2f       	mov	r18, r24
 7b0:	20 95       	com	r18
 7b2:	8a 81       	ldd	r24, Y+2	; 0x02
 7b4:	88 2f       	mov	r24, r24
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	88 0f       	add	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	fc 01       	movw	r30, r24
 7be:	e4 58       	subi	r30, 0x84	; 132
 7c0:	ff 4f       	sbci	r31, 0xFF	; 255
 7c2:	01 90       	ld	r0, Z+
 7c4:	f0 81       	ld	r31, Z
 7c6:	e0 2d       	mov	r30, r0
 7c8:	80 81       	ld	r24, Z
 7ca:	42 2f       	mov	r20, r18
 7cc:	48 23       	and	r20, r24
 7ce:	8d 81       	ldd	r24, Y+5	; 0x05
 7d0:	28 2f       	mov	r18, r24
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	89 81       	ldd	r24, Y+1	; 0x01
 7d6:	88 2f       	mov	r24, r24
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	b9 01       	movw	r22, r18
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <DIO_u8WritePinDir+0x8c>
 7de:	66 0f       	add	r22, r22
 7e0:	77 1f       	adc	r23, r23
 7e2:	8a 95       	dec	r24
 7e4:	e2 f7       	brpl	.-8      	; 0x7de <DIO_u8WritePinDir+0x88>
 7e6:	cb 01       	movw	r24, r22
 7e8:	84 2b       	or	r24, r20
 7ea:	8c 93       	st	X, r24
		    }

	     return  Local_u8CheckPinState ;
 7ec:	8b 81       	ldd	r24, Y+3	; 0x03
}
 7ee:	0f 90       	pop	r0
 7f0:	0f 90       	pop	r0
 7f2:	0f 90       	pop	r0
 7f4:	0f 90       	pop	r0
 7f6:	0f 90       	pop	r0
 7f8:	cf 91       	pop	r28
 7fa:	df 91       	pop	r29
 7fc:	08 95       	ret

000007fe <DIO_u8WritePortDir>:

extern u8 DIO_u8WritePortDir(u8 Copy_u8PortIdx,u8 Copy_u8PortDir)
{
 7fe:	df 93       	push	r29
 800:	cf 93       	push	r28
 802:	00 d0       	rcall	.+0      	; 0x804 <DIO_u8WritePortDir+0x6>
 804:	0f 92       	push	r0
 806:	cd b7       	in	r28, 0x3d	; 61
 808:	de b7       	in	r29, 0x3e	; 62
 80a:	8a 83       	std	Y+2, r24	; 0x02
 80c:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8CheckPortR=ok ;
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	89 83       	std	Y+1, r24	; 0x01

			if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
 812:	8a 81       	ldd	r24, Y+2	; 0x02
 814:	84 30       	cpi	r24, 0x04	; 4
 816:	70 f4       	brcc	.+28     	; 0x834 <DIO_u8WritePortDir+0x36>
			{

			*DIO_u8Ddrs[Copy_u8PortIdx]= Copy_u8PortDir;
 818:	8a 81       	ldd	r24, Y+2	; 0x02
 81a:	88 2f       	mov	r24, r24
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	88 0f       	add	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	fc 01       	movw	r30, r24
 824:	e4 58       	subi	r30, 0x84	; 132
 826:	ff 4f       	sbci	r31, 0xFF	; 255
 828:	01 90       	ld	r0, Z+
 82a:	f0 81       	ld	r31, Z
 82c:	e0 2d       	mov	r30, r0
 82e:	8b 81       	ldd	r24, Y+3	; 0x03
 830:	80 83       	st	Z, r24
 832:	01 c0       	rjmp	.+2      	; 0x836 <DIO_u8WritePortDir+0x38>
			}
			else
			{
				Local_u8CheckPortR=error ;
 834:	19 82       	std	Y+1, r1	; 0x01
			}

			return Local_u8CheckPortR ;
 836:	89 81       	ldd	r24, Y+1	; 0x01
}
 838:	0f 90       	pop	r0
 83a:	0f 90       	pop	r0
 83c:	0f 90       	pop	r0
 83e:	cf 91       	pop	r28
 840:	df 91       	pop	r29
 842:	08 95       	ret

00000844 <DIO_u8ReadPinDir>:

extern u8 DIO_u8ReadPinDir(u8 Copy_u8PinIdx,u8 * Copy_u8PtrToDir)
{
 844:	df 93       	push	r29
 846:	cf 93       	push	r28
 848:	00 d0       	rcall	.+0      	; 0x84a <DIO_u8ReadPinDir+0x6>
 84a:	00 d0       	rcall	.+0      	; 0x84c <DIO_u8ReadPinDir+0x8>
 84c:	00 d0       	rcall	.+0      	; 0x84e <DIO_u8ReadPinDir+0xa>
 84e:	cd b7       	in	r28, 0x3d	; 61
 850:	de b7       	in	r29, 0x3e	; 62
 852:	8c 83       	std	Y+4, r24	; 0x04
 854:	7e 83       	std	Y+6, r23	; 0x06
 856:	6d 83       	std	Y+5, r22	; 0x05
	 u8 Local_u8CheckPinState=ok ;
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	8b 83       	std	Y+3, r24	; 0x03


	    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
 85c:	8c 81       	ldd	r24, Y+4	; 0x04
 85e:	80 32       	cpi	r24, 0x20	; 32
 860:	10 f0       	brcs	.+4      	; 0x866 <DIO_u8ReadPinDir+0x22>
	    {
	    	 Local_u8CheckPinState=error ;
 862:	1b 82       	std	Y+3, r1	; 0x03
 864:	30 c0       	rjmp	.+96     	; 0x8c6 <DIO_u8ReadPinDir+0x82>
	    }
	    else
	    {
	    	u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS;
 866:	8c 81       	ldd	r24, Y+4	; 0x04
 868:	86 95       	lsr	r24
 86a:	86 95       	lsr	r24
 86c:	86 95       	lsr	r24
 86e:	8a 83       	std	Y+2, r24	; 0x02
	    		 u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
 870:	8c 81       	ldd	r24, Y+4	; 0x04
 872:	87 70       	andi	r24, 0x07	; 7
 874:	89 83       	std	Y+1, r24	; 0x01
	    	* Copy_u8PtrToDir=get_bit(*DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin);
 876:	8a 81       	ldd	r24, Y+2	; 0x02
 878:	88 2f       	mov	r24, r24
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	88 0f       	add	r24, r24
 87e:	99 1f       	adc	r25, r25
 880:	fc 01       	movw	r30, r24
 882:	e4 58       	subi	r30, 0x84	; 132
 884:	ff 4f       	sbci	r31, 0xFF	; 255
 886:	01 90       	ld	r0, Z+
 888:	f0 81       	ld	r31, Z
 88a:	e0 2d       	mov	r30, r0
 88c:	80 81       	ld	r24, Z
 88e:	48 2f       	mov	r20, r24
 890:	50 e0       	ldi	r21, 0x00	; 0
 892:	89 81       	ldd	r24, Y+1	; 0x01
 894:	28 2f       	mov	r18, r24
 896:	30 e0       	ldi	r19, 0x00	; 0
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <DIO_u8ReadPinDir+0x5e>
 89e:	88 0f       	add	r24, r24
 8a0:	99 1f       	adc	r25, r25
 8a2:	2a 95       	dec	r18
 8a4:	e2 f7       	brpl	.-8      	; 0x89e <DIO_u8ReadPinDir+0x5a>
 8a6:	9a 01       	movw	r18, r20
 8a8:	28 23       	and	r18, r24
 8aa:	39 23       	and	r19, r25
 8ac:	89 81       	ldd	r24, Y+1	; 0x01
 8ae:	88 2f       	mov	r24, r24
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	a9 01       	movw	r20, r18
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <DIO_u8ReadPinDir+0x76>
 8b6:	55 95       	asr	r21
 8b8:	47 95       	ror	r20
 8ba:	8a 95       	dec	r24
 8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <DIO_u8ReadPinDir+0x72>
 8be:	ca 01       	movw	r24, r20
 8c0:	ed 81       	ldd	r30, Y+5	; 0x05
 8c2:	fe 81       	ldd	r31, Y+6	; 0x06
 8c4:	80 83       	st	Z, r24
	    }
	return  Local_u8CheckPinState ;
 8c6:	8b 81       	ldd	r24, Y+3	; 0x03
}
 8c8:	26 96       	adiw	r28, 0x06	; 6
 8ca:	0f b6       	in	r0, 0x3f	; 63
 8cc:	f8 94       	cli
 8ce:	de bf       	out	0x3e, r29	; 62
 8d0:	0f be       	out	0x3f, r0	; 63
 8d2:	cd bf       	out	0x3d, r28	; 61
 8d4:	cf 91       	pop	r28
 8d6:	df 91       	pop	r29
 8d8:	08 95       	ret

000008da <DIO_u8ReadPortDir>:

extern u8 DIO_u8ReadPortDir(u8 Copy_u8PortIdx,u8 *Copy_u8PtrToDir)
{
 8da:	df 93       	push	r29
 8dc:	cf 93       	push	r28
 8de:	00 d0       	rcall	.+0      	; 0x8e0 <DIO_u8ReadPortDir+0x6>
 8e0:	00 d0       	rcall	.+0      	; 0x8e2 <DIO_u8ReadPortDir+0x8>
 8e2:	cd b7       	in	r28, 0x3d	; 61
 8e4:	de b7       	in	r29, 0x3e	; 62
 8e6:	8a 83       	std	Y+2, r24	; 0x02
 8e8:	7c 83       	std	Y+4, r23	; 0x04
 8ea:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CheckPortR=ok ;
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
 8f0:	8a 81       	ldd	r24, Y+2	; 0x02
 8f2:	84 30       	cpi	r24, 0x04	; 4
 8f4:	80 f4       	brcc	.+32     	; 0x916 <DIO_u8ReadPortDir+0x3c>
		{

		* Copy_u8PtrToDir=*DIO_u8Pins[Copy_u8PortIdx] ;
 8f6:	8a 81       	ldd	r24, Y+2	; 0x02
 8f8:	88 2f       	mov	r24, r24
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	88 0f       	add	r24, r24
 8fe:	99 1f       	adc	r25, r25
 900:	fc 01       	movw	r30, r24
 902:	ec 57       	subi	r30, 0x7C	; 124
 904:	ff 4f       	sbci	r31, 0xFF	; 255
 906:	01 90       	ld	r0, Z+
 908:	f0 81       	ld	r31, Z
 90a:	e0 2d       	mov	r30, r0
 90c:	80 81       	ld	r24, Z
 90e:	eb 81       	ldd	r30, Y+3	; 0x03
 910:	fc 81       	ldd	r31, Y+4	; 0x04
 912:	80 83       	st	Z, r24
 914:	01 c0       	rjmp	.+2      	; 0x918 <DIO_u8ReadPortDir+0x3e>
		}
		else
		{
			Local_u8CheckPortR=error ;
 916:	19 82       	std	Y+1, r1	; 0x01
		}

		return Local_u8CheckPortR ;
 918:	89 81       	ldd	r24, Y+1	; 0x01
}
 91a:	0f 90       	pop	r0
 91c:	0f 90       	pop	r0
 91e:	0f 90       	pop	r0
 920:	0f 90       	pop	r0
 922:	cf 91       	pop	r28
 924:	df 91       	pop	r29
 926:	08 95       	ret

00000928 <USART_Init>:
#include "UART_config.h"
#include "UART_private.h"
#include "DIO_utilites.h"

void USART_Init(void )
{
 928:	df 93       	push	r29
 92a:	cf 93       	push	r28
 92c:	cd b7       	in	r28, 0x3d	; 61
 92e:	de b7       	in	r29, 0x3e	; 62

/* Set baud rate */
	UART_UBRRH = (u8)(BAUDRATE>>8); // writing on ubrh fitrst is mandatory because after reading ubrrl it trigers  the controller  to ubdate the baud rate immidiatlly
 930:	e0 e4       	ldi	r30, 0x40	; 64
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	10 82       	st	Z, r1
	UART_UBRRL = (u8)BAUDRATE;
 936:	e9 e2       	ldi	r30, 0x29	; 41
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	89 e1       	ldi	r24, 0x19	; 25
 93c:	80 83       	st	Z, r24

	UART_UCSRA|=UCSRBA_u8INIT ;
 93e:	ab e2       	ldi	r26, 0x2B	; 43
 940:	b0 e0       	ldi	r27, 0x00	; 0
 942:	eb e2       	ldi	r30, 0x2B	; 43
 944:	f0 e0       	ldi	r31, 0x00	; 0
 946:	80 81       	ld	r24, Z
 948:	8c 93       	st	X, r24

	UART_UCSRB = UCSRB_u8INIT ;
 94a:	ea e2       	ldi	r30, 0x2A	; 42
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	8c ed       	ldi	r24, 0xDC	; 220
 950:	80 83       	st	Z, r24

//UCSRC=(u8)(1<<UMSEL); // switching the register to be UCSRC
	UART_UCSRC = UCSRC_u8INIT ;
 952:	e0 e4       	ldi	r30, 0x40	; 64
 954:	f0 e0       	ldi	r31, 0x00	; 0
 956:	8e e8       	ldi	r24, 0x8E	; 142
 958:	80 83       	st	Z, r24
}
 95a:	cf 91       	pop	r28
 95c:	df 91       	pop	r29
 95e:	08 95       	ret

00000960 <USART_Transmit>:


void USART_Transmit( u16 Copy_u8Transdata )
{
 960:	df 93       	push	r29
 962:	cf 93       	push	r28
 964:	00 d0       	rcall	.+0      	; 0x966 <USART_Transmit+0x6>
 966:	cd b7       	in	r28, 0x3d	; 61
 968:	de b7       	in	r29, 0x3e	; 62
 96a:	9a 83       	std	Y+2, r25	; 0x02
 96c:	89 83       	std	Y+1, r24	; 0x01

/* Wait for empty transmit buffer */
while ( !( UART_UCSRA & (1<<UDRE)) );
 96e:	eb e2       	ldi	r30, 0x2B	; 43
 970:	f0 e0       	ldi	r31, 0x00	; 0
 972:	80 81       	ld	r24, Z
 974:	88 2f       	mov	r24, r24
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	80 72       	andi	r24, 0x20	; 32
 97a:	90 70       	andi	r25, 0x00	; 0
 97c:	00 97       	sbiw	r24, 0x00	; 0
 97e:	b9 f3       	breq	.-18     	; 0x96e <USART_Transmit+0xe>
/* Put data into buffer, sends the data */
#if(UART_u8DATABITS==UART_9_DATABIT)
Copy_u8Transdata&=0x1F ;
 980:	89 81       	ldd	r24, Y+1	; 0x01
 982:	9a 81       	ldd	r25, Y+2	; 0x02
 984:	8f 71       	andi	r24, 0x1F	; 31
 986:	90 70       	andi	r25, 0x00	; 0
 988:	9a 83       	std	Y+2, r25	; 0x02
 98a:	89 83       	std	Y+1, r24	; 0x01
UART_UCSRB&=0xFE ;
 98c:	aa e2       	ldi	r26, 0x2A	; 42
 98e:	b0 e0       	ldi	r27, 0x00	; 0
 990:	ea e2       	ldi	r30, 0x2A	; 42
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	80 81       	ld	r24, Z
 996:	8e 7f       	andi	r24, 0xFE	; 254
 998:	8c 93       	st	X, r24
UART_UCSRB|=(Copy_u8Transdata>>8);
 99a:	aa e2       	ldi	r26, 0x2A	; 42
 99c:	b0 e0       	ldi	r27, 0x00	; 0
 99e:	ea e2       	ldi	r30, 0x2A	; 42
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	20 81       	ld	r18, Z
 9a4:	89 81       	ldd	r24, Y+1	; 0x01
 9a6:	9a 81       	ldd	r25, Y+2	; 0x02
 9a8:	89 2f       	mov	r24, r25
 9aa:	99 27       	eor	r25, r25
 9ac:	82 2b       	or	r24, r18
 9ae:	8c 93       	st	X, r24
UART_UDR = (u8)(Copy_u8Transdata);
 9b0:	ec e2       	ldi	r30, 0x2C	; 44
 9b2:	f0 e0       	ldi	r31, 0x00	; 0
 9b4:	89 81       	ldd	r24, Y+1	; 0x01
 9b6:	80 83       	st	Z, r24
#else
UART_UDR = Copy_u8Transdata;
#endif

return ;
}
 9b8:	0f 90       	pop	r0
 9ba:	0f 90       	pop	r0
 9bc:	cf 91       	pop	r28
 9be:	df 91       	pop	r29
 9c0:	08 95       	ret

000009c2 <USART_Receive>:

void USART_Receive( u16 *Copy_RecieveData )
{
 9c2:	df 93       	push	r29
 9c4:	cf 93       	push	r28
 9c6:	00 d0       	rcall	.+0      	; 0x9c8 <USART_Receive+0x6>
 9c8:	0f 92       	push	r0
 9ca:	cd b7       	in	r28, 0x3d	; 61
 9cc:	de b7       	in	r29, 0x3e	; 62
 9ce:	9b 83       	std	Y+3, r25	; 0x03
 9d0:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Read9Bit=0 ;
 9d2:	19 82       	std	Y+1, r1	; 0x01
	*Copy_RecieveData=0 ;
 9d4:	ea 81       	ldd	r30, Y+2	; 0x02
 9d6:	fb 81       	ldd	r31, Y+3	; 0x03
 9d8:	11 82       	std	Z+1, r1	; 0x01
 9da:	10 82       	st	Z, r1
/* Wait for data to be received */
while ( !(UART_UCSRA & (1<<RXC)) );
 9dc:	eb e2       	ldi	r30, 0x2B	; 43
 9de:	f0 e0       	ldi	r31, 0x00	; 0
 9e0:	80 81       	ld	r24, Z
 9e2:	88 23       	and	r24, r24
 9e4:	dc f7       	brge	.-10     	; 0x9dc <USART_Receive+0x1a>
/* Get and return received data from buffer */
#if(UART_u8DATABITS==UART_9_DATABIT)
Local_u8Read9Bit= get_bit(UART_UCSRB,1) ;
 9e6:	ea e2       	ldi	r30, 0x2A	; 42
 9e8:	f0 e0       	ldi	r31, 0x00	; 0
 9ea:	80 81       	ld	r24, Z
 9ec:	88 2f       	mov	r24, r24
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	82 70       	andi	r24, 0x02	; 2
 9f2:	90 70       	andi	r25, 0x00	; 0
 9f4:	95 95       	asr	r25
 9f6:	87 95       	ror	r24
 9f8:	89 83       	std	Y+1, r24	; 0x01
*Copy_RecieveData=(Local_u8Read9Bit<<8) ;
 9fa:	89 81       	ldd	r24, Y+1	; 0x01
 9fc:	88 2f       	mov	r24, r24
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	98 2f       	mov	r25, r24
 a02:	88 27       	eor	r24, r24
 a04:	ea 81       	ldd	r30, Y+2	; 0x02
 a06:	fb 81       	ldd	r31, Y+3	; 0x03
 a08:	91 83       	std	Z+1, r25	; 0x01
 a0a:	80 83       	st	Z, r24
*Copy_RecieveData|=(u16)UART_UDR ;
 a0c:	ea 81       	ldd	r30, Y+2	; 0x02
 a0e:	fb 81       	ldd	r31, Y+3	; 0x03
 a10:	20 81       	ld	r18, Z
 a12:	31 81       	ldd	r19, Z+1	; 0x01
 a14:	ec e2       	ldi	r30, 0x2C	; 44
 a16:	f0 e0       	ldi	r31, 0x00	; 0
 a18:	80 81       	ld	r24, Z
 a1a:	88 2f       	mov	r24, r24
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	82 2b       	or	r24, r18
 a20:	93 2b       	or	r25, r19
 a22:	ea 81       	ldd	r30, Y+2	; 0x02
 a24:	fb 81       	ldd	r31, Y+3	; 0x03
 a26:	91 83       	std	Z+1, r25	; 0x01
 a28:	80 83       	st	Z, r24
#else
*Copy_RecieveData =UART_UDR ;
#endif
return ;

}
 a2a:	0f 90       	pop	r0
 a2c:	0f 90       	pop	r0
 a2e:	0f 90       	pop	r0
 a30:	cf 91       	pop	r28
 a32:	df 91       	pop	r29
 a34:	08 95       	ret

00000a36 <main>:

u8 Tx[10]="M" ,Rx[10];
void trans(void);
void receive(void);
void main (void)
{
 a36:	df 93       	push	r29
 a38:	cf 93       	push	r28
 a3a:	cd b7       	in	r28, 0x3d	; 61
 a3c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
 a3e:	0e 94 48 02 	call	0x490	; 0x490 <DIO_voidInit>
	CLC_voidInit();
 a42:	0e 94 49 00 	call	0x92	; 0x92 <CLC_voidInit>
	USART_Init();
 a46:	0e 94 94 04 	call	0x928	; 0x928 <USART_Init>

	while(1)
	{
		trans();
 a4a:	0e 94 28 05 	call	0xa50	; 0xa50 <trans>
 a4e:	fd cf       	rjmp	.-6      	; 0xa4a <main+0x14>

00000a50 <trans>:
	}
}

void trans(void)
{
 a50:	df 93       	push	r29
 a52:	cf 93       	push	r28
 a54:	00 d0       	rcall	.+0      	; 0xa56 <trans+0x6>
 a56:	cd b7       	in	r28, 0x3d	; 61
 a58:	de b7       	in	r29, 0x3e	; 62
	USART_Transmit(Tx[0]);
 a5a:	80 91 60 00 	lds	r24, 0x0060
 a5e:	88 2f       	mov	r24, r24
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	0e 94 b0 04 	call	0x960	; 0x960 <USART_Transmit>
	DELAY(100);
 a66:	1a 82       	std	Y+2, r1	; 0x02
 a68:	19 82       	std	Y+1, r1	; 0x01
 a6a:	06 c0       	rjmp	.+12     	; 0xa78 <trans+0x28>
 a6c:	00 00       	nop
 a6e:	89 81       	ldd	r24, Y+1	; 0x01
 a70:	9a 81       	ldd	r25, Y+2	; 0x02
 a72:	01 96       	adiw	r24, 0x01	; 1
 a74:	9a 83       	std	Y+2, r25	; 0x02
 a76:	89 83       	std	Y+1, r24	; 0x01
 a78:	89 81       	ldd	r24, Y+1	; 0x01
 a7a:	9a 81       	ldd	r25, Y+2	; 0x02
 a7c:	23 ec       	ldi	r18, 0xC3	; 195
 a7e:	80 35       	cpi	r24, 0x50	; 80
 a80:	92 07       	cpc	r25, r18
 a82:	a0 f3       	brcs	.-24     	; 0xa6c <trans+0x1c>
//	Rx[0]=USART_Receive() ;
	CLCD_u8WriteDataChar(Rx[0]);
 a84:	80 91 8c 00 	lds	r24, 0x008C
 a88:	0e 94 09 01 	call	0x212	; 0x212 <CLCD_u8WriteDataChar>
}
 a8c:	0f 90       	pop	r0
 a8e:	0f 90       	pop	r0
 a90:	cf 91       	pop	r28
 a92:	df 91       	pop	r29
 a94:	08 95       	ret

00000a96 <receive>:

void receive(void)
{
 a96:	df 93       	push	r29
 a98:	cf 93       	push	r28
 a9a:	cd b7       	in	r28, 0x3d	; 61
 a9c:	de b7       	in	r29, 0x3e	; 62
	//Rx[1]=USART_Receive() ;

	//DELAY(100);
	if(Rx[1]=='M')
 a9e:	80 91 8d 00 	lds	r24, 0x008D
 aa2:	8d 34       	cpi	r24, 0x4D	; 77
 aa4:	31 f4       	brne	.+12     	; 0xab2 <receive+0x1c>
	{
	USART_Transmit(Tx[0]);
 aa6:	80 91 60 00 	lds	r24, 0x0060
 aaa:	88 2f       	mov	r24, r24
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	0e 94 b0 04 	call	0x960	; 0x960 <USART_Transmit>
	//CLCD_u8WriteDataChar(Rx[0]);
	}
}
 ab2:	cf 91       	pop	r28
 ab4:	df 91       	pop	r29
 ab6:	08 95       	ret

00000ab8 <_exit>:
 ab8:	f8 94       	cli

00000aba <__stop_program>:
 aba:	ff cf       	rjmp	.-2      	; 0xaba <__stop_program>
