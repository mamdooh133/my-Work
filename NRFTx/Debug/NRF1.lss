
NRF1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  000017d0  00001864  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800090  00800090  00001894  2**0
                  ALLOC
  3 .stab         00001908  00000000  00000000  00001894  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d7a  00000000  00000000  0000319c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00003f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004056  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000041c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00005e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00006cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00007e95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008663  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8_t tx_address[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
uint8_t rx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};
uint32_t x ;
/* ------------------------------------------------------------------------- */
int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61


    /* init hardware pins */
    nrf24_init();
     b5a:	0e 94 a1 08 	call	0x1142	; 0x1142 <nrf24_init>
    
    /* Channel #2 , payload length: 4 */
    nrf24_config(2,4);
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	64 e0       	ldi	r22, 0x04	; 4
     b62:	0e 94 b2 08 	call	0x1164	; 0x1164 <nrf24_config>

    /* Set the device addresses */
    nrf24_tx_address(tx_address);
     b66:	8d e6       	ldi	r24, 0x6D	; 109
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 1d 09 	call	0x123a	; 0x123a <nrf24_tx_address>
    nrf24_rx_address(rx_address);    
     b6e:	82 e7       	ldi	r24, 0x72	; 114
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <nrf24_rx_address>

    while(1)
    {                
        /* Fill the data buffer */
        data_array[0] = q;
     b76:	80 91 68 00 	lds	r24, 0x0068
     b7a:	80 93 95 00 	sts	0x0095, r24
        data_array[1] = q;
     b7e:	80 91 68 00 	lds	r24, 0x0068
     b82:	80 93 96 00 	sts	0x0096, r24
        data_array[2] = q;
     b86:	80 91 68 00 	lds	r24, 0x0068
     b8a:	80 93 97 00 	sts	0x0097, r24
        data_array[3] = q;
     b8e:	80 91 68 00 	lds	r24, 0x0068
     b92:	80 93 98 00 	sts	0x0098, r24
//
//        /* Automatically goes to TX mode */

        nrf24_send(data_array);
     b96:	85 e9       	ldi	r24, 0x95	; 149
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 bc 09 	call	0x1378	; 0x1378 <nrf24_send>

        /* Wait for transmission to end */
        while(nrf24_isSending());
     b9e:	0e 94 ef 09 	call	0x13de	; 0x13de <nrf24_isSending>
     ba2:	88 23       	and	r24, r24
     ba4:	e1 f7       	brne	.-8      	; 0xb9e <main+0x58>

        /* Make analysis on last tranmission attempt */
        temp = nrf24_lastMessageStatus();
     ba6:	0e 94 1e 0a 	call	0x143c	; 0x143c <nrf24_lastMessageStatus>
     baa:	80 93 94 00 	sts	0x0094, r24

        if(temp == NRF24_TRANSMISSON_OK)
     bae:	80 91 94 00 	lds	r24, 0x0094
        {                    

        }
        
		/* Retranmission count indicates the tranmission quality */
		temp = nrf24_retransmissionCount();
     bb2:	0e 94 a7 09 	call	0x134e	; 0x134e <nrf24_retransmissionCount>
     bb6:	80 93 94 00 	sts	0x0094, r24
//		 nrf24_send(akc_array);
//		 /* Wait for transmission to end */
//		 while(nrf24_isSending());

		 /* Optionally, go back to RX mode ... */
		nrf24_powerUpRx();
     bba:	0e 94 41 0a 	call	0x1482	; 0x1482 <nrf24_powerUpRx>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e8       	ldi	r25, 0x80	; 128
     bc2:	ab e3       	ldi	r26, 0x3B	; 59
     bc4:	b5 e4       	ldi	r27, 0x45	; 69
     bc6:	8b 87       	std	Y+11, r24	; 0x0b
     bc8:	9c 87       	std	Y+12, r25	; 0x0c
     bca:	ad 87       	std	Y+13, r26	; 0x0d
     bcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bce:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	4a e7       	ldi	r20, 0x7A	; 122
     bdc:	53 e4       	ldi	r21, 0x43	; 67
     bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	8f 83       	std	Y+7, r24	; 0x07
     be8:	98 87       	std	Y+8, r25	; 0x08
     bea:	a9 87       	std	Y+9, r26	; 0x09
     bec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bee:	6f 81       	ldd	r22, Y+7	; 0x07
     bf0:	78 85       	ldd	r23, Y+8	; 0x08
     bf2:	89 85       	ldd	r24, Y+9	; 0x09
     bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	40 e8       	ldi	r20, 0x80	; 128
     bfc:	5f e3       	ldi	r21, 0x3F	; 63
     bfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c02:	88 23       	and	r24, r24
     c04:	2c f4       	brge	.+10     	; 0xc10 <main+0xca>
		__ticks = 1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9e 83       	std	Y+6, r25	; 0x06
     c0c:	8d 83       	std	Y+5, r24	; 0x05
     c0e:	3f c0       	rjmp	.+126    	; 0xc8e <main+0x148>
	else if (__tmp > 65535)
     c10:	6f 81       	ldd	r22, Y+7	; 0x07
     c12:	78 85       	ldd	r23, Y+8	; 0x08
     c14:	89 85       	ldd	r24, Y+9	; 0x09
     c16:	9a 85       	ldd	r25, Y+10	; 0x0a
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	3f ef       	ldi	r19, 0xFF	; 255
     c1c:	4f e7       	ldi	r20, 0x7F	; 127
     c1e:	57 e4       	ldi	r21, 0x47	; 71
     c20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c24:	18 16       	cp	r1, r24
     c26:	4c f5       	brge	.+82     	; 0xc7a <main+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c28:	6b 85       	ldd	r22, Y+11	; 0x0b
     c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e2       	ldi	r20, 0x20	; 32
     c36:	51 e4       	ldi	r21, 0x41	; 65
     c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	bc 01       	movw	r22, r24
     c42:	cd 01       	movw	r24, r26
     c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	9e 83       	std	Y+6, r25	; 0x06
     c4e:	8d 83       	std	Y+5, r24	; 0x05
     c50:	0f c0       	rjmp	.+30     	; 0xc70 <main+0x12a>
     c52:	89 e1       	ldi	r24, 0x19	; 25
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	9c 83       	std	Y+4, r25	; 0x04
     c58:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <main+0x118>
     c62:	9c 83       	std	Y+4, r25	; 0x04
     c64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	9e 83       	std	Y+6, r25	; 0x06
     c6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	69 f7       	brne	.-38     	; 0xc52 <main+0x10c>
     c78:	14 c0       	rjmp	.+40     	; 0xca2 <main+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7a:	6f 81       	ldd	r22, Y+7	; 0x07
     c7c:	78 85       	ldd	r23, Y+8	; 0x08
     c7e:	89 85       	ldd	r24, Y+9	; 0x09
     c80:	9a 85       	ldd	r25, Y+10	; 0x0a
     c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c86:	dc 01       	movw	r26, r24
     c88:	cb 01       	movw	r24, r22
     c8a:	9e 83       	std	Y+6, r25	; 0x06
     c8c:	8d 83       	std	Y+5, r24	; 0x05
     c8e:	8d 81       	ldd	r24, Y+5	; 0x05
     c90:	9e 81       	ldd	r25, Y+6	; 0x06
     c92:	9a 83       	std	Y+2, r25	; 0x02
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <main+0x154>
     c9e:	9a 83       	std	Y+2, r25	; 0x02
     ca0:	89 83       	std	Y+1, r24	; 0x01
		// nrf24_powerDown();            

		/* Wait a little ... */

		_delay_ms(3000);
		q++;
     ca2:	80 91 68 00 	lds	r24, 0x0068
     ca6:	8f 5f       	subi	r24, 0xFF	; 255
     ca8:	80 93 68 00 	sts	0x0068, r24
     cac:	64 cf       	rjmp	.-312    	; 0xb76 <main+0x30>

00000cae <DIO_voidInit>:
static  u8 * const DIO_u8Ddrs[]={DIO_u8DDRA ,DIO_u8DDRB, DIO_u8DDRC , DIO_u8DDRD} ;
static  u8 *const DIO_u8Pins[]={DIO_u8PINA ,DIO_u8PINB, DIO_u8PINC , DIO_u8PIND} ;


extern void DIO_voidInit(void)
{
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62

/*Comment!:initializing Ports Directions */
*DIO_u8Ddrs[DIO_u8PORT0]=DIO_u8PORTA_DIR;
     cb6:	e0 91 7f 00 	lds	r30, 0x007F
     cba:	f0 91 80 00 	lds	r31, 0x0080
     cbe:	8f ef       	ldi	r24, 0xFF	; 255
     cc0:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT1]=DIO_u8PORTB_DIR;
     cc2:	e0 91 81 00 	lds	r30, 0x0081
     cc6:	f0 91 82 00 	lds	r31, 0x0082
     cca:	8f e0       	ldi	r24, 0x0F	; 15
     ccc:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT2]=DIO_u8PORTC_DIR;
     cce:	e0 91 83 00 	lds	r30, 0x0083
     cd2:	f0 91 84 00 	lds	r31, 0x0084
     cd6:	8f ef       	ldi	r24, 0xFF	; 255
     cd8:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT3]=DIO_u8PORTD_DIR;
     cda:	e0 91 85 00 	lds	r30, 0x0085
     cde:	f0 91 86 00 	lds	r31, 0x0086
     ce2:	10 82       	st	Z, r1

/*Comment!:initializing Ports Value  */
*DIO_u8Ports[DIO_u8PORT0] =(DIO_u8PORTA_DIR & DIO_u8PORTA_VAL) | ((~DIO_u8PORTA_DIR)&*DIO_u8Ports[DIO_u8PORT0] );
     ce4:	e0 91 77 00 	lds	r30, 0x0077
     ce8:	f0 91 78 00 	lds	r31, 0x0078
     cec:	10 82       	st	Z, r1
*DIO_u8Ports[DIO_u8PORT1] =(DIO_u8PORTB_DIR & DIO_u8PORTB_VAL)| ((~DIO_u8PORTB_DIR)&*DIO_u8Ports[DIO_u8PORT1] );
     cee:	a0 91 79 00 	lds	r26, 0x0079
     cf2:	b0 91 7a 00 	lds	r27, 0x007A
     cf6:	e0 91 79 00 	lds	r30, 0x0079
     cfa:	f0 91 7a 00 	lds	r31, 0x007A
     cfe:	80 81       	ld	r24, Z
     d00:	80 7f       	andi	r24, 0xF0	; 240
     d02:	8c 93       	st	X, r24
*DIO_u8Ports[DIO_u8PORT2] =(DIO_u8PORTC_DIR & DIO_u8PORTC_VAL)| ((~DIO_u8PORTC_DIR)&*DIO_u8Ports[DIO_u8PORT2] );
     d04:	e0 91 7b 00 	lds	r30, 0x007B
     d08:	f0 91 7c 00 	lds	r31, 0x007C
     d0c:	10 82       	st	Z, r1
*DIO_u8Ports[DIO_u8PORT3] =(DIO_u8PORTD_DIR & DIO_u8PORTD_VAL)| ((~DIO_u8PORTD_DIR)&*DIO_u8Ports[DIO_u8PORT3] );
     d0e:	a0 91 7d 00 	lds	r26, 0x007D
     d12:	b0 91 7e 00 	lds	r27, 0x007E
     d16:	e0 91 7d 00 	lds	r30, 0x007D
     d1a:	f0 91 7e 00 	lds	r31, 0x007E
     d1e:	80 81       	ld	r24, Z
     d20:	8c 93       	st	X, r24

}
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <DIO_u8ReadPinVal>:


extern u8 DIO_u8ReadPinVal(u8 Copy_u8PinIdx,u8* Copy_u8PtrToval)
{
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <DIO_u8ReadPinVal+0x6>
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <DIO_u8ReadPinVal+0x8>
     d30:	00 d0       	rcall	.+0      	; 0xd32 <DIO_u8ReadPinVal+0xa>
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	8c 83       	std	Y+4, r24	; 0x04
     d38:	7e 83       	std	Y+6, r23	; 0x06
     d3a:	6d 83       	std	Y+5, r22	; 0x05

	 u8 Local_u8CheckPinState=ok ;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8PinIdx<DIO_u8PINMAXIDX)
     d40:	8c 81       	ldd	r24, Y+4	; 0x04
     d42:	8f 31       	cpi	r24, 0x1F	; 31
     d44:	80 f5       	brcc	.+96     	; 0xda6 <DIO_u8ReadPinVal+0x7e>
	    {

		u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
     d46:	8c 81       	ldd	r24, Y+4	; 0x04
     d48:	86 95       	lsr	r24
     d4a:	86 95       	lsr	r24
     d4c:	86 95       	lsr	r24
     d4e:	8a 83       	std	Y+2, r24	; 0x02
		u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	87 70       	andi	r24, 0x07	; 7
     d54:	89 83       	std	Y+1, r24	; 0x01

		* Copy_u8PtrToval=get_bit(*DIO_u8Pins[local_u8CheckPinPlace],local_u8MapPin);
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	88 2f       	mov	r24, r24
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	fc 01       	movw	r30, r24
     d62:	e9 57       	subi	r30, 0x79	; 121
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	01 90       	ld	r0, Z+
     d68:	f0 81       	ld	r31, Z
     d6a:	e0 2d       	mov	r30, r0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_u8ReadPinVal+0x5a>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	2a 95       	dec	r18
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_u8ReadPinVal+0x56>
     d86:	9a 01       	movw	r18, r20
     d88:	28 23       	and	r18, r24
     d8a:	39 23       	and	r19, r25
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	88 2f       	mov	r24, r24
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	a9 01       	movw	r20, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <DIO_u8ReadPinVal+0x72>
     d96:	55 95       	asr	r21
     d98:	47 95       	ror	r20
     d9a:	8a 95       	dec	r24
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <DIO_u8ReadPinVal+0x6e>
     d9e:	ca 01       	movw	r24, r20
     da0:	ed 81       	ldd	r30, Y+5	; 0x05
     da2:	fe 81       	ldd	r31, Y+6	; 0x06
     da4:	80 83       	st	Z, r24
    }
    else
    {

    }
return    Local_u8CheckPinState=ok ;
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	8b 83       	std	Y+3, r24	; 0x03
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
}
     dac:	26 96       	adiw	r28, 0x06	; 6
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <DIO_u8WritePinVal>:

extern u8 DIO_u8WritePinVal(u8 Copy_u8PinIdx,u8 Copy_u8Pinval)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <DIO_u8WritePinVal+0x6>
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <DIO_u8WritePinVal+0x8>
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <DIO_u8WritePinVal+0xa>
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	8d 83       	std	Y+5, r24	; 0x05
     dce:	6e 83       	std	Y+6, r22	; 0x06
	 u8 Local_u8CheckPinState=ok ;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	8c 83       	std	Y+4, r24	; 0x04

	    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
     dd4:	8d 81       	ldd	r24, Y+5	; 0x05
     dd6:	80 32       	cpi	r24, 0x20	; 32
     dd8:	10 f0       	brcs	.+4      	; 0xdde <DIO_u8WritePinVal+0x20>
	    {
	    	 Local_u8CheckPinState=error ;
     dda:	1c 82       	std	Y+4, r1	; 0x04
     ddc:	64 c0       	rjmp	.+200    	; 0xea6 <DIO_u8WritePinVal+0xe8>
	    }
	    else
	    {
	    	 u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
     dde:	8d 81       	ldd	r24, Y+5	; 0x05
     de0:	86 95       	lsr	r24
     de2:	86 95       	lsr	r24
     de4:	86 95       	lsr	r24
     de6:	8b 83       	std	Y+3, r24	; 0x03
	    		 u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	87 70       	andi	r24, 0x07	; 7
     dec:	8a 83       	std	Y+2, r24	; 0x02
	    	     u8 local_u8PinDir;
	    	     local_u8PinDir=get_bit(*DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin);
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	fc 01       	movw	r30, r24
     dfa:	e1 58       	subi	r30, 0x81	; 129
     dfc:	ff 4f       	sbci	r31, 0xFF	; 255
     dfe:	01 90       	ld	r0, Z+
     e00:	f0 81       	ld	r31, Z
     e02:	e0 2d       	mov	r30, r0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_u8WritePinVal+0x5c>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	2a 95       	dec	r18
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <DIO_u8WritePinVal+0x58>
     e1e:	9a 01       	movw	r18, r20
     e20:	28 23       	and	r18, r24
     e22:	39 23       	and	r19, r25
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	a9 01       	movw	r20, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_u8WritePinVal+0x74>
     e2e:	55 95       	asr	r21
     e30:	47 95       	ror	r20
     e32:	8a 95       	dec	r24
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_u8WritePinVal+0x70>
     e36:	ca 01       	movw	r24, r20
     e38:	89 83       	std	Y+1, r24	; 0x01
	    	if(local_u8PinDir==1)
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	99 f5       	brne	.+102    	; 0xea6 <DIO_u8WritePinVal+0xe8>
	    	{
	    	assign_bit(*DIO_u8Ports[local_u8CheckPinPlace],local_u8MapPin,Copy_u8Pinval);
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	88 2f       	mov	r24, r24
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	fc 01       	movw	r30, r24
     e4c:	e9 58       	subi	r30, 0x89	; 137
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	a0 81       	ld	r26, Z
     e52:	b1 81       	ldd	r27, Z+1	; 0x01
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_u8WritePinVal+0xa6>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	2a 95       	dec	r18
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <DIO_u8WritePinVal+0xa2>
     e68:	28 2f       	mov	r18, r24
     e6a:	20 95       	com	r18
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	88 2f       	mov	r24, r24
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	fc 01       	movw	r30, r24
     e78:	e9 58       	subi	r30, 0x89	; 137
     e7a:	ff 4f       	sbci	r31, 0xFF	; 255
     e7c:	01 90       	ld	r0, Z+
     e7e:	f0 81       	ld	r31, Z
     e80:	e0 2d       	mov	r30, r0
     e82:	80 81       	ld	r24, Z
     e84:	42 2f       	mov	r20, r18
     e86:	48 23       	and	r20, r24
     e88:	8e 81       	ldd	r24, Y+6	; 0x06
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	b9 01       	movw	r22, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_u8WritePinVal+0xde>
     e98:	66 0f       	add	r22, r22
     e9a:	77 1f       	adc	r23, r23
     e9c:	8a 95       	dec	r24
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_u8WritePinVal+0xda>
     ea0:	cb 01       	movw	r24, r22
     ea2:	84 2b       	or	r24, r20
     ea4:	8c 93       	st	X, r24
	    	{

	    	}
	    }

     return  Local_u8CheckPinState ;
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
}
     ea8:	26 96       	adiw	r28, 0x06	; 6
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <DIO_u8ReadPortVal>:


extern u8 DIO_u8ReadPortVal(u8 Copy_u8PortIdx,u8* Copy_u8PtrToval)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <DIO_u8ReadPortVal+0x6>
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <DIO_u8ReadPortVal+0x8>
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	8a 83       	std	Y+2, r24	; 0x02
     ec8:	7c 83       	std	Y+4, r23	; 0x04
     eca:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CheckPortR=ok ;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	84 30       	cpi	r24, 0x04	; 4
     ed4:	80 f4       	brcc	.+32     	; 0xef6 <DIO_u8ReadPortVal+0x3c>
	{

	* Copy_u8PtrToval=*DIO_u8Pins[Copy_u8PortIdx] ;
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	fc 01       	movw	r30, r24
     ee2:	e9 57       	subi	r30, 0x79	; 121
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	01 90       	ld	r0, Z+
     ee8:	f0 81       	ld	r31, Z
     eea:	e0 2d       	mov	r30, r0
     eec:	80 81       	ld	r24, Z
     eee:	eb 81       	ldd	r30, Y+3	; 0x03
     ef0:	fc 81       	ldd	r31, Y+4	; 0x04
     ef2:	80 83       	st	Z, r24
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <DIO_u8ReadPortVal+0x3e>
	}
	else
	{
		Local_u8CheckPortR=error ;
     ef6:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8CheckPortR ;
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
}
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <DIO_u8WritePortVal>:

extern u8 DIO_u8WritePortVal(u8 Copy_u8PortIdx,u8 Copy_u8Portval)
{
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <DIO_u8WritePortVal+0x6>
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <DIO_u8WritePortVal+0x8>
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	8b 83       	std	Y+3, r24	; 0x03
     f16:	6c 83       	std	Y+4, r22	; 0x04
     	u8 Local_u8CheckPortR=ok ;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	8a 83       	std	Y+2, r24	; 0x02
        u8 local_u8PortDir;
		if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	84 30       	cpi	r24, 0x04	; 4
     f20:	f0 f4       	brcc	.+60     	; 0xf5e <DIO_u8WritePortVal+0x56>
		{
				local_u8PortDir=*DIO_u8Ddrs[Copy_u8PortIdx] ;
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	88 2f       	mov	r24, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	fc 01       	movw	r30, r24
     f2e:	e1 58       	subi	r30, 0x81	; 129
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	01 90       	ld	r0, Z+
     f34:	f0 81       	ld	r31, Z
     f36:	e0 2d       	mov	r30, r0
     f38:	80 81       	ld	r24, Z
     f3a:	89 83       	std	Y+1, r24	; 0x01
			  if(local_u8PortDir==0xff)
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	8f 3f       	cpi	r24, 0xFF	; 255
     f40:	79 f4       	brne	.+30     	; 0xf60 <DIO_u8WritePortVal+0x58>
			  {
		        *DIO_u8Ports[Copy_u8PortIdx]= Copy_u8Portval;
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	fc 01       	movw	r30, r24
     f4e:	e9 58       	subi	r30, 0x89	; 137
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	01 90       	ld	r0, Z+
     f54:	f0 81       	ld	r31, Z
     f56:	e0 2d       	mov	r30, r0
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	80 83       	st	Z, r24
     f5c:	01 c0       	rjmp	.+2      	; 0xf60 <DIO_u8WritePortVal+0x58>

			  }
		}
		else
		{
			Local_u8CheckPortR=error ;
     f5e:	1a 82       	std	Y+2, r1	; 0x02
		}

		return Local_u8CheckPortR ;
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <DIO_u8WritePinDir>:

extern u8 DIO_u8WritePinDir(u8 Copy_u8PinIdx,u8 Copy_u8PinDir)
{
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	00 d0       	rcall	.+0      	; 0xf76 <DIO_u8WritePinDir+0x6>
     f76:	00 d0       	rcall	.+0      	; 0xf78 <DIO_u8WritePinDir+0x8>
     f78:	0f 92       	push	r0
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	8c 83       	std	Y+4, r24	; 0x04
     f80:	6d 83       	std	Y+5, r22	; 0x05
	     u8 Local_u8CheckPinState=ok ;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	8b 83       	std	Y+3, r24	; 0x03

		    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	80 32       	cpi	r24, 0x20	; 32
     f8a:	10 f0       	brcs	.+4      	; 0xf90 <DIO_u8WritePinDir+0x20>
		    {
		    	 Local_u8CheckPinState=error ;
     f8c:	1b 82       	std	Y+3, r1	; 0x03
     f8e:	3b c0       	rjmp	.+118    	; 0x1006 <DIO_u8WritePinDir+0x96>
		    }
		    else
		    {
		    	u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	86 95       	lsr	r24
     f94:	86 95       	lsr	r24
     f96:	86 95       	lsr	r24
     f98:	8a 83       	std	Y+2, r24	; 0x02
		    	u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
     f9a:	8c 81       	ldd	r24, Y+4	; 0x04
     f9c:	87 70       	andi	r24, 0x07	; 7
     f9e:	89 83       	std	Y+1, r24	; 0x01
		    	assign_bit(* DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin,Copy_u8PinDir);
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	fc 01       	movw	r30, r24
     fac:	e1 58       	subi	r30, 0x81	; 129
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	a0 81       	ld	r26, Z
     fb2:	b1 81       	ldd	r27, Z+1	; 0x01
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_u8WritePinDir+0x54>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	2a 95       	dec	r18
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_u8WritePinDir+0x50>
     fc8:	28 2f       	mov	r18, r24
     fca:	20 95       	com	r18
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	fc 01       	movw	r30, r24
     fd8:	e1 58       	subi	r30, 0x81	; 129
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	01 90       	ld	r0, Z+
     fde:	f0 81       	ld	r31, Z
     fe0:	e0 2d       	mov	r30, r0
     fe2:	80 81       	ld	r24, Z
     fe4:	42 2f       	mov	r20, r18
     fe6:	48 23       	and	r20, r24
     fe8:	8d 81       	ldd	r24, Y+5	; 0x05
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	88 2f       	mov	r24, r24
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	b9 01       	movw	r22, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_u8WritePinDir+0x8c>
     ff8:	66 0f       	add	r22, r22
     ffa:	77 1f       	adc	r23, r23
     ffc:	8a 95       	dec	r24
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_u8WritePinDir+0x88>
    1000:	cb 01       	movw	r24, r22
    1002:	84 2b       	or	r24, r20
    1004:	8c 93       	st	X, r24
		    }

	     return  Local_u8CheckPinState ;
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <DIO_u8WritePortDir>:

extern u8 DIO_u8WritePortDir(u8 Copy_u8PortIdx,u8 Copy_u8PortDir)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <DIO_u8WritePortDir+0x6>
    101e:	0f 92       	push	r0
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	8a 83       	std	Y+2, r24	; 0x02
    1026:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8CheckPortR=ok ;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	89 83       	std	Y+1, r24	; 0x01

			if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	84 30       	cpi	r24, 0x04	; 4
    1030:	70 f4       	brcc	.+28     	; 0x104e <DIO_u8WritePortDir+0x36>
			{

			*DIO_u8Ddrs[Copy_u8PortIdx]= Copy_u8PortDir;
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	fc 01       	movw	r30, r24
    103e:	e1 58       	subi	r30, 0x81	; 129
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	01 90       	ld	r0, Z+
    1044:	f0 81       	ld	r31, Z
    1046:	e0 2d       	mov	r30, r0
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	80 83       	st	Z, r24
    104c:	01 c0       	rjmp	.+2      	; 0x1050 <DIO_u8WritePortDir+0x38>
			}
			else
			{
				Local_u8CheckPortR=error ;
    104e:	19 82       	std	Y+1, r1	; 0x01
			}

			return Local_u8CheckPortR ;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
}
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <DIO_u8ReadPinDir>:

extern u8 DIO_u8ReadPinDir(u8 Copy_u8PinIdx,u8 * Copy_u8PtrToDir)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	00 d0       	rcall	.+0      	; 0x1064 <DIO_u8ReadPinDir+0x6>
    1064:	00 d0       	rcall	.+0      	; 0x1066 <DIO_u8ReadPinDir+0x8>
    1066:	00 d0       	rcall	.+0      	; 0x1068 <DIO_u8ReadPinDir+0xa>
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	8c 83       	std	Y+4, r24	; 0x04
    106e:	7e 83       	std	Y+6, r23	; 0x06
    1070:	6d 83       	std	Y+5, r22	; 0x05
	 u8 Local_u8CheckPinState=ok ;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	8b 83       	std	Y+3, r24	; 0x03


	    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	80 32       	cpi	r24, 0x20	; 32
    107a:	10 f0       	brcs	.+4      	; 0x1080 <DIO_u8ReadPinDir+0x22>
	    {
	    	 Local_u8CheckPinState=error ;
    107c:	1b 82       	std	Y+3, r1	; 0x03
    107e:	30 c0       	rjmp	.+96     	; 0x10e0 <DIO_u8ReadPinDir+0x82>
	    }
	    else
	    {
	    	u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS;
    1080:	8c 81       	ldd	r24, Y+4	; 0x04
    1082:	86 95       	lsr	r24
    1084:	86 95       	lsr	r24
    1086:	86 95       	lsr	r24
    1088:	8a 83       	std	Y+2, r24	; 0x02
	    		 u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	87 70       	andi	r24, 0x07	; 7
    108e:	89 83       	std	Y+1, r24	; 0x01
	    	* Copy_u8PtrToDir=get_bit(*DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin);
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	88 2f       	mov	r24, r24
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	fc 01       	movw	r30, r24
    109c:	e1 58       	subi	r30, 0x81	; 129
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	01 90       	ld	r0, Z+
    10a2:	f0 81       	ld	r31, Z
    10a4:	e0 2d       	mov	r30, r0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_u8ReadPinDir+0x5e>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	2a 95       	dec	r18
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_u8ReadPinDir+0x5a>
    10c0:	9a 01       	movw	r18, r20
    10c2:	28 23       	and	r18, r24
    10c4:	39 23       	and	r19, r25
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	88 2f       	mov	r24, r24
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	a9 01       	movw	r20, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <DIO_u8ReadPinDir+0x76>
    10d0:	55 95       	asr	r21
    10d2:	47 95       	ror	r20
    10d4:	8a 95       	dec	r24
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <DIO_u8ReadPinDir+0x72>
    10d8:	ca 01       	movw	r24, r20
    10da:	ed 81       	ldd	r30, Y+5	; 0x05
    10dc:	fe 81       	ldd	r31, Y+6	; 0x06
    10de:	80 83       	st	Z, r24
	    }
	return  Local_u8CheckPinState ;
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10e2:	26 96       	adiw	r28, 0x06	; 6
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <DIO_u8ReadPortDir>:

extern u8 DIO_u8ReadPortDir(u8 Copy_u8PortIdx,u8 *Copy_u8PtrToDir)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <DIO_u8ReadPortDir+0x6>
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <DIO_u8ReadPortDir+0x8>
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	8a 83       	std	Y+2, r24	; 0x02
    1102:	7c 83       	std	Y+4, r23	; 0x04
    1104:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CheckPortR=ok ;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	84 30       	cpi	r24, 0x04	; 4
    110e:	80 f4       	brcc	.+32     	; 0x1130 <DIO_u8ReadPortDir+0x3c>
		{

		* Copy_u8PtrToDir=*DIO_u8Pins[Copy_u8PortIdx] ;
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	fc 01       	movw	r30, r24
    111c:	e9 57       	subi	r30, 0x79	; 121
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	01 90       	ld	r0, Z+
    1122:	f0 81       	ld	r31, Z
    1124:	e0 2d       	mov	r30, r0
    1126:	80 81       	ld	r24, Z
    1128:	eb 81       	ldd	r30, Y+3	; 0x03
    112a:	fc 81       	ldd	r31, Y+4	; 0x04
    112c:	80 83       	st	Z, r24
    112e:	01 c0       	rjmp	.+2      	; 0x1132 <DIO_u8ReadPortDir+0x3e>
		}
		else
		{
			Local_u8CheckPortR=error ;
    1130:	19 82       	std	Y+1, r1	; 0x01
		}

		return Local_u8CheckPortR ;
    1132:	89 81       	ldd	r24, Y+1	; 0x01
}
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <nrf24_init>:
#include "DIO-interface.h"
uint8_t payload_len;

/* init the hardware pins */
void nrf24_init() 
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    nrf24_setupPins();
    114a:	0e 94 94 0b 	call	0x1728	; 0x1728 <nrf24_setupPins>
    DIO_u8WritePinVal(CE , DIO_u8LOW);
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    DIO_u8WritePinVal(CSN , DIO_u8HIGH);
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	61 e0       	ldi	r22, 0x01	; 1
    115a:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
}
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <nrf24_config>:

/* configure the module */
void nrf24_config(uint8_t channel, uint8_t pay_length)
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	00 d0       	rcall	.+0      	; 0x116a <nrf24_config+0x6>
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	6a 83       	std	Y+2, r22	; 0x02
    /* Use static payload length ... */
    payload_len = pay_length;
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	80 93 99 00 	sts	0x0099, r24

    // Set RF channel
    nrf24_configRegister(RF_CH,channel);
    1178:	85 e0       	ldi	r24, 0x05	; 5
    117a:	69 81       	ldd	r22, Y+1	; 0x01
    117c:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>

    // Set length of incoming payload 
    nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
    1180:	81 e1       	ldi	r24, 0x11	; 17
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
    1188:	90 91 99 00 	lds	r25, 0x0099
    118c:	82 e1       	ldi	r24, 0x12	; 18
    118e:	69 2f       	mov	r22, r25
    1190:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
    1194:	83 e1       	ldi	r24, 0x13	; 19
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
    119c:	84 e1       	ldi	r24, 0x14	; 20
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
    11a4:	85 e1       	ldi	r24, 0x15	; 21
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
    11ac:	86 e1       	ldi	r24, 0x16	; 22
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>

    // 1 Mbps, TX gain: 0dbm
    nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
    11b4:	86 e0       	ldi	r24, 0x06	; 6
    11b6:	66 e0       	ldi	r22, 0x06	; 6
    11b8:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>

    // CRC enable, 1 byte CRC length
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	68 e0       	ldi	r22, 0x08	; 8
    11c0:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>

    // Auto Acknowledgment // i made a change in (1<<ENAA_P0)|(1<<ENAA_P1)
    nrf24_configRegister(EN_AA,(0<<ENAA_P0)|(0<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	60 e0       	ldi	r22, 0x00	; 0
    11c8:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>

    // Enable RX addresses
    nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	63 e0       	ldi	r22, 0x03	; 3
    11d0:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>

    // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
    nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
    11d4:	84 e0       	ldi	r24, 0x04	; 4
    11d6:	6f e4       	ldi	r22, 0x4F	; 79
    11d8:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>

    // Dynamic length configurations: No dynamic length
    nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
    11dc:	8c e1       	ldi	r24, 0x1C	; 28
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>

    // Start listening
    nrf24_powerUpRx();
    11e4:	0e 94 41 0a 	call	0x1482	; 0x1482 <nrf24_powerUpRx>
}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <nrf24_rx_address>:

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <nrf24_rx_address+0x6>
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	89 83       	std	Y+1, r24	; 0x01
    DIO_u8WritePinVal(CE , DIO_u8LOW);
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
    1208:	29 81       	ldd	r18, Y+1	; 0x01
    120a:	3a 81       	ldd	r19, Y+2	; 0x02
    120c:	8b e0       	ldi	r24, 0x0B	; 11
    120e:	b9 01       	movw	r22, r18
    1210:	45 e0       	ldi	r20, 0x05	; 5
    1212:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <nrf24_writeRegister>
    DIO_u8WritePinVal(CE , DIO_u8HIGH);
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	61 e0       	ldi	r22, 0x01	; 1
    121a:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <nrf24_payload_length>:

/* Returns the payload length */
uint8_t nrf24_payload_length()
{
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    return payload_len;
    1230:	80 91 99 00 	lds	r24, 0x0099
}
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <nrf24_tx_address>:

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	00 d0       	rcall	.+0      	; 0x1240 <nrf24_tx_address+0x6>
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	9a 83       	std	Y+2, r25	; 0x02
    1246:	89 83       	std	Y+1, r24	; 0x01
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
    1248:	29 81       	ldd	r18, Y+1	; 0x01
    124a:	3a 81       	ldd	r19, Y+2	; 0x02
    124c:	8a e0       	ldi	r24, 0x0A	; 10
    124e:	b9 01       	movw	r22, r18
    1250:	45 e0       	ldi	r20, 0x05	; 5
    1252:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
    1256:	29 81       	ldd	r18, Y+1	; 0x01
    1258:	3a 81       	ldd	r19, Y+2	; 0x02
    125a:	80 e1       	ldi	r24, 0x10	; 16
    125c:	b9 01       	movw	r22, r18
    125e:	45 e0       	ldi	r20, 0x05	; 5
    1260:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <nrf24_writeRegister>
}
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <nrf24_dataReady>:

/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady() 
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	00 d0       	rcall	.+0      	; 0x1274 <nrf24_dataReady+0x6>
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    // See note in getData() function - just checking RX_DR isn't good enough
    uint8_t status = nrf24_getStatus();
    1278:	0e 94 08 0a 	call	0x1410	; 0x1410 <nrf24_getStatus>
    127c:	89 83       	std	Y+1, r24	; 0x01

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) 
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	88 2f       	mov	r24, r24
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	80 74       	andi	r24, 0x40	; 64
    1286:	90 70       	andi	r25, 0x00	; 0
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	19 f0       	breq	.+6      	; 0x1292 <nrf24_dataReady+0x24>
    {
        return 1;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	8a 83       	std	Y+2, r24	; 0x02
    1290:	07 c0       	rjmp	.+14     	; 0x12a0 <nrf24_dataReady+0x32>
    }

    return !nrf24_rxFifoEmpty();;
    1292:	0e 94 56 09 	call	0x12ac	; 0x12ac <nrf24_rxFifoEmpty>
    1296:	1a 82       	std	Y+2, r1	; 0x02
    1298:	88 23       	and	r24, r24
    129a:	11 f4       	brne	.+4      	; 0x12a0 <nrf24_dataReady+0x32>
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	8a 83       	std	Y+2, r24	; 0x02
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <nrf24_rxFifoEmpty>:

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	0f 92       	push	r0
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    uint8_t fifoStatus;

    nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
    12b6:	87 e1       	ldi	r24, 0x17	; 23
    12b8:	9e 01       	movw	r18, r28
    12ba:	2f 5f       	subi	r18, 0xFF	; 255
    12bc:	3f 4f       	sbci	r19, 0xFF	; 255
    12be:	b9 01       	movw	r22, r18
    12c0:	41 e0       	ldi	r20, 0x01	; 1
    12c2:	0e 94 4c 0b 	call	0x1698	; 0x1698 <nrf24_readRegister>
    
    return (fifoStatus & (1 << RX_EMPTY));
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	81 70       	andi	r24, 0x01	; 1
}
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <nrf24_payloadLength>:

/* Returns the length of data waiting in the RX fifo */
uint8_t nrf24_payloadLength()
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	0f 92       	push	r0
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;

    DIO_u8WritePinVal(CSN , DIO_u8LOW);
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    spi_transfer(R_RX_PL_WID);
    12e4:	80 e6       	ldi	r24, 0x60	; 96
    12e6:	0e 94 81 0a 	call	0x1502	; 0x1502 <spi_transfer>
    status = spi_transfer(0x00);
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	0e 94 81 0a 	call	0x1502	; 0x1502 <spi_transfer>
    12f0:	89 83       	std	Y+1, r24	; 0x01
    DIO_u8WritePinVal(CSN , DIO_u8HIGH);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	61 e0       	ldi	r22, 0x01	; 1
    12f6:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    return status;
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    12fc:	0f 90       	pop	r0
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <nrf24_getData>:

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data) 
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	00 d0       	rcall	.+0      	; 0x130a <nrf24_getData+0x6>
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	9a 83       	std	Y+2, r25	; 0x02
    1310:	89 83       	std	Y+1, r24	; 0x01
    /* Pull down chip select */
    DIO_u8WritePinVal(CSN , DIO_u8LOW);
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    /* Send cmd to read rx payload */
    spi_transfer( R_RX_PAYLOAD );
    131a:	81 e6       	ldi	r24, 0x61	; 97
    131c:	0e 94 81 0a 	call	0x1502	; 0x1502 <spi_transfer>
    
    /* Read payload */
    nrf24_transferSync(data,data,payload_len);
    1320:	20 91 99 00 	lds	r18, 0x0099
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	9a 81       	ldd	r25, Y+2	; 0x02
    1328:	49 81       	ldd	r20, Y+1	; 0x01
    132a:	5a 81       	ldd	r21, Y+2	; 0x02
    132c:	ba 01       	movw	r22, r20
    132e:	42 2f       	mov	r20, r18
    1330:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nrf24_transferSync>
    
    /* Pull up chip select */
    DIO_u8WritePinVal(CSN , DIO_u8HIGH);
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	61 e0       	ldi	r22, 0x01	; 1
    1338:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    /* Reset status register */
    nrf24_configRegister(STATUS,(1<<RX_DR));   
    133c:	87 e0       	ldi	r24, 0x07	; 7
    133e:	60 e4       	ldi	r22, 0x40	; 64
    1340:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>
}
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <nrf24_retransmissionCount>:

/* Returns the number of retransmissions occured for the last message */
uint8_t nrf24_retransmissionCount()
{
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	0f 92       	push	r0
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;
    nrf24_readRegister(OBSERVE_TX,&rv,1);
    1358:	88 e0       	ldi	r24, 0x08	; 8
    135a:	9e 01       	movw	r18, r28
    135c:	2f 5f       	subi	r18, 0xFF	; 255
    135e:	3f 4f       	sbci	r19, 0xFF	; 255
    1360:	b9 01       	movw	r22, r18
    1362:	41 e0       	ldi	r20, 0x01	; 1
    1364:	0e 94 4c 0b 	call	0x1698	; 0x1698 <nrf24_readRegister>
    rv = rv & 0x0F;
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	8f 70       	andi	r24, 0x0F	; 15
    136c:	89 83       	std	Y+1, r24	; 0x01
    return rv;
    136e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1370:	0f 90       	pop	r0
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <nrf24_send>:

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(uint8_t* value) 
{    
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	00 d0       	rcall	.+0      	; 0x137e <nrf24_send+0x6>
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	9a 83       	std	Y+2, r25	; 0x02
    1384:	89 83       	std	Y+1, r24	; 0x01
    /* Go to Standby-I first */
	  DIO_u8WritePinVal(CE , DIO_u8LOW);
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
     
    /* Set to transmitter mode , Power up if needed */
    nrf24_powerUpTx();
    138e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <nrf24_powerUpTx>

    /* Do we really need to flush TX fifo each time ? */
    #if 1
        /* Pull down chip select */
    DIO_u8WritePinVal(CSN , DIO_u8LOW);
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>

        /* Write cmd to flush transmit FIFO */
        spi_transfer(FLUSH_TX);     
    139a:	81 ee       	ldi	r24, 0xE1	; 225
    139c:	0e 94 81 0a 	call	0x1502	; 0x1502 <spi_transfer>

        /* Pull up chip select */
        DIO_u8WritePinVal(CSN , DIO_u8HIGH);
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	61 e0       	ldi	r22, 0x01	; 1
    13a4:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    #endif 

    /* Pull down chip select */
        DIO_u8WritePinVal(CSN , DIO_u8LOW);
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>

    /* Write cmd to write payload */
    spi_transfer(W_TX_PAYLOAD);
    13b0:	80 ea       	ldi	r24, 0xA0	; 160
    13b2:	0e 94 81 0a 	call	0x1502	; 0x1502 <spi_transfer>

    /* Write payload */
    nrf24_transmitSync(value,payload_len);   
    13b6:	20 91 99 00 	lds	r18, 0x0099
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	9a 81       	ldd	r25, Y+2	; 0x02
    13be:	62 2f       	mov	r22, r18
    13c0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <nrf24_transmitSync>

    /* Pull up chip select */
    DIO_u8WritePinVal(CSN , DIO_u8HIGH);
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	61 e0       	ldi	r22, 0x01	; 1
    13c8:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>

    /* Start the transmission */
    DIO_u8WritePinVal(CE , DIO_u8HIGH);
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	61 e0       	ldi	r22, 0x01	; 1
    13d0:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
}
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <nrf24_isSending>:

uint8_t nrf24_isSending()
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <nrf24_isSending+0x6>
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;

    /* read the current status */
    status = nrf24_getStatus();
    13e8:	0e 94 08 0a 	call	0x1410	; 0x1410 <nrf24_getStatus>
    13ec:	89 83       	std	Y+1, r24	; 0x01
                
    /* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
    if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	80 73       	andi	r24, 0x30	; 48
    13f6:	90 70       	andi	r25, 0x00	; 0
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	11 f0       	breq	.+4      	; 0x1400 <nrf24_isSending+0x22>
    {        
        return 0; /* false */
    13fc:	1a 82       	std	Y+2, r1	; 0x02
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <nrf24_isSending+0x26>
    }

    return 1; /* true */
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	8a 83       	std	Y+2, r24	; 0x02
    1404:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <nrf24_getStatus>:

uint8_t nrf24_getStatus()
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	0f 92       	push	r0
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;
    DIO_u8WritePinVal(CSN , DIO_u8LOW);
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    rv = spi_transfer(NOP);
    1422:	8f ef       	ldi	r24, 0xFF	; 255
    1424:	0e 94 81 0a 	call	0x1502	; 0x1502 <spi_transfer>
    1428:	89 83       	std	Y+1, r24	; 0x01
    DIO_u8WritePinVal(CSN , DIO_u8HIGH);
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	61 e0       	ldi	r22, 0x01	; 1
    142e:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    return rv;
    1432:	89 81       	ldd	r24, Y+1	; 0x01
}
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <nrf24_lastMessageStatus>:

uint8_t nrf24_lastMessageStatus()
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	00 d0       	rcall	.+0      	; 0x1442 <nrf24_lastMessageStatus+0x6>
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;

    rv = nrf24_getStatus();
    1446:	0e 94 08 0a 	call	0x1410	; 0x1410 <nrf24_getStatus>
    144a:	89 83       	std	Y+1, r24	; 0x01

    /* Transmission went OK */
    if((rv & ((1 << TX_DS))))
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	88 2f       	mov	r24, r24
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	80 72       	andi	r24, 0x20	; 32
    1454:	90 70       	andi	r25, 0x00	; 0
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	11 f0       	breq	.+4      	; 0x145e <nrf24_lastMessageStatus+0x22>
    {
        return NRF24_TRANSMISSON_OK;
    145a:	1a 82       	std	Y+2, r1	; 0x02
    145c:	0c c0       	rjmp	.+24     	; 0x1476 <nrf24_lastMessageStatus+0x3a>
    }
    /* Maximum retransmission count is reached */
    /* Last message probably went missing ... */
    else if((rv & ((1 << MAX_RT))))
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	80 71       	andi	r24, 0x10	; 16
    1466:	90 70       	andi	r25, 0x00	; 0
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	19 f0       	breq	.+6      	; 0x1472 <nrf24_lastMessageStatus+0x36>
    {
        return NRF24_MESSAGE_LOST;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	8a 83       	std	Y+2, r24	; 0x02
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <nrf24_lastMessageStatus+0x3a>
    }  
    /* Probably still sending ... */
    else
    {
        return 0xFF;
    1472:	8f ef       	ldi	r24, 0xFF	; 255
    1474:	8a 83       	std	Y+2, r24	; 0x02
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    }
}
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <nrf24_powerUpRx>:

void nrf24_powerUpRx()
{     
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
	  DIO_u8WritePinVal(CSN , DIO_u8LOW);
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    spi_transfer(FLUSH_RX);
    1492:	82 ee       	ldi	r24, 0xE2	; 226
    1494:	0e 94 81 0a 	call	0x1502	; 0x1502 <spi_transfer>
    DIO_u8WritePinVal(CSN , DIO_u8HIGH);
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	61 e0       	ldi	r22, 0x01	; 1
    149c:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
    14a0:	87 e0       	ldi	r24, 0x07	; 7
    14a2:	60 e7       	ldi	r22, 0x70	; 112
    14a4:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>

    DIO_u8WritePinVal(CE , DIO_u8LOW);
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	6b e0       	ldi	r22, 0x0B	; 11
    14b4:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>
    DIO_u8WritePinVal(CE , DIO_u8HIGH);}
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	61 e0       	ldi	r22, 0x01	; 1
    14bc:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <nrf24_powerUpTx>:

void nrf24_powerUpTx()
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
    14ce:	87 e0       	ldi	r24, 0x07	; 7
    14d0:	60 e7       	ldi	r22, 0x70	; 112
    14d2:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	6a e0       	ldi	r22, 0x0A	; 10
    14da:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>
}
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <nrf24_powerDown>:

void nrf24_powerDown()
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
	  DIO_u8WritePinVal(CE , DIO_u8LOW);
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	68 e0       	ldi	r22, 0x08	; 8
    14f8:	0e 94 30 0b 	call	0x1660	; 0x1660 <nrf24_configRegister>
}
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <spi_transfer>:

/* software spi routine */
uint8_t spi_transfer(uint8_t tx)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	00 d0       	rcall	.+0      	; 0x1508 <spi_transfer+0x6>
    1508:	00 d0       	rcall	.+0      	; 0x150a <spi_transfer+0x8>
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	8c 83       	std	Y+4, r24	; 0x04
    uint8_t i = 0;
    1510:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t rx = 0;    
    1512:	19 82       	std	Y+1, r1	; 0x01
    uint8_t temp=0 ;
    1514:	1b 82       	std	Y+3, r1	; 0x03
    DIO_u8WritePinVal(SCK , DIO_u8LOW);
    1516:	82 e0       	ldi	r24, 0x02	; 2
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>

    for(i=0;i<8;i++)
    151e:	1a 82       	std	Y+2, r1	; 0x02
    1520:	39 c0       	rjmp	.+114    	; 0x1594 <spi_transfer+0x92>
    {

        if(tx & (1<<(7-i)))
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	48 2f       	mov	r20, r24
    1526:	50 e0       	ldi	r21, 0x00	; 0
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	87 e0       	ldi	r24, 0x07	; 7
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	82 1b       	sub	r24, r18
    1534:	93 0b       	sbc	r25, r19
    1536:	9a 01       	movw	r18, r20
    1538:	02 c0       	rjmp	.+4      	; 0x153e <spi_transfer+0x3c>
    153a:	35 95       	asr	r19
    153c:	27 95       	ror	r18
    153e:	8a 95       	dec	r24
    1540:	e2 f7       	brpl	.-8      	; 0x153a <spi_transfer+0x38>
    1542:	c9 01       	movw	r24, r18
    1544:	81 70       	andi	r24, 0x01	; 1
    1546:	90 70       	andi	r25, 0x00	; 0
    1548:	88 23       	and	r24, r24
    154a:	29 f0       	breq	.+10     	; 0x1556 <spi_transfer+0x54>
        {
        	  DIO_u8WritePinVal(MOSI , DIO_u8HIGH);
    154c:	83 e0       	ldi	r24, 0x03	; 3
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    1554:	04 c0       	rjmp	.+8      	; 0x155e <spi_transfer+0x5c>
        }
        else
        {
        	DIO_u8WritePinVal(MOSI , DIO_u8LOW);
    1556:	83 e0       	ldi	r24, 0x03	; 3
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
        }

        DIO_u8WritePinVal(SCK , DIO_u8HIGH);
    155e:	82 e0       	ldi	r24, 0x02	; 2
    1560:	61 e0       	ldi	r22, 0x01	; 1
    1562:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>

        rx = rx << 1;
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	88 0f       	add	r24, r24
    156a:	89 83       	std	Y+1, r24	; 0x01
        DIO_u8ReadPinVal(MISO , &temp);
    156c:	9e 01       	movw	r18, r28
    156e:	2d 5f       	subi	r18, 0xFD	; 253
    1570:	3f 4f       	sbci	r19, 0xFF	; 255
    1572:	84 e0       	ldi	r24, 0x04	; 4
    1574:	b9 01       	movw	r22, r18
    1576:	0e 94 94 06 	call	0xd28	; 0xd28 <DIO_u8ReadPinVal>
        if(temp)
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	88 23       	and	r24, r24
    157e:	19 f0       	breq	.+6      	; 0x1586 <spi_transfer+0x84>
        {
            rx |= 0x01;
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	81 60       	ori	r24, 0x01	; 1
    1584:	89 83       	std	Y+1, r24	; 0x01
        }

        DIO_u8WritePinVal(SCK , DIO_u8LOW);
    1586:	82 e0       	ldi	r24, 0x02	; 2
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    uint8_t i = 0;
    uint8_t rx = 0;    
    uint8_t temp=0 ;
    DIO_u8WritePinVal(SCK , DIO_u8LOW);

    for(i=0;i<8;i++)
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	8f 5f       	subi	r24, 0xFF	; 255
    1592:	8a 83       	std	Y+2, r24	; 0x02
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	88 30       	cpi	r24, 0x08	; 8
    1598:	20 f2       	brcs	.-120    	; 0x1522 <spi_transfer+0x20>
        }

        DIO_u8WritePinVal(SCK , DIO_u8LOW);
    }

    return rx;
    159a:	89 81       	ldd	r24, Y+1	; 0x01
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <nrf24_transferSync+0xa>
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <nrf24_transferSync+0xc>
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <nrf24_transferSync+0xe>
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	9b 83       	std	Y+3, r25	; 0x03
    15be:	8a 83       	std	Y+2, r24	; 0x02
    15c0:	7d 83       	std	Y+5, r23	; 0x05
    15c2:	6c 83       	std	Y+4, r22	; 0x04
    15c4:	4e 83       	std	Y+6, r20	; 0x06
    uint8_t i;

    for(i=0;i<len;i++)
    15c6:	19 82       	std	Y+1, r1	; 0x01
    15c8:	18 c0       	rjmp	.+48     	; 0x15fa <nrf24_transferSync+0x50>
    {
        datain[i] = spi_transfer(dataout[i]);
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	8c 81       	ldd	r24, Y+4	; 0x04
    15d2:	9d 81       	ldd	r25, Y+5	; 0x05
    15d4:	8c 01       	movw	r16, r24
    15d6:	02 0f       	add	r16, r18
    15d8:	13 1f       	adc	r17, r19
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	9b 81       	ldd	r25, Y+3	; 0x03
    15e4:	fc 01       	movw	r30, r24
    15e6:	e2 0f       	add	r30, r18
    15e8:	f3 1f       	adc	r31, r19
    15ea:	80 81       	ld	r24, Z
    15ec:	0e 94 81 0a 	call	0x1502	; 0x1502 <spi_transfer>
    15f0:	f8 01       	movw	r30, r16
    15f2:	80 83       	st	Z, r24
/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    uint8_t i;

    for(i=0;i<len;i++)
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	8f 5f       	subi	r24, 0xFF	; 255
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	99 81       	ldd	r25, Y+1	; 0x01
    15fc:	8e 81       	ldd	r24, Y+6	; 0x06
    15fe:	98 17       	cp	r25, r24
    1600:	20 f3       	brcs	.-56     	; 0x15ca <nrf24_transferSync+0x20>
    {
        datain[i] = spi_transfer(dataout[i]);
    }

}
    1602:	26 96       	adiw	r28, 0x06	; 6
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	08 95       	ret

00001618 <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	00 d0       	rcall	.+0      	; 0x161e <nrf24_transmitSync+0x6>
    161e:	00 d0       	rcall	.+0      	; 0x1620 <nrf24_transmitSync+0x8>
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	9b 83       	std	Y+3, r25	; 0x03
    1626:	8a 83       	std	Y+2, r24	; 0x02
    1628:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t i;
    
    for(i=0;i<len;i++)
    162a:	19 82       	std	Y+1, r1	; 0x01
    162c:	0e c0       	rjmp	.+28     	; 0x164a <nrf24_transmitSync+0x32>
    {
        spi_transfer(dataout[i]);
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	9b 81       	ldd	r25, Y+3	; 0x03
    1638:	fc 01       	movw	r30, r24
    163a:	e2 0f       	add	r30, r18
    163c:	f3 1f       	adc	r31, r19
    163e:	80 81       	ld	r24, Z
    1640:	0e 94 81 0a 	call	0x1502	; 0x1502 <spi_transfer>
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    uint8_t i;
    
    for(i=0;i<len;i++)
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	8f 5f       	subi	r24, 0xFF	; 255
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	99 81       	ldd	r25, Y+1	; 0x01
    164c:	8c 81       	ldd	r24, Y+4	; 0x04
    164e:	98 17       	cp	r25, r24
    1650:	70 f3       	brcs	.-36     	; 0x162e <nrf24_transmitSync+0x16>
    {
        spi_transfer(dataout[i]);
    }

}
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	00 d0       	rcall	.+0      	; 0x1666 <nrf24_configRegister+0x6>
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	89 83       	std	Y+1, r24	; 0x01
    166c:	6a 83       	std	Y+2, r22	; 0x02
	  DIO_u8WritePinVal(CSN , DIO_u8LOW);
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	8f 71       	andi	r24, 0x1F	; 31
    167a:	80 62       	ori	r24, 0x20	; 32
    167c:	0e 94 81 0a 	call	0x1502	; 0x1502 <spi_transfer>
    spi_transfer(value);
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	0e 94 81 0a 	call	0x1502	; 0x1502 <spi_transfer>
    DIO_u8WritePinVal(CSN , DIO_u8HIGH);}
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	61 e0       	ldi	r22, 0x01	; 1
    168a:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	00 d0       	rcall	.+0      	; 0x169e <nrf24_readRegister+0x6>
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <nrf24_readRegister+0x8>
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	7b 83       	std	Y+3, r23	; 0x03
    16a8:	6a 83       	std	Y+2, r22	; 0x02
    16aa:	4c 83       	std	Y+4, r20	; 0x04
	  DIO_u8WritePinVal(CSN , DIO_u8LOW);
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	8f 71       	andi	r24, 0x1F	; 31
    16b8:	0e 94 81 0a 	call	0x1502	; 0x1502 <spi_transfer>
    nrf24_transferSync(value,value,len);
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	9b 81       	ldd	r25, Y+3	; 0x03
    16c0:	2a 81       	ldd	r18, Y+2	; 0x02
    16c2:	3b 81       	ldd	r19, Y+3	; 0x03
    16c4:	b9 01       	movw	r22, r18
    16c6:	4c 81       	ldd	r20, Y+4	; 0x04
    16c8:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <nrf24_transferSync>
	  DIO_u8WritePinVal(CSN , DIO_u8HIGH);
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	61 e0       	ldi	r22, 0x01	; 1
    16d0:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
}
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <nrf24_writeRegister+0x6>
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <nrf24_writeRegister+0x8>
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	7b 83       	std	Y+3, r23	; 0x03
    16f2:	6a 83       	std	Y+2, r22	; 0x02
    16f4:	4c 83       	std	Y+4, r20	; 0x04
	  DIO_u8WritePinVal(CSN , DIO_u8LOW);
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	8f 71       	andi	r24, 0x1F	; 31
    1702:	80 62       	ori	r24, 0x20	; 32
    1704:	0e 94 81 0a 	call	0x1502	; 0x1502 <spi_transfer>
    nrf24_transmitSync(value,len);
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	9b 81       	ldd	r25, Y+3	; 0x03
    170c:	6c 81       	ldd	r22, Y+4	; 0x04
    170e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <nrf24_transmitSync>
	  DIO_u8WritePinVal(CSN , DIO_u8HIGH);
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	61 e0       	ldi	r22, 0x01	; 1
    1716:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_u8WritePinVal>
}
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <nrf24_setupPins>:
void nrf24_setupPins()
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62

	DIO_u8WritePinDir(CE , DIO_u8HIGH);
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	61 e0       	ldi	r22, 0x01	; 1
    1734:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_u8WritePinDir>
	DIO_u8WritePinDir(CSN , DIO_u8HIGH);
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	61 e0       	ldi	r22, 0x01	; 1
    173c:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_u8WritePinDir>
	DIO_u8WritePinDir(SCK , DIO_u8HIGH);
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	61 e0       	ldi	r22, 0x01	; 1
    1744:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_u8WritePinDir>
	DIO_u8WritePinDir(MOSI , DIO_u8HIGH);
    1748:	83 e0       	ldi	r24, 0x03	; 3
    174a:	61 e0       	ldi	r22, 0x01	; 1
    174c:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_u8WritePinDir>
	DIO_u8WritePinDir(MISO , DIO_u8LOW);
    1750:	84 e0       	ldi	r24, 0x04	; 4
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	0e 94 b8 07 	call	0xf70	; 0xf70 <DIO_u8WritePinDir>
}
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <__prologue_saves__>:
    175e:	2f 92       	push	r2
    1760:	3f 92       	push	r3
    1762:	4f 92       	push	r4
    1764:	5f 92       	push	r5
    1766:	6f 92       	push	r6
    1768:	7f 92       	push	r7
    176a:	8f 92       	push	r8
    176c:	9f 92       	push	r9
    176e:	af 92       	push	r10
    1770:	bf 92       	push	r11
    1772:	cf 92       	push	r12
    1774:	df 92       	push	r13
    1776:	ef 92       	push	r14
    1778:	ff 92       	push	r15
    177a:	0f 93       	push	r16
    177c:	1f 93       	push	r17
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	ca 1b       	sub	r28, r26
    1788:	db 0b       	sbc	r29, r27
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	09 94       	ijmp

00001796 <__epilogue_restores__>:
    1796:	2a 88       	ldd	r2, Y+18	; 0x12
    1798:	39 88       	ldd	r3, Y+17	; 0x11
    179a:	48 88       	ldd	r4, Y+16	; 0x10
    179c:	5f 84       	ldd	r5, Y+15	; 0x0f
    179e:	6e 84       	ldd	r6, Y+14	; 0x0e
    17a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    17a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    17a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    17a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    17a8:	b9 84       	ldd	r11, Y+9	; 0x09
    17aa:	c8 84       	ldd	r12, Y+8	; 0x08
    17ac:	df 80       	ldd	r13, Y+7	; 0x07
    17ae:	ee 80       	ldd	r14, Y+6	; 0x06
    17b0:	fd 80       	ldd	r15, Y+5	; 0x05
    17b2:	0c 81       	ldd	r16, Y+4	; 0x04
    17b4:	1b 81       	ldd	r17, Y+3	; 0x03
    17b6:	aa 81       	ldd	r26, Y+2	; 0x02
    17b8:	b9 81       	ldd	r27, Y+1	; 0x01
    17ba:	ce 0f       	add	r28, r30
    17bc:	d1 1d       	adc	r29, r1
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	ed 01       	movw	r28, r26
    17ca:	08 95       	ret

000017cc <_exit>:
    17cc:	f8 94       	cli

000017ce <__stop_program>:
    17ce:	ff cf       	rjmp	.-2      	; 0x17ce <__stop_program>
